{"ast":null,"code":"import * as api from \"api\";\nimport { createDb, db } from \"js/db\";\nimport * as schema from \"js/schema\";\nimport store from \"js/store\";\nimport { fittersAssignmentTransferProc, groupInfoProc, orderActivitiesSort, templatesConverter, localInstallationStepsConfirmDateProc, getNonConformityConfig } from \"js/util\";\nimport { normalize } from \"normalizr\";\nimport _ from \"lodash\";\nimport { getIDPToken } from \"actions\";\nimport { formatDateToYMD, taskDataConversion } from \"./util\";\nexport const type = {\n  CACHE: 0,\n  API: 1\n};\nexport const initDB = () => {\n  const state = store.getState();\n  const personalNumber = state.auth.personalNumber;\n  createDb(personalNumber);\n};\nexport const fetchProfile = (param = type.API) => {\n  if (param === type.API) {\n    return api.getProfile().then(response => {\n      createDb(response.data.personalNumber);\n      return db.cache.put({\n        id: \"auth\",\n        data: response.data\n      }).then(() => {\n        return Promise.resolve(response.data);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"auth\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchProfile();\n      }\n    });\n  }\n};\nexport const fetchMasterData = (param = type.API) => {\n  if (param === type.API) {\n    return api.fetchMasterData().then(response => {\n      const {\n        entities\n      } = normalize(response.data, schema.masterData);\n      entities[\"nonConformityConfig\"] = getNonConformityConfig();\n      return db.cache.put({\n        id: \"masterData\",\n        data: entities\n      }).then(() => {\n        return Promise.resolve(entities);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"masterData\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchMasterData();\n      }\n    });\n  }\n};\nexport const fetchOrdersData = (param = type.API) => {\n  if (param === type.API) {\n    return api.fetchOrdersData().then(response => {\n      const data = response.data;\n      data.orderActivities = orderActivitiesSort(data.orderActivities);\n      const {\n        entities\n      } = normalize(response.data, schema.ordersData);\n      return db.cache.put({\n        id: \"ordersData\",\n        data: entities\n      }).then(() => {\n        return Promise.resolve(entities);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"ordersData\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchOrdersData();\n      }\n    });\n  }\n};\n\nfunction customizer(objValue, srcValue) {\n  if (_.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n\nexport const fetchOrdersDataByProjects = (param = type.API, projects, step) => {\n  const auth = store.getState().auth;\n\n  if (param === type.API) {\n    let promises = [];\n    let splitCount = Math.ceil(projects.length / step);\n\n    for (let i = 0; i < splitCount; i++) {\n      let ps = {\n        projectNos: projects.slice(i * step, (i + 1) * step)\n      };\n      promises.push(api.fetchOrdersDataByProjects(ps));\n    }\n\n    if (promises.length === 0) {\n      // Just get the error message through call api\n      const message = (auth === null || auth === void 0 ? void 0 : auth.roles[0]) === \"SL\" ? \"请到我的->同步界面上，点最右上角的同步按钮同步数据\" : \"未发现该用户的订单信息\";\n      return Promise.reject({\n        message: message\n      });\n    }\n\n    let result = {};\n    let fulfilledValues = [];\n    return Promise.allSettled(promises).then(results => {\n      results.forEach(result => {\n        if (result.status === \"fulfilled\") {\n          fulfilledValues.push(result.value);\n        }\n      });\n\n      if (fulfilledValues.length === 0) {\n        const message = (auth === null || auth === void 0 ? void 0 : auth.roles[0]) === \"SL\" ? \"请到我的->同步界面上，点最右上角的同步按钮同步数据\" : \"未发现该用户的订单信息\";\n        return Promise.reject({\n          message: message\n        });\n      } else {\n        for (let i = 0; i < fulfilledValues.length; i++) {\n          _.mergeWith(result, fulfilledValues[i].data, customizer);\n        }\n\n        result.orderActivities = orderActivitiesSort(result.orderActivities);\n        const {\n          entities\n        } = normalize(result, schema.ordersData);\n        return db.cache.put({\n          id: \"ordersData\",\n          data: entities\n        }).then(() => {\n          return Promise.resolve(entities);\n        });\n      }\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"ordersData\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchOrdersDataByProjects(type.API, projects, step);\n      }\n    });\n  }\n};\nexport const fetchTemplatesData = (param = type.API) => {\n  if (param === type.API) {\n    return api.fetchTemplatesData().then(response => {\n      const data = templatesConverter(response.data);\n      return db.cache.put({\n        id: \"templatesData\",\n        data: data\n      }).then(() => {\n        return Promise.resolve(data);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"templatesData\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchTemplatesData();\n      }\n    });\n  }\n};\nexport const fetchGroupInfo = (param = type.API) => {\n  if (param === type.API) {\n    return api.fetchGroupInfo().then(response => {\n      const data = groupInfoProc(response.data);\n      return db.cache.put({\n        id: \"groupInfo\",\n        data: data\n      }).then(() => {\n        return Promise.resolve(data);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"groupInfo\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchGroupInfo();\n      }\n    });\n  }\n};\nexport const updateOrderActivities = data => {\n  return db.cache.get(\"ordersData\").then(cache => {\n    if (cache === null || cache === void 0 ? void 0 : cache.data) {\n      let {\n        orderActivities\n      } = cache.data;\n      orderActivities = { ...orderActivities,\n        ...data.orderActivities\n      };\n      const newOrdersData = { ...cache.data\n      };\n      newOrdersData.orderActivities = orderActivities;\n      return db.cache.put({\n        id: \"ordersData\",\n        data: newOrdersData\n      });\n    } else {\n      return Promise.resolve(data);\n    }\n  });\n};\nexport const fetchLocalInstallationStepsConfirmDate = (data, param = type.API) => {\n  if (param === type.API) {\n    let promises = [];\n    let projects = data.projectNos;\n    let step = 70;\n    let splitCount = Math.ceil(projects.length / step);\n\n    for (let i = 0; i < splitCount; i++) {\n      let ps = {\n        projectNos: projects.slice(i * step, (i + 1) * step)\n      };\n      promises.push(api.getLocalInstallationStepConfirmDate(ps));\n    }\n\n    if (promises.length === 0) {\n      const data = localInstallationStepsConfirmDateProc([]);\n      return db.cache.put({\n        id: \"localInstallationStepsConfirmDate\",\n        data: data\n      }).then(() => {\n        return Promise.resolve(data);\n      });\n    }\n\n    return Promise.all(promises).then(response => {\n      let res = [];\n\n      for (let i = 0; i < splitCount; i++) {\n        res = res.concat(response[i].data);\n      }\n\n      const data = localInstallationStepsConfirmDateProc(res);\n      return db.cache.put({\n        id: \"localInstallationStepsConfirmDate\",\n        data: data\n      }).then(() => {\n        return Promise.resolve(data);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"localInstallationStepsConfirmDate\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchLocalInstallationStepsConfirmDate(data);\n      }\n    });\n  }\n};\nexport const updateLocalInstallationStepConfirmDate = data => {\n  return db.cache.get(\"localInstallationStepsConfirmDate\").then(cache => {\n    if (cache === null || cache === void 0 ? void 0 : cache.data) {\n      let localInstallationStepsConfirmDates = { ...cache.data\n      };\n      localInstallationStepsConfirmDates[data.orderNo + \"-\" + data.stepNo] = data;\n      return db.cache.put({\n        id: \"localInstallationStepsConfirmDate\",\n        data: localInstallationStepsConfirmDates\n      });\n    } else {\n      return Promise.resolve(data);\n    }\n  });\n};\nexport const fetchFittersDemand = (param = type.API) => {\n  if (param === type.API) {\n    return api.fetchFittersDemand().then(response => {\n      const {\n        entities\n      } = normalize(response.data, schema.fittersDemands);\n      return db.cache.put({\n        id: \"fittersDemand\",\n        data: entities.fittersDemand\n      }).then(() => {\n        return Promise.resolve(entities.fittersDemand);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"fittersDemand\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchFittersDemand();\n      }\n    });\n  }\n};\nexport const fetchFittersCertification = (param = type.API) => {\n  if (param === type.API) {\n    return api.fetchFittersCertification().then(response => {\n      const {\n        entities\n      } = normalize(response.data, schema.fittersCertifications);\n      return db.cache.put({\n        id: \"fittersCertification\",\n        data: entities.fittersCertification\n      }).then(() => {\n        return Promise.resolve(entities.fittersCertification);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"fittersCertification\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchFittersCertification();\n      }\n    });\n  }\n};\nexport const fetchFittersAssignmentTransfer = (param = type.API) => {\n  if (param === type.API) {\n    return api.fetchFittersAssignmentTransfer().then(response => {\n      const fittersAssignmentTransfer = fittersAssignmentTransferProc(response.data);\n      return db.cache.put({\n        id: \"fittersAssignmentTransfer\",\n        data: fittersAssignmentTransfer\n      }).then(() => {\n        return Promise.resolve(fittersAssignmentTransfer);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"fittersAssignmentTransfer\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchFittersAssignmentTransfer();\n      }\n    });\n  }\n};\nexport const updateFittersAssignmentTransfer = data => {\n  return db.cache.get(\"fittersAssignmentTransfer\").then(cache => {\n    if (cache === null || cache === void 0 ? void 0 : cache.data) {\n      let newData = { ...cache.data\n      };\n      const extfittersAssignmentTransfer = fittersAssignmentTransferProc(data);\n      newData = { ...newData,\n        ...extfittersAssignmentTransfer\n      };\n      return db.cache.put({\n        id: \"fittersAssignmentTransfer\",\n        data: newData\n      });\n    } else {\n      return Promise.resolve(data);\n    }\n  });\n};\nexport const fetchDocumentList = (request, param = type.API) => {\n  if (param === type.API) {\n    return api.getDocumentList(request).then(response => {\n      return db.cache.put({\n        id: \"documentList\",\n        data: response.data\n      }).then(() => {\n        return Promise.resolve(response.data);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"documentList\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchDocumentList(request);\n      }\n    });\n  }\n};\nexport const fetchInstalltionMethodDict = (param = type.API) => {\n  if (param === type.API) {\n    return api.getInstallationMethodDict().then(response => {\n      return db.cache.put({\n        id: \"InstalltionMethodDict\",\n        data: response.data\n      }).then(() => {\n        return Promise.resolve(response.data);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"InstalltionMethodDict\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchInstalltionMethodDict();\n      }\n    });\n  }\n};\nexport const updateDocumentList = data => {\n  return db.cache.get(\"documentList\").then(cache => {\n    if (cache === null || cache === void 0 ? void 0 : cache.data) {\n      const {\n        projectNo,\n        orderNo,\n        activityNo,\n        documentName,\n        modified\n      } = data;\n      let newData = { ...cache.data\n      };\n\n      if (!newData[projectNo]) {\n        newData[projectNo] = {};\n      }\n\n      if (!newData[projectNo][orderNo]) {\n        newData[projectNo][orderNo] = {};\n      }\n\n      if (!newData[projectNo][orderNo][activityNo]) {\n        newData[projectNo][orderNo][activityNo] = [];\n      }\n\n      if (newData[projectNo][orderNo][activityNo].some(e => e.name === documentName)) {\n        newData[projectNo][orderNo][activityNo].forEach(item => {\n          if (item.name === documentName) {\n            item.modified = modified;\n          }\n        });\n      } else {\n        newData[projectNo][orderNo][activityNo].push({\n          name: documentName,\n          modified: modified\n        });\n      }\n\n      return db.cache.put({\n        id: \"documentList\",\n        data: newData\n      });\n    } else {\n      return Promise.resolve(data);\n    }\n  });\n};\nexport const removeCachedData = () => {\n  db.cache.clear();\n};\nexport const fetchTasks = (param = type.API) => {\n  if (param === type.API) {\n    const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n    return api.fetchIDPTTasks(auth.userName).then(response => {\n      var _response$data;\n\n      let resp = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data.map(item => {\n        return taskDataConversion(item);\n      });\n      return db.cache.put({\n        id: \"tasks\",\n        data: resp\n      }).then(() => {\n        return Promise.resolve(resp);\n      });\n    }).catch(error => {\n      if (error.code === 401 || error.code === 404) {\n        getIDPToken();\n      }\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"tasks\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchTasks();\n      }\n    });\n  }\n};\nexport const fetchInstMethods = (param = type.API) => {\n  if (param === type.API) {\n    return api.getInstMethods().then(response => {\n      return db.cache.put({\n        id: \"instMethods\",\n        data: response.data\n      }).then(() => {\n        return Promise.resolve(response.data);\n      });\n    });\n  }\n\n  if (param === type.CACHE) {\n    return db.cache.get(\"instMethods\").then(cache => {\n      if (cache === null || cache === void 0 ? void 0 : cache.data) {\n        return Promise.resolve(cache.data);\n      } else {\n        return fetchTasks();\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/fetch.js"],"names":["api","createDb","db","schema","store","fittersAssignmentTransferProc","groupInfoProc","orderActivitiesSort","templatesConverter","localInstallationStepsConfirmDateProc","getNonConformityConfig","normalize","_","getIDPToken","formatDateToYMD","taskDataConversion","type","CACHE","API","initDB","state","getState","personalNumber","auth","fetchProfile","param","getProfile","then","response","data","cache","put","id","Promise","resolve","get","fetchMasterData","entities","masterData","fetchOrdersData","orderActivities","ordersData","customizer","objValue","srcValue","isArray","concat","fetchOrdersDataByProjects","projects","step","promises","splitCount","Math","ceil","length","i","ps","projectNos","slice","push","message","roles","reject","result","fulfilledValues","allSettled","results","forEach","status","value","mergeWith","fetchTemplatesData","fetchGroupInfo","updateOrderActivities","newOrdersData","fetchLocalInstallationStepsConfirmDate","getLocalInstallationStepConfirmDate","all","res","updateLocalInstallationStepConfirmDate","localInstallationStepsConfirmDates","orderNo","stepNo","fetchFittersDemand","fittersDemands","fittersDemand","fetchFittersCertification","fittersCertifications","fittersCertification","fetchFittersAssignmentTransfer","fittersAssignmentTransfer","updateFittersAssignmentTransfer","newData","extfittersAssignmentTransfer","fetchDocumentList","request","getDocumentList","fetchInstalltionMethodDict","getInstallationMethodDict","updateDocumentList","projectNo","activityNo","documentName","modified","some","e","name","item","removeCachedData","clear","fetchTasks","JSON","parse","window","localStorage","getItem","fetchIDPTTasks","userName","resp","map","catch","error","code","fetchInstMethods","getInstMethods"],"mappings":"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","sourcesContent":["import * as api from \"api\";\r\nimport { createDb, db } from \"js/db\";\r\nimport * as schema from \"js/schema\";\r\nimport store from \"js/store\";\r\nimport {\r\n  fittersAssignmentTransferProc,\r\n  groupInfoProc,\r\n  orderActivitiesSort,\r\n  templatesConverter,\r\n  localInstallationStepsConfirmDateProc,\r\n  getNonConformityConfig\r\n} from \"js/util\";\r\nimport { normalize } from \"normalizr\";\r\nimport _ from \"lodash\";\r\nimport { getIDPToken } from \"actions\";\r\nimport { formatDateToYMD, taskDataConversion } from \"./util\";\r\n\r\nexport const type = {\r\n  CACHE: 0,\r\n  API: 1,\r\n};\r\n\r\nexport const initDB = () => {\r\n  const state = store.getState();\r\n  const personalNumber = state.auth.personalNumber;\r\n  createDb(personalNumber);\r\n};\r\n\r\nexport const fetchProfile = (param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.getProfile().then((response) => {\r\n      createDb(response.data.personalNumber);\r\n      return db.cache.put({ id: \"auth\", data: response.data }).then(() => {\r\n        return Promise.resolve(response.data);\r\n      });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"auth\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchProfile();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchMasterData = (param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.fetchMasterData().then((response) => {\r\n      const { entities } = normalize(response.data, schema.masterData);\r\n      entities[\"nonConformityConfig\"] = getNonConformityConfig();\r\n      return db.cache.put({ id: \"masterData\", data: entities }).then(() => {\r\n        return Promise.resolve(entities);\r\n      });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"masterData\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchMasterData();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchOrdersData = (param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.fetchOrdersData().then((response) => {\r\n      const data = response.data;\r\n      data.orderActivities = orderActivitiesSort(data.orderActivities);\r\n      const { entities } = normalize(response.data, schema.ordersData);\r\n      return db.cache.put({ id: \"ordersData\", data: entities }).then(() => {\r\n        return Promise.resolve(entities);\r\n      });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"ordersData\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchOrdersData();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nfunction customizer(objValue, srcValue) {\r\n  if (_.isArray(objValue)) {\r\n    return objValue.concat(srcValue);\r\n  }\r\n}\r\n\r\nexport const fetchOrdersDataByProjects = (param = type.API, projects, step) => {\r\n  const auth = store.getState().auth;\r\n\r\n  if (param === type.API) {\r\n    let promises = [];\r\n\r\n    let splitCount = Math.ceil(projects.length / step);\r\n\r\n    for (let i = 0; i < splitCount; i++) {\r\n      let ps = { projectNos: projects.slice(i * step, (i + 1) * step) };\r\n      promises.push(api.fetchOrdersDataByProjects(ps));\r\n    }\r\n\r\n    if (promises.length === 0) {\r\n      // Just get the error message through call api\r\n      const message = auth?.roles[0] === \"SL\" ? \"请到我的->同步界面上，点最右上角的同步按钮同步数据\" : \"未发现该用户的订单信息\";\r\n      return Promise.reject({ message: message });\r\n    }\r\n\r\n    let result = {};\r\n    let fulfilledValues = [];\r\n\r\n    return Promise.allSettled(promises).then((results) => {\r\n      results.forEach((result) => {\r\n        if (result.status === \"fulfilled\") {\r\n          fulfilledValues.push(result.value);\r\n        }\r\n      });\r\n\r\n      if (fulfilledValues.length === 0) {\r\n        const message = auth?.roles[0] === \"SL\" ? \"请到我的->同步界面上，点最右上角的同步按钮同步数据\" : \"未发现该用户的订单信息\";\r\n\r\n        return Promise.reject({ message: message });\r\n      } else {\r\n        for (let i = 0; i < fulfilledValues.length; i++) {\r\n          _.mergeWith(result, fulfilledValues[i].data, customizer);\r\n        }\r\n\r\n        result.orderActivities = orderActivitiesSort(result.orderActivities);\r\n        const { entities } = normalize(result, schema.ordersData);\r\n        return db.cache.put({ id: \"ordersData\", data: entities }).then(() => {\r\n          return Promise.resolve(entities);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"ordersData\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchOrdersDataByProjects(type.API, projects, step);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchTemplatesData = (param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.fetchTemplatesData().then((response) => {\r\n      const data = templatesConverter(response.data);\r\n      return db.cache.put({ id: \"templatesData\", data: data }).then(() => {\r\n        return Promise.resolve(data);\r\n      });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"templatesData\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchTemplatesData();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchGroupInfo = (param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.fetchGroupInfo().then((response) => {\r\n      const data = groupInfoProc(response.data);\r\n      return db.cache.put({ id: \"groupInfo\", data: data }).then(() => {\r\n        return Promise.resolve(data);\r\n      });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"groupInfo\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchGroupInfo();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateOrderActivities = (data) => {\r\n  return db.cache.get(\"ordersData\").then((cache) => {\r\n    if (cache?.data) {\r\n      let { orderActivities } = cache.data;\r\n      orderActivities = { ...orderActivities, ...data.orderActivities };\r\n      const newOrdersData = { ...cache.data };\r\n      newOrdersData.orderActivities = orderActivities;\r\n      return db.cache.put({ id: \"ordersData\", data: newOrdersData });\r\n    } else {\r\n      return Promise.resolve(data);\r\n    }\r\n  });\r\n};\r\n\r\nexport const fetchLocalInstallationStepsConfirmDate = (\r\n  data,\r\n  param = type.API\r\n) => {\r\n  if (param === type.API) {\r\n    let promises = [];\r\n    let projects = data.projectNos;\r\n    let step = 70;\r\n    let splitCount = Math.ceil(projects.length / step);\r\n\r\n    for (let i = 0; i < splitCount; i++) {\r\n      let ps = { projectNos: projects.slice(i * step, (i + 1) * step) };\r\n      promises.push(api.getLocalInstallationStepConfirmDate(ps));\r\n    }\r\n\r\n    if (promises.length === 0) {\r\n      const data = localInstallationStepsConfirmDateProc([]);\r\n      return db.cache\r\n        .put({ id: \"localInstallationStepsConfirmDate\", data: data })\r\n        .then(() => {\r\n          return Promise.resolve(data);\r\n        });\r\n    }\r\n\r\n    return Promise.all(promises).then((response) => {\r\n      let res = [];\r\n      for (let i = 0; i < splitCount; i++) {\r\n        res = res.concat(response[i].data);\r\n      }\r\n      const data = localInstallationStepsConfirmDateProc(res);\r\n      return db.cache\r\n        .put({ id: \"localInstallationStepsConfirmDate\", data: data })\r\n        .then(() => {\r\n          return Promise.resolve(data);\r\n        });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"localInstallationStepsConfirmDate\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchLocalInstallationStepsConfirmDate(data);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateLocalInstallationStepConfirmDate = (data) => {\r\n  return db.cache.get(\"localInstallationStepsConfirmDate\").then((cache) => {\r\n    if (cache?.data) {\r\n      let localInstallationStepsConfirmDates = { ...cache.data };\r\n\r\n      localInstallationStepsConfirmDates[data.orderNo + \"-\" + data.stepNo] =\r\n        data;\r\n\r\n      return db.cache.put({\r\n        id: \"localInstallationStepsConfirmDate\",\r\n        data: localInstallationStepsConfirmDates,\r\n      });\r\n    } else {\r\n      return Promise.resolve(data);\r\n    }\r\n  });\r\n};\r\n\r\nexport const fetchFittersDemand = (param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.fetchFittersDemand().then((response) => {\r\n      const { entities } = normalize(response.data, schema.fittersDemands);\r\n\r\n      return db.cache\r\n        .put({ id: \"fittersDemand\", data: entities.fittersDemand })\r\n        .then(() => {\r\n          return Promise.resolve(entities.fittersDemand);\r\n        });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"fittersDemand\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchFittersDemand();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchFittersCertification = (param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.fetchFittersCertification().then((response) => {\r\n      const { entities } = normalize(\r\n        response.data,\r\n        schema.fittersCertifications\r\n      );\r\n\r\n      return db.cache\r\n        .put({\r\n          id: \"fittersCertification\",\r\n          data: entities.fittersCertification,\r\n        })\r\n        .then(() => {\r\n          return Promise.resolve(entities.fittersCertification);\r\n        });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"fittersCertification\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchFittersCertification();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchFittersAssignmentTransfer = (param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.fetchFittersAssignmentTransfer().then((response) => {\r\n      const fittersAssignmentTransfer = fittersAssignmentTransferProc(\r\n        response.data\r\n      );\r\n\r\n      return db.cache\r\n        .put({\r\n          id: \"fittersAssignmentTransfer\",\r\n          data: fittersAssignmentTransfer,\r\n        })\r\n        .then(() => {\r\n          return Promise.resolve(fittersAssignmentTransfer);\r\n        });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"fittersAssignmentTransfer\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchFittersAssignmentTransfer();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateFittersAssignmentTransfer = (data) => {\r\n  return db.cache.get(\"fittersAssignmentTransfer\").then((cache) => {\r\n    if (cache?.data) {\r\n      let newData = { ...cache.data };\r\n      const extfittersAssignmentTransfer = fittersAssignmentTransferProc(data);\r\n      newData = { ...newData, ...extfittersAssignmentTransfer };\r\n      return db.cache.put({ id: \"fittersAssignmentTransfer\", data: newData });\r\n    } else {\r\n      return Promise.resolve(data);\r\n    }\r\n  });\r\n};\r\n\r\nexport const fetchDocumentList = (request, param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.getDocumentList(request).then((response) => {\r\n      return db.cache\r\n        .put({ id: \"documentList\", data: response.data })\r\n        .then(() => {\r\n          return Promise.resolve(response.data);\r\n        });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"documentList\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchDocumentList(request);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchInstalltionMethodDict = (param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.getInstallationMethodDict().then((response) => {\r\n      return db.cache\r\n        .put({ id: \"InstalltionMethodDict\", data: response.data })\r\n        .then(() => {\r\n          return Promise.resolve(response.data);\r\n        });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"InstalltionMethodDict\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchInstalltionMethodDict();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateDocumentList = (data) => {\r\n  return db.cache.get(\"documentList\").then((cache) => {\r\n    if (cache?.data) {\r\n      const { projectNo, orderNo, activityNo, documentName, modified } = data;\r\n      let newData = { ...cache.data };\r\n\r\n      if (!newData[projectNo]) {\r\n        newData[projectNo] = {};\r\n      }\r\n\r\n      if (!newData[projectNo][orderNo]) {\r\n        newData[projectNo][orderNo] = {};\r\n      }\r\n\r\n      if (!newData[projectNo][orderNo][activityNo]) {\r\n        newData[projectNo][orderNo][activityNo] = [];\r\n      }\r\n\r\n      if (\r\n        newData[projectNo][orderNo][activityNo].some(\r\n          (e) => e.name === documentName\r\n        )\r\n      ) {\r\n        newData[projectNo][orderNo][activityNo].forEach((item) => {\r\n          if (item.name === documentName) {\r\n            item.modified = modified;\r\n          }\r\n        });\r\n      } else {\r\n        newData[projectNo][orderNo][activityNo].push({\r\n          name: documentName,\r\n          modified: modified,\r\n        });\r\n      }\r\n      return db.cache.put({ id: \"documentList\", data: newData });\r\n    } else {\r\n      return Promise.resolve(data);\r\n    }\r\n  });\r\n};\r\n\r\nexport const removeCachedData = () => {\r\n  db.cache.clear();\r\n};\r\n\r\nexport const fetchTasks = (param = type.API) => {\r\n  if (param === type.API) {\r\n    const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n  \r\n    return api\r\n      .fetchIDPTTasks(auth.userName)\r\n      .then((response) => {\r\n        let resp = response.data?.data.map((item) => {\r\n          return taskDataConversion(item)\r\n        });\r\n\r\n        return db.cache\r\n          .put({\r\n            id: \"tasks\",\r\n            data: resp,\r\n          })\r\n          .then(() => {\r\n            return Promise.resolve(resp);\r\n          });\r\n      }).catch((error) => {\r\n        if (error.code === 401 || error.code === 404) {\r\n          getIDPToken()\r\n        }\r\n      });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"tasks\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchTasks();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchInstMethods = (param = type.API) => {\r\n  if (param === type.API) {\r\n    return api.getInstMethods().then((response) => {\r\n      return db.cache\r\n        .put({\r\n          id: \"instMethods\",\r\n          data: response.data,\r\n        })\r\n        .then(() => {\r\n          return Promise.resolve(response.data);\r\n        });\r\n    });\r\n  }\r\n\r\n  if (param === type.CACHE) {\r\n    return db.cache.get(\"instMethods\").then((cache) => {\r\n      if (cache?.data) {\r\n        return Promise.resolve(cache.data);\r\n      } else {\r\n        return fetchTasks();\r\n      }\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}