{"ast":null,"code":"import _objectSpread from\"C:\\\\project\\\\SCF-NI_PM_App\\\\SCF.InstallationQuality\\\\react-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import*as action from\"actions\";import*as api from\"api\";import{db}from\"js/db\";import*as repo from\"js/fetch\";import*as installationStep from\"js/installationStep\";import*as schema from\"js/schema\";import{normalize}from\"normalizr\";export var updateOrderInstallationsMethod=function updateOrderInstallationsMethod(data){return function(dispatch){dispatch(action.showLoading());return api.updateOrderInstallationsMethod(data).then(function(response){var _normalize=normalize(response.data,[schema.orderInstallationMethod]),entities=_normalize.entities;dispatch(action.setEntities(entities));db.cache.get(\"ordersData\").then(function(cache){var selectValue={};selectValue[data.orderNumbers]={orderNumbers:data.orderNumbers[0],installationMethod:Number(data.installationMethod)};var datas=_objectSpread(_objectSpread({},cache.data.orderInstallationMethods),selectValue);db.cache.put({id:\"ordersData\",data:_objectSpread(_objectSpread({},cache.data),{orderInstallationMethods:datas})});});}).catch(function(error){if(error.code===401){window.localStorage.removeItem(\"auth\");dispatch(action.setAuth(null));}dispatch(action.setError(error.message));}).finally(function(){dispatch(action.hideLoading());});};};/* data = {\r\n    \"projectNo\": \"string\",\r\n    \"orderNo\": \"string\",\r\n    \"activityNo\": \"string\",\r\n    \"type\": 1,      // 1  actual date   2  planned date\r\n    \"date\": \"string\",  // don't required or set it to \"\" when unlock or cancel     otherwise set this like \"2020-11-23\" \r\n    \"combinePdf\": true    \r\n  }\r\n*/export var updateOrderActivityStatus=function updateOrderActivityStatus(data){return function(dispatch){dispatch(action.showLoading());return api.updateOrderActivityStatus(data).then(function(response){var _normalize2=normalize(response.data,[schema.orderActivity]),entities=_normalize2.entities;repo.updateOrderActivities(entities).then(function(){var newEntities=installationStep.addActivityStepEditable(entities);newEntities=installationStep.activityStatusSetNineStepsToFourteen(newEntities);dispatch(action.setEntities(newEntities));db.cache.get(\"localInstallationStepsConfirmDate\").then(function(cache){if(cache===null||cache===void 0?void 0:cache.data){dispatch(action.setAllLocalInstallationStepConfirmDate(cache.data));}});});if(data.type===1&&data.combinePdf&&data.date!==\"\"){db.cache.get(\"documentList\").then(function(cache){var V001=[{name:\"\".concat(data.orderNo,\"_\\u5B89\\u88C5\\u68C0\\u67E5\\u6E05\\u5355.pdf\"),modified:new Date().toISOString().substring(0,16)}];cache.data[data.projectNo][data.orderNo][\"V001\"]=V001;db.cache.put({id:\"documentList\",data:cache.data});});}}).catch(function(error){if(error.code===401){window.localStorage.removeItem(\"auth\");dispatch(action.setAuth(null));}dispatch(action.setError(error.message));}).finally(function(){dispatch(action.hideLoading());});};};export var setMethods=function setMethods(data){return{type:\"SET_METHODS\",payload:data};};export var updateLocalInstallationStepConfirmDate=function updateLocalInstallationStepConfirmDate(data){return function(dispatch){dispatch(action.showLoading());return api.updateLocalInstallationStepConfirmDate(data).then(function(response){var data=response.data;if(data.confirmedDate===\"0001-01-01T00:00:00\"){data.confirmedDate=null;}repo.updateLocalInstallationStepConfirmDate(data).then(function(){dispatch(action.setLocalInstallationStepConfirmDate(data));});}).catch(function(error){if(error.code===401){window.localStorage.removeItem(\"auth\");dispatch(action.setAuth(null));}dispatch(action.setError(error.message));}).finally(function(){dispatch(action.hideLoading());});};};export var setLocalInstallationStepConfirmDate=function setLocalInstallationStepConfirmDate(data){return{type:\"SET_LOCAL_INSTALLATION_STEP_CONFIRMDATE\",payload:data};};export var setAllLocalInstallationStepConfirmDate=function setAllLocalInstallationStepConfirmDate(data){return{type:\"SET_ALL_LOCAL_INSTALLATION_STEP_CONFIRMDATE\",payload:data};};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/orders.js"],"names":["action","api","db","repo","installationStep","schema","normalize","updateOrderInstallationsMethod","data","dispatch","showLoading","then","response","orderInstallationMethod","entities","setEntities","cache","get","selectValue","orderNumbers","installationMethod","Number","datas","orderInstallationMethods","put","id","catch","error","code","window","localStorage","removeItem","setAuth","setError","message","finally","hideLoading","updateOrderActivityStatus","orderActivity","updateOrderActivities","newEntities","addActivityStepEditable","activityStatusSetNineStepsToFourteen","setAllLocalInstallationStepConfirmDate","type","combinePdf","date","V001","name","orderNo","modified","Date","toISOString","substring","projectNo","setMethods","payload","updateLocalInstallationStepConfirmDate","confirmedDate","setLocalInstallationStepConfirmDate"],"mappings":"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","sourcesContent":["import * as action from \"actions\";\r\nimport * as api from \"api\";\r\nimport { db } from \"js/db\";\r\nimport * as repo from \"js/fetch\";\r\nimport * as installationStep from \"js/installationStep\";\r\nimport * as schema from \"js/schema\";\r\nimport { normalize } from \"normalizr\";\r\n\r\nexport const updateOrderInstallationsMethod = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .updateOrderInstallationsMethod(data)\r\n    .then((response) => {\r\n      const { entities } = normalize(response.data, [\r\n        schema.orderInstallationMethod,\r\n      ]);\r\n      dispatch(action.setEntities(entities));\r\n\r\n      db.cache.get(\"ordersData\").then((cache) => {\r\n        const selectValue = {};\r\n        selectValue[data.orderNumbers] = {\r\n          orderNumbers: data.orderNumbers[0],\r\n          installationMethod: Number(data.installationMethod),\r\n        };\r\n        const datas = {\r\n          ...cache.data.orderInstallationMethods,\r\n          ...selectValue,\r\n        };\r\n        db.cache.put({\r\n          id: \"ordersData\",\r\n          data: { ...cache.data, ...{ orderInstallationMethods: datas } },\r\n        });\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        window.localStorage.removeItem(\"auth\");\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\n/* data = {\r\n    \"projectNo\": \"string\",\r\n    \"orderNo\": \"string\",\r\n    \"activityNo\": \"string\",\r\n    \"type\": 1,      // 1  actual date   2  planned date\r\n    \"date\": \"string\",  // don't required or set it to \"\" when unlock or cancel     otherwise set this like \"2020-11-23\" \r\n    \"combinePdf\": true    \r\n  }\r\n*/\r\nexport const updateOrderActivityStatus = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .updateOrderActivityStatus(data)\r\n    .then((response) => {\r\n      const { entities } = normalize(response.data, [schema.orderActivity]);\r\n\r\n      repo.updateOrderActivities(entities).then(() => {\r\n        let newEntities = installationStep.addActivityStepEditable(entities);\r\n        newEntities = installationStep.activityStatusSetNineStepsToFourteen(\r\n          newEntities\r\n        );\r\n        dispatch(action.setEntities(newEntities));\r\n        db.cache.get(\"localInstallationStepsConfirmDate\").then((cache) => {\r\n          if (cache?.data) {\r\n            dispatch(action.setAllLocalInstallationStepConfirmDate(cache.data));\r\n          }\r\n        });\r\n      });\r\n\r\n      if (data.type === 1 && data.combinePdf && data.date !== \"\") {\r\n        db.cache.get(\"documentList\").then((cache) => {\r\n          let V001 = [{ name: `${data.orderNo}_安装检查清单.pdf`, modified: new Date().toISOString().substring(0, 16) }];\r\n          cache.data[data.projectNo][data.orderNo][\"V001\"] = V001\r\n          db.cache.put({ id: \"documentList\", data: cache.data })\r\n        });\r\n      }\r\n\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        window.localStorage.removeItem(\"auth\");\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\nexport const setMethods = (data) => ({\r\n  type: \"SET_METHODS\",\r\n  payload: data,\r\n});\r\n\r\nexport const updateLocalInstallationStepConfirmDate = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .updateLocalInstallationStepConfirmDate(data)\r\n    .then((response) => {\r\n      const data = response.data;\r\n      if (data.confirmedDate === \"0001-01-01T00:00:00\") {\r\n        data.confirmedDate = null;\r\n      }\r\n\r\n      repo.updateLocalInstallationStepConfirmDate(data).then(() => {\r\n        dispatch(action.setLocalInstallationStepConfirmDate(data));\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        window.localStorage.removeItem(\"auth\");\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\nexport const setLocalInstallationStepConfirmDate = (data) => ({\r\n  type: \"SET_LOCAL_INSTALLATION_STEP_CONFIRMDATE\",\r\n  payload: data,\r\n});\r\n\r\nexport const setAllLocalInstallationStepConfirmDate = (data) => ({\r\n  type: \"SET_ALL_LOCAL_INSTALLATION_STEP_CONFIRMDATE\",\r\n  payload: data,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}