{"ast":null,"code":"import List from\"@material-ui/core/List\";import OrderListItem from\"components/OrderListItem\";import*as util from\"js/util\";import React from\"react\";import{connect}from\"react-redux\";var OrderList=function OrderList(_ref){var orderActivities=_ref.orderActivities,pendingList=_ref.pendingList;return/*#__PURE__*/React.createElement(List,{style:{position:\"absolute\",backgroundColor:\"#f3f3f3\",height:\"calc(100%- 173px)\",width:\"100%\",overflow:\"hidden auto\"}},orderActivities.map(function(item){return/*#__PURE__*/React.createElement(OrderListItem,{key:item,number:item,pendingList:pendingList});}));};var mapStateToProps=function mapStateToProps(state,ownProps){var orderActivities=state.orderActivities,overdueActivities=state.overdueActivities,timeHorizon=state.timeHorizon;var activityNumber=ownProps.activityNumber,activityStatus=ownProps.activityStatus;var today=new Date().setHours(0,0,0,0);var overdueList=[];var pendingList=[];var confirmList=[];var currentActivityOverdueList=[];var sortOrderActivitiesList=function sortOrderActivitiesList(list){var sortDate={};list.forEach(function(key){sortDate[key]=orderActivities[key].leadingDate?orderActivities[key].leadingDate:orderActivities[key].leadingEndDate;});return list.sort(function(a,b){return sortDate[a]?sortDate[a]>sortDate[b]?1:-1:1;});};Object.keys(orderActivities).forEach(function(key){if(orderActivities[key].activityNumber===activityNumber&&util.timeHorizonFilter(orderActivities[key].leadingDate?orderActivities[key].leadingDate:orderActivities[key].leadingStartDate&&orderActivities[key].leadingEndDate?orderActivities[key].leadingEndDate:null,today,timeHorizon)){if(activityStatus===\"open\"){var _overdueActivities$ac;if((_overdueActivities$ac=overdueActivities[activityNumber])===null||_overdueActivities$ac===void 0?void 0:_overdueActivities$ac.includes(key)){overdueList.push(key);overdueList=sortOrderActivitiesList(overdueList);}else if(!orderActivities[key].confirmedDate){pendingList.push(key);pendingList=sortOrderActivitiesList(pendingList);}}else if(activityStatus===\"confirmed\"){var _overdueActivities$ac2;if(!((_overdueActivities$ac2=overdueActivities[activityNumber])===null||_overdueActivities$ac2===void 0?void 0:_overdueActivities$ac2.includes(key))&&orderActivities[key].confirmedDate){confirmList.push(key);confirmList=sortOrderActivitiesList(confirmList);}}else{var _overdueActivities$ac3;if((_overdueActivities$ac3=overdueActivities[activityNumber])===null||_overdueActivities$ac3===void 0?void 0:_overdueActivities$ac3.includes(key)){overdueList.push(key);overdueList=sortOrderActivitiesList(overdueList);}else if(orderActivities[key].confirmedDate){confirmList.push(key);confirmList=sortOrderActivitiesList(confirmList);}else{pendingList.push(key);pendingList=sortOrderActivitiesList(pendingList);}}}});currentActivityOverdueList=overdueList.concat(pendingList,confirmList);return{orderActivities:currentActivityOverdueList,pendingList:pendingList};};export default connect(mapStateToProps)(OrderList);","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/components/OrderList/index.js"],"names":["List","OrderListItem","util","React","connect","OrderList","orderActivities","pendingList","position","backgroundColor","height","width","overflow","map","item","mapStateToProps","state","ownProps","overdueActivities","timeHorizon","activityNumber","activityStatus","today","Date","setHours","overdueList","confirmList","currentActivityOverdueList","sortOrderActivitiesList","list","sortDate","forEach","key","leadingDate","leadingEndDate","sort","a","b","Object","keys","timeHorizonFilter","leadingStartDate","includes","push","confirmedDate","concat"],"mappings":"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","sourcesContent":["import List from \"@material-ui/core/List\";\r\nimport OrderListItem from \"components/OrderListItem\";\r\nimport * as util from \"js/util\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst OrderList = ({ orderActivities, pendingList }) => {\r\n  return (\r\n    <List\r\n      style={{\r\n        position: \"absolute\",\r\n        backgroundColor: \"#f3f3f3\",\r\n        height: `calc(100%- 173px)`,\r\n        width: \"100%\",\r\n        overflow: \"hidden auto\",\r\n      }}\r\n    >\r\n      {orderActivities.map((item) => {\r\n        return (\r\n          <OrderListItem key={item} number={item} pendingList={pendingList} />\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const { orderActivities, overdueActivities, timeHorizon } = state;\r\n  const { activityNumber, activityStatus } = ownProps;\r\n  const today = new Date().setHours(0, 0, 0, 0);\r\n\r\n  let overdueList = [];\r\n  let pendingList = [];\r\n  let confirmList = [];\r\n  let currentActivityOverdueList = [];\r\n\r\n  const sortOrderActivitiesList = (list) => {\r\n    const sortDate = {};\r\n    list.forEach((key) => {\r\n      sortDate[key] = orderActivities[key].leadingDate\r\n        ? orderActivities[key].leadingDate\r\n        : orderActivities[key].leadingEndDate;\r\n    });\r\n\r\n    return list.sort((a, b) =>\r\n      sortDate[a] ? (sortDate[a] > sortDate[b] ? 1 : -1) : 1\r\n    );\r\n  };\r\n\r\n  Object.keys(orderActivities).forEach((key) => {\r\n    if (\r\n      orderActivities[key].activityNumber === activityNumber &&\r\n      util.timeHorizonFilter(\r\n        orderActivities[key].leadingDate\r\n          ? orderActivities[key].leadingDate\r\n          : orderActivities[key].leadingStartDate &&\r\n            orderActivities[key].leadingEndDate\r\n          ? orderActivities[key].leadingEndDate\r\n          : null,\r\n        today,\r\n        timeHorizon\r\n      )\r\n    ) {\r\n      if (activityStatus === \"open\") {\r\n        if (overdueActivities[activityNumber]?.includes(key)) {\r\n          overdueList.push(key);\r\n          overdueList = sortOrderActivitiesList(overdueList);\r\n        } else if (!orderActivities[key].confirmedDate) {\r\n          pendingList.push(key);\r\n          pendingList = sortOrderActivitiesList(pendingList);\r\n        }\r\n      } else if (activityStatus === \"confirmed\") {\r\n        if (\r\n          !overdueActivities[activityNumber]?.includes(key) &&\r\n          orderActivities[key].confirmedDate\r\n        ) {\r\n          confirmList.push(key);\r\n          confirmList = sortOrderActivitiesList(confirmList);\r\n        }\r\n      } else {\r\n        if (overdueActivities[activityNumber]?.includes(key)) {\r\n          overdueList.push(key);\r\n          overdueList = sortOrderActivitiesList(overdueList);\r\n        } else if (orderActivities[key].confirmedDate) {\r\n          confirmList.push(key);\r\n          confirmList = sortOrderActivitiesList(confirmList);\r\n        } else {\r\n          pendingList.push(key);\r\n          pendingList = sortOrderActivitiesList(pendingList);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  currentActivityOverdueList = overdueList.concat(pendingList, confirmList);\r\n\r\n  return {\r\n    orderActivities: currentActivityOverdueList,\r\n    pendingList: pendingList,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(OrderList);\r\n"]},"metadata":{},"sourceType":"module"}