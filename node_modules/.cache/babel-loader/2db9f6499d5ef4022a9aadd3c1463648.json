{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nimport { appendChild, appendQuestionBlock, hasChildNode, getChildNode, getRequiredAttr, readQuestionBlock, getAttrWithDefault } from \"./utils/xml\";\nexport default {\n  serialize(doc, findField, parentNode, field) {\n    const {\n      formula\n    } = field.settings;\n    const questionBlock = appendQuestionBlock(doc, findField, parentNode, \"decimal\", field);\n    appendChild(doc, questionBlock, \"calculation\", null, {\n      formula: formula || \"0\"\n    });\n  },\n\n  canDeserialize(node) {\n    return node.nodeName === \"question_block\" && hasChildNode(node, \"calculation\");\n  },\n\n  deserialize(node) {\n    let field = readQuestionBlock(node, \"calculation\", \"decimal\"); // eslint-disable-line prefer-const\n\n    const calculationNode = getChildNode(node, \"calculation\");\n    field.settings.formula = getRequiredAttr(calculationNode, \"formula\");\n    const value = parseFloat(getAttrWithDefault(node, \"value\", \"\"));\n\n    if (!Number.isNaN(value)) {\n      field.settings.value = value;\n    }\n\n    return field;\n  }\n\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/CalculationIO.js"],"names":["appendChild","appendQuestionBlock","hasChildNode","getChildNode","getRequiredAttr","readQuestionBlock","getAttrWithDefault","serialize","doc","findField","parentNode","field","formula","settings","questionBlock","canDeserialize","node","nodeName","deserialize","calculationNode","value","parseFloat","Number","isNaN"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACEA,WADF,EAEEC,mBAFF,EAGEC,YAHF,EAIEC,YAJF,EAKEC,eALF,EAMEC,iBANF,EAOEC,kBAPF,QAQO,aARP;AAUA,eAAe;AACbC,EAAAA,SAAS,CAACC,GAAD,EAAMC,SAAN,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoC;AAC3C,UAAM;AAAEC,MAAAA;AAAF,QAAcD,KAAK,CAACE,QAA1B;AAEA,UAAMC,aAAa,GAAGb,mBAAmB,CACvCO,GADuC,EAEvCC,SAFuC,EAGvCC,UAHuC,EAIvC,SAJuC,EAKvCC,KALuC,CAAzC;AAOAX,IAAAA,WAAW,CAACQ,GAAD,EAAMM,aAAN,EAAqB,aAArB,EAAoC,IAApC,EAA0C;AACnDF,MAAAA,OAAO,EAAEA,OAAO,IAAI;AAD+B,KAA1C,CAAX;AAGD,GAdY;;AAgBbG,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,WACEA,IAAI,CAACC,QAAL,KAAkB,gBAAlB,IAAsCf,YAAY,CAACc,IAAD,EAAO,aAAP,CADpD;AAGD,GApBY;;AAsBbE,EAAAA,WAAW,CAACF,IAAD,EAAO;AAChB,QAAIL,KAAK,GAAGN,iBAAiB,CAACW,IAAD,EAAO,aAAP,EAAsB,SAAtB,CAA7B,CADgB,CAC+C;;AAE/D,UAAMG,eAAe,GAAGhB,YAAY,CAACa,IAAD,EAAO,aAAP,CAApC;AACAL,IAAAA,KAAK,CAACE,QAAN,CAAeD,OAAf,GAAyBR,eAAe,CAACe,eAAD,EAAkB,SAAlB,CAAxC;AAEA,UAAMC,KAAK,GAAGC,UAAU,CAACf,kBAAkB,CAACU,IAAD,EAAO,OAAP,EAAgB,EAAhB,CAAnB,CAAxB;;AACA,QAAI,CAACM,MAAM,CAACC,KAAP,CAAaH,KAAb,CAAL,EAA0B;AACxBT,MAAAA,KAAK,CAACE,QAAN,CAAeO,KAAf,GAAuBA,KAAvB;AACD;;AAED,WAAOT,KAAP;AACD;;AAlCY,CAAf","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport {\r\n  appendChild,\r\n  appendQuestionBlock,\r\n  hasChildNode,\r\n  getChildNode,\r\n  getRequiredAttr,\r\n  readQuestionBlock,\r\n  getAttrWithDefault,\r\n} from \"./utils/xml\";\r\n\r\nexport default {\r\n  serialize(doc, findField, parentNode, field) {\r\n    const { formula } = field.settings;\r\n\r\n    const questionBlock = appendQuestionBlock(\r\n      doc,\r\n      findField,\r\n      parentNode,\r\n      \"decimal\",\r\n      field\r\n    );\r\n    appendChild(doc, questionBlock, \"calculation\", null, {\r\n      formula: formula || \"0\",\r\n    });\r\n  },\r\n\r\n  canDeserialize(node) {\r\n    return (\r\n      node.nodeName === \"question_block\" && hasChildNode(node, \"calculation\")\r\n    );\r\n  },\r\n\r\n  deserialize(node) {\r\n    let field = readQuestionBlock(node, \"calculation\", \"decimal\"); // eslint-disable-line prefer-const\r\n\r\n    const calculationNode = getChildNode(node, \"calculation\");\r\n    field.settings.formula = getRequiredAttr(calculationNode, \"formula\");\r\n\r\n    const value = parseFloat(getAttrWithDefault(node, \"value\", \"\"));\r\n    if (!Number.isNaN(value)) {\r\n      field.settings.value = value;\r\n    }\r\n\r\n    return field;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}