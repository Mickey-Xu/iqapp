{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nimport forge from \"node-forge\";\nconst KEY = forge.util.hexToBytes(\"C8DF55A9BAE39437C383A64B3D0FCBF2BFEDF599C0F4F246128503D0D13370A5\");\nconst IV = forge.util.hexToBytes(\"7DE549A796BFF62AC8E1FB716C57DF46\");\nexport function encrypt(cleartext) {\n  const cipher = forge.cipher.createCipher(\"AES-CBC\", KEY);\n  cipher.start({\n    iv: IV\n  });\n  cipher.update(forge.util.createBuffer(cleartext));\n  cipher.finish();\n  return forge.util.encode64(cipher.output.getBytes());\n}\nexport function decrypt(encrypted64) {\n  const encrypted = forge.util.decode64(encrypted64);\n  const decipher = forge.cipher.createDecipher(\"AES-CBC\", KEY);\n  decipher.start({\n    iv: IV\n  });\n  decipher.update(forge.util.createBuffer(encrypted));\n  decipher.finish();\n  return decipher.output.data;\n}","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/utils/crypto.js"],"names":["forge","KEY","util","hexToBytes","IV","encrypt","cleartext","cipher","createCipher","start","iv","update","createBuffer","finish","encode64","output","getBytes","decrypt","encrypted64","encrypted","decode64","decipher","createDecipher","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,MAAMC,GAAG,GAAGD,KAAK,CAACE,IAAN,CAAWC,UAAX,CACV,kEADU,CAAZ;AAGA,MAAMC,EAAE,GAAGJ,KAAK,CAACE,IAAN,CAAWC,UAAX,CAAsB,kCAAtB,CAAX;AAEA,OAAO,SAASE,OAAT,CAAiBC,SAAjB,EAA4B;AACjC,QAAMC,MAAM,GAAGP,KAAK,CAACO,MAAN,CAAaC,YAAb,CAA0B,SAA1B,EAAqCP,GAArC,CAAf;AACAM,EAAAA,MAAM,CAACE,KAAP,CAAa;AAAEC,IAAAA,EAAE,EAAEN;AAAN,GAAb;AACAG,EAAAA,MAAM,CAACI,MAAP,CAAcX,KAAK,CAACE,IAAN,CAAWU,YAAX,CAAwBN,SAAxB,CAAd;AACAC,EAAAA,MAAM,CAACM,MAAP;AAEA,SAAOb,KAAK,CAACE,IAAN,CAAWY,QAAX,CAAoBP,MAAM,CAACQ,MAAP,CAAcC,QAAd,EAApB,CAAP;AACD;AAED,OAAO,SAASC,OAAT,CAAiBC,WAAjB,EAA8B;AACnC,QAAMC,SAAS,GAAGnB,KAAK,CAACE,IAAN,CAAWkB,QAAX,CAAoBF,WAApB,CAAlB;AAEA,QAAMG,QAAQ,GAAGrB,KAAK,CAACO,MAAN,CAAae,cAAb,CAA4B,SAA5B,EAAuCrB,GAAvC,CAAjB;AACAoB,EAAAA,QAAQ,CAACZ,KAAT,CAAe;AAAEC,IAAAA,EAAE,EAAEN;AAAN,GAAf;AACAiB,EAAAA,QAAQ,CAACV,MAAT,CAAgBX,KAAK,CAACE,IAAN,CAAWU,YAAX,CAAwBO,SAAxB,CAAhB;AACAE,EAAAA,QAAQ,CAACR,MAAT;AAEA,SAAOQ,QAAQ,CAACN,MAAT,CAAgBQ,IAAvB;AACD","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport forge from \"node-forge\";\r\n\r\nconst KEY = forge.util.hexToBytes(\r\n  \"C8DF55A9BAE39437C383A64B3D0FCBF2BFEDF599C0F4F246128503D0D13370A5\"\r\n);\r\nconst IV = forge.util.hexToBytes(\"7DE549A796BFF62AC8E1FB716C57DF46\");\r\n\r\nexport function encrypt(cleartext) {\r\n  const cipher = forge.cipher.createCipher(\"AES-CBC\", KEY);\r\n  cipher.start({ iv: IV });\r\n  cipher.update(forge.util.createBuffer(cleartext));\r\n  cipher.finish();\r\n\r\n  return forge.util.encode64(cipher.output.getBytes());\r\n}\r\n\r\nexport function decrypt(encrypted64) {\r\n  const encrypted = forge.util.decode64(encrypted64);\r\n\r\n  const decipher = forge.cipher.createDecipher(\"AES-CBC\", KEY);\r\n  decipher.start({ iv: IV });\r\n  decipher.update(forge.util.createBuffer(encrypted));\r\n  decipher.finish();\r\n\r\n  return decipher.output.data;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}