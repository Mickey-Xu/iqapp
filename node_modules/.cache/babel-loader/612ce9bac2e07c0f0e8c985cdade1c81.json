{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\SCF-NI_PM_App\\\\SCF.InstallationQuality\\\\react-client\\\\src\\\\pages\\\\TaskListPage\\\\index.js\";\nimport { Box } from \"@material-ui/core\";\nimport FFTab from \"components/FFTab\";\nimport TaskListItem from \"components/TaskListItem\";\nimport { LocalizeContext } from \"i18n\";\nimport { toDoOrDone } from \"js/util\";\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport * as action from \"actions\";\nimport * as util from \"js/util\";\nimport { finishOrCloseCheck } from \"js/util\";\n\nconst Tasks = ({\n  type,\n  tasksData,\n  getTaskCount,\n  submit,\n  orders,\n  orderActivities,\n  templates\n}) => {\n  const i18n = React.useContext(LocalizeContext);\n  const [status, setStatus] = React.useState(\"open\");\n  const params = useParams();\n  const awaitStart = getTaskCount(tasksData, 'awaitStart');\n  const awaitComplate = getTaskCount(tasksData, 'awaitComplate');\n  const awaitClose = getTaskCount(tasksData, 'awaitClose');\n  const tabs = [{\n    title: i18n.ISNTAPP_TO_COMPLETE,\n    value: \"open\"\n  }, {\n    title: i18n.ISNTAPP_TO_CLOSE,\n    value: \"pending\"\n  }, {\n    title: i18n.ISNTAPP_CLOSED,\n    value: \"close\"\n  }];\n  let currentStatusTasks = [];\n\n  if (status === \"open\") {\n    tasksData.forEach(item => {\n      if (item.status === \"awaitComplate\" || item.status === \"awaitStart\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  if (status === \"pending\") {\n    tasksData.forEach(item => {\n      if (item.status === \"awaitClose\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  if (status === \"close\") {\n    tasksData.forEach(item => {\n      if (item.status === \"closed\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  console.log(status);\n  return /*#__PURE__*/React.createElement(PrimaryLayout, {\n    name: \"tasks\",\n    title: (i18n === null || i18n === void 0 ? void 0 : i18n[params.type]) ? i18n === null || i18n === void 0 ? void 0 : i18n[params.type] : params.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    style: {\n      position: \"fixed\",\n      top: \"52px\",\n      width: \"100%\",\n      zIndex: \"10000\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FFTab, {\n    tabs: tabs,\n    selectedTabValue: \"open\",\n    onTabChange: value => setStatus(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"22%\",\n      padding: \"2px 8px\",\n      backgroundColor: \"red\",\n      borderRadius: \"40px\",\n      color: \"white\",\n      display: awaitComplate + awaitStart > 0 ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, awaitComplate + awaitStart), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"55%\",\n      padding: \"2px 8px\",\n      backgroundColor: \"red\",\n      borderRadius: \"40px\",\n      color: \"white\",\n      display: awaitClose > 0 ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, awaitClose)), /*#__PURE__*/React.createElement(Box, {\n    style: {\n      width: \"100%\",\n      padding: \"16px\",\n      position: \"absolute\",\n      top: \"32px\",\n      height: window.screen.height - 157 + \"px\",\n      overflow: \"hidden auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TaskListItem, {\n    data: currentStatusTasks,\n    status: status,\n    type: type,\n    submit: (type, data) => {\n      const activityParams = util.setActivityStatusParams(data.projectNo, data.orderNo, data.activityNo, util.formatDateToYMD(new Date()), 1, orderActivities, orders);\n\n      if (type === \"start\") {\n        submit(type, data, activityParams);\n      } else {\n        finishOrCloseCheck(type, orderActivities, data, templates, orders, submit, activityParams);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    match\n  } = ownProps;\n  const {\n    params\n  } = match;\n  const {\n    type\n  } = params;\n  const {\n    tasks,\n    orders,\n    templates,\n    documentList,\n    orderActivities,\n    settings: {\n      defaultTab\n    }\n  } = state;\n  let data = Object.keys(tasks).length > 0 ? tasks : [];\n  let taskList = data.filter(item => item.taskType === type);\n  taskList.forEach(item => {\n    var _orders$item$orderNo, _orders$item$orderNo2;\n\n    item['productFamily'] = (_orders$item$orderNo = orders[item === null || item === void 0 ? void 0 : item.orderNo]) === null || _orders$item$orderNo === void 0 ? void 0 : _orders$item$orderNo.productFamily;\n    item['documentStatus'] = toDoOrDone((_orders$item$orderNo2 = orders[item === null || item === void 0 ? void 0 : item.orderNo]) === null || _orders$item$orderNo2 === void 0 ? void 0 : _orders$item$orderNo2.projectNumber, item.orderNo, item.activityNo, templates, documentList);\n  });\n  return {\n    type,\n    tasksData: taskList,\n    orders,\n    orderActivities,\n    templates,\n    defaultTab\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (type, data, activityParams) => {\n      dispatch(action.processingTasks(type, data, activityParams, dispatch));\n    },\n    getTaskCount: (task, status) => {\n      let count = task.filter(item => item.status === status).length;\n      return count;\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/pages/TaskListPage/index.js"],"names":["Box","FFTab","TaskListItem","LocalizeContext","toDoOrDone","PrimaryLayout","React","connect","useParams","action","util","finishOrCloseCheck","Tasks","type","tasksData","getTaskCount","submit","orders","orderActivities","templates","i18n","useContext","status","setStatus","useState","params","awaitStart","awaitComplate","awaitClose","tabs","title","ISNTAPP_TO_COMPLETE","value","ISNTAPP_TO_CLOSE","ISNTAPP_CLOSED","currentStatusTasks","forEach","item","push","console","log","position","top","width","zIndex","left","padding","backgroundColor","borderRadius","color","display","height","window","screen","overflow","data","activityParams","setActivityStatusParams","projectNo","orderNo","activityNo","formatDateToYMD","Date","mapStateToProps","state","ownProps","match","tasks","documentList","settings","defaultTab","Object","keys","length","taskList","filter","taskType","productFamily","projectNumber","mapDispatchToProps","dispatch","processingTasks","task","count"],"mappings":"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","sourcesContent":["import { Box } from \"@material-ui/core\";\r\nimport FFTab from \"components/FFTab\";\r\nimport TaskListItem from \"components/TaskListItem\";\r\nimport { LocalizeContext } from \"i18n\";\r\nimport { toDoOrDone } from \"js/util\";\r\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as action from \"actions\";\r\nimport * as util from \"js/util\";\r\nimport { finishOrCloseCheck } from \"js/util\";\r\n\r\nconst Tasks = ({ type, tasksData, getTaskCount, submit, orders, orderActivities, templates }) => {\r\n  const i18n = React.useContext(LocalizeContext);\r\n  const [status, setStatus] = React.useState(\"open\");\r\n  const params = useParams()\r\n  const awaitStart = getTaskCount(tasksData, 'awaitStart');\r\n  const awaitComplate = getTaskCount(tasksData,'awaitComplate');\r\n  const awaitClose = getTaskCount(tasksData, 'awaitClose');\r\n  const tabs = [\r\n    { title: i18n.ISNTAPP_TO_COMPLETE, value: \"open\" },\r\n    { title: i18n.ISNTAPP_TO_CLOSE, value: \"pending\" },\r\n    { title: i18n.ISNTAPP_CLOSED, value: \"close\" },\r\n  ];\r\n\r\n  let currentStatusTasks = [];\r\n\r\n  if (status === \"open\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.status === \"awaitComplate\" || item.status === \"awaitStart\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (status === \"pending\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.status === \"awaitClose\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (status === \"close\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.status === \"closed\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n  console.log(status)\r\n  return (\r\n    <PrimaryLayout name=\"tasks\" title={i18n?.[params.type] ? i18n?.[params.type] : params.type}>\r\n      <Box\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"52px\",\r\n          width: \"100%\",\r\n          zIndex: \"10000\",\r\n        }}\r\n      >\r\n        <FFTab\r\n          tabs={tabs}\r\n          selectedTabValue={\"open\"}\r\n          onTabChange={(value) => setStatus(value)}\r\n        />\r\n        <span\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"0\",\r\n            left: \"22%\",\r\n            padding: \"2px 8px\",\r\n            backgroundColor: \"red\",\r\n            borderRadius: \"40px\",\r\n            color: \"white\",\r\n            display: (awaitComplate + awaitStart) >0?'block':'none'\r\n          }}\r\n        >\r\n          {awaitComplate + awaitStart}\r\n        </span>\r\n            <span\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"0\",\r\n                left: \"55%\",\r\n                padding: \"2px 8px\",\r\n                backgroundColor: \"red\",\r\n                borderRadius: \"40px\",\r\n                color: \"white\",\r\n                display: awaitClose > 0 ? 'block' : 'none'\r\n              }}\r\n            >\r\n          {awaitClose}\r\n        </span>\r\n      </Box>\r\n\r\n      <Box\r\n        style={{\r\n          width: \"100%\",\r\n          padding: \"16px\",\r\n          position: \"absolute\",\r\n          top: \"32px\",\r\n          height: window.screen.height - 157 + \"px\",\r\n          overflow: \"hidden auto\",\r\n        }}\r\n      >\r\n        <TaskListItem\r\n          data={currentStatusTasks}\r\n          status={status}\r\n          type={type}\r\n          submit={(type, data) => { \r\n            const activityParams = util.setActivityStatusParams(\r\n              data.projectNo,\r\n              data.orderNo,\r\n              data.activityNo,\r\n              util.formatDateToYMD(new Date()),\r\n              1,\r\n              orderActivities,\r\n              orders\r\n            );\r\n            if (type === \"start\") {\r\n              submit(type, data, activityParams)\r\n            } else {\r\n              finishOrCloseCheck(type, orderActivities, data, templates, orders, submit, activityParams)\r\n        \r\n            }\r\n        \r\n          }}\r\n        ></TaskListItem>\r\n      </Box>\r\n    </PrimaryLayout>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const { match } = ownProps;\r\n  const { params } = match;\r\n  const { type } = params;\r\n  const { tasks, orders, templates, documentList, orderActivities, settings: { defaultTab } } = state;\r\n  let data = Object.keys(tasks).length > 0 ? tasks : [];\r\n  let taskList = data.filter((item) => item.taskType === type);\r\n\r\n  taskList.forEach((item) =>\r\n  {\r\n    item['productFamily'] = orders[item?.orderNo]?.productFamily;\r\n    item['documentStatus'] = toDoOrDone(\r\n      orders[item?.orderNo]?.projectNumber,\r\n      item.orderNo,\r\n      item.activityNo,\r\n      templates,\r\n      documentList\r\n      );\r\n    }\r\n  )\r\n\r\n  return {\r\n    type,\r\n    tasksData: taskList,\r\n    orders,\r\n    orderActivities,\r\n    templates,\r\n    defaultTab\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    submit: (type, data, activityParams) => {\r\n      dispatch(action.processingTasks(type, data,activityParams,dispatch))\r\n    },\r\n    getTaskCount: (task, status) => {\r\n      let count = task.filter((item) => item.status === status).length\r\n      return count\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);\r\n"]},"metadata":{},"sourceType":"module"}