{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nimport { appendChild, appendQuestionBlock, hasChildNode, getChildNode, getRequiredAttr, readQuestionBlock, getAttrWithDefault } from \"./utils/xml\";\nexport default {\n  serialize(doc, findField, parentNode, field) {\n    // const { settings } = field;\n    // const { prefilledAnswer } = settings;\n    const questionBlock = appendQuestionBlock(doc, findField, parentNode, \"string\", field); // appendChild(doc, questionBlock, \"textarea\", null, {\n    //   \"prefilled-answer\": prefilledAnswer,\n    // });\n\n    appendChild(doc, questionBlock, \"textarea\", field.settings.value);\n  },\n\n  canDeserialize(node) {\n    return node.nodeName === \"question_block\" && hasChildNode(node, \"textarea\");\n  },\n\n  deserialize(node) {\n    let field = readQuestionBlock(node, \"paragraph\", \"string\"); // eslint-disable-line prefer-const\n\n    field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\n    const textAreaNode = getChildNode(node, \"textarea\");\n    field.settings.text = textAreaNode.textContent;\n    field.settings.prefilledAnswer = getAttrWithDefault(textAreaNode, \"prefilled-answer\", \"\");\n    field.settings.value = textAreaNode.textContent;\n    return field;\n  }\n\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/ParagraphTextIO.js"],"names":["appendChild","appendQuestionBlock","hasChildNode","getChildNode","getRequiredAttr","readQuestionBlock","getAttrWithDefault","serialize","doc","findField","parentNode","field","questionBlock","settings","value","canDeserialize","node","nodeName","deserialize","required","textAreaNode","text","textContent","prefilledAnswer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACEA,WADF,EAEEC,mBAFF,EAGEC,YAHF,EAIEC,YAJF,EAKEC,eALF,EAMEC,iBANF,EAOEC,kBAPF,QAQO,aARP;AAUA,eAAe;AACbC,EAAAA,SAAS,CAACC,GAAD,EAAMC,SAAN,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoC;AAC3C;AACA;AAEA,UAAMC,aAAa,GAAGX,mBAAmB,CACvCO,GADuC,EAEvCC,SAFuC,EAGvCC,UAHuC,EAIvC,QAJuC,EAKvCC,KALuC,CAAzC,CAJ2C,CAW3C;AACA;AACA;;AAEAX,IAAAA,WAAW,CAACQ,GAAD,EAAMI,aAAN,EAAqB,UAArB,EAAiCD,KAAK,CAACE,QAAN,CAAeC,KAAhD,CAAX;AACD,GAjBY;;AAmBbC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,WAAOA,IAAI,CAACC,QAAL,KAAkB,gBAAlB,IAAsCf,YAAY,CAACc,IAAD,EAAO,UAAP,CAAzD;AACD,GArBY;;AAuBbE,EAAAA,WAAW,CAACF,IAAD,EAAO;AAChB,QAAIL,KAAK,GAAGN,iBAAiB,CAACW,IAAD,EAAO,WAAP,EAAoB,QAApB,CAA7B,CADgB,CAC4C;;AAC5DL,IAAAA,KAAK,CAACE,QAAN,CAAeM,QAAf,GAA0Bf,eAAe,CAACY,IAAD,EAAO,UAAP,CAAf,KAAsC,MAAhE;AAEA,UAAMI,YAAY,GAAGjB,YAAY,CAACa,IAAD,EAAO,UAAP,CAAjC;AACAL,IAAAA,KAAK,CAACE,QAAN,CAAeQ,IAAf,GAAsBD,YAAY,CAACE,WAAnC;AACAX,IAAAA,KAAK,CAACE,QAAN,CAAeU,eAAf,GAAiCjB,kBAAkB,CACjDc,YADiD,EAEjD,kBAFiD,EAGjD,EAHiD,CAAnD;AAMAT,IAAAA,KAAK,CAACE,QAAN,CAAeC,KAAf,GAAuBM,YAAY,CAACE,WAApC;AAEA,WAAOX,KAAP;AACD;;AAtCY,CAAf","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport {\r\n  appendChild,\r\n  appendQuestionBlock,\r\n  hasChildNode,\r\n  getChildNode,\r\n  getRequiredAttr,\r\n  readQuestionBlock,\r\n  getAttrWithDefault,\r\n} from \"./utils/xml\";\r\n\r\nexport default {\r\n  serialize(doc, findField, parentNode, field) {\r\n    // const { settings } = field;\r\n    // const { prefilledAnswer } = settings;\r\n\r\n    const questionBlock = appendQuestionBlock(\r\n      doc,\r\n      findField,\r\n      parentNode,\r\n      \"string\",\r\n      field\r\n    );\r\n    // appendChild(doc, questionBlock, \"textarea\", null, {\r\n    //   \"prefilled-answer\": prefilledAnswer,\r\n    // });\r\n\r\n    appendChild(doc, questionBlock, \"textarea\", field.settings.value);\r\n  },\r\n\r\n  canDeserialize(node) {\r\n    return node.nodeName === \"question_block\" && hasChildNode(node, \"textarea\");\r\n  },\r\n\r\n  deserialize(node) {\r\n    let field = readQuestionBlock(node, \"paragraph\", \"string\"); // eslint-disable-line prefer-const\r\n    field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\r\n\r\n    const textAreaNode = getChildNode(node, \"textarea\");\r\n    field.settings.text = textAreaNode.textContent;\r\n    field.settings.prefilledAnswer = getAttrWithDefault(\r\n      textAreaNode,\r\n      \"prefilled-answer\",\r\n      \"\"\r\n    );\r\n\r\n    field.settings.value = textAreaNode.textContent;\r\n\r\n    return field;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}