{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nimport { // appendChildWithLineBreak,\nappendChild, appendQuestionBlock, hasChildNode, getChildNode, readQuestionBlock, getRequiredAttr, getAttrWithDefault } from \"./utils/xml\";\nexport default {\n  serialize(doc, findField, parentNode, field) {\n    // const { settings } = field;\n    // const { prefilledAnswer } = settings;\n    const questionBlock = appendQuestionBlock(doc, findField, parentNode, \"string\", field); // appendChildWithLineBreak(doc, questionBlock, \"textfield\", null, {\n    //   \"prefilled-answer\": prefilledAnswer,\n    // });\n\n    appendChild(doc, questionBlock, \"textfield\", field.settings.value);\n  },\n\n  canDeserialize(node) {\n    return node.nodeName === \"question_block\" && hasChildNode(node, \"textfield\");\n  },\n\n  deserialize(node) {\n    let field = readQuestionBlock(node, \"singleLine\", \"string\"); // eslint-disable-line prefer-const\n\n    field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\n    const textFieldNode = getChildNode(node, \"textfield\");\n    field.settings.text = textFieldNode.textContent;\n    field.settings.prefilledAnswer = getAttrWithDefault(textFieldNode, \"prefilled-answer\", \"\");\n    field.settings.value = textFieldNode.textContent;\n    return field;\n  }\n\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/SingleLineIO.js"],"names":["appendChild","appendQuestionBlock","hasChildNode","getChildNode","readQuestionBlock","getRequiredAttr","getAttrWithDefault","serialize","doc","findField","parentNode","field","questionBlock","settings","value","canDeserialize","node","nodeName","deserialize","required","textFieldNode","text","textContent","prefilledAnswer"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACE;AACAA,WAFF,EAGEC,mBAHF,EAIEC,YAJF,EAKEC,YALF,EAMEC,iBANF,EAOEC,eAPF,EAQEC,kBARF,QASO,aATP;AAWA,eAAe;AACbC,EAAAA,SAAS,CAACC,GAAD,EAAMC,SAAN,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoC;AAC3C;AACA;AACA,UAAMC,aAAa,GAAGX,mBAAmB,CACvCO,GADuC,EAEvCC,SAFuC,EAGvCC,UAHuC,EAIvC,QAJuC,EAKvCC,KALuC,CAAzC,CAH2C,CAW3C;AACA;AACA;;AAEAX,IAAAA,WAAW,CAACQ,GAAD,EAAMI,aAAN,EAAqB,WAArB,EAAkCD,KAAK,CAACE,QAAN,CAAeC,KAAjD,CAAX;AACD,GAjBY;;AAmBbC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,WACEA,IAAI,CAACC,QAAL,KAAkB,gBAAlB,IAAsCf,YAAY,CAACc,IAAD,EAAO,WAAP,CADpD;AAGD,GAvBY;;AAyBbE,EAAAA,WAAW,CAACF,IAAD,EAAO;AAChB,QAAIL,KAAK,GAAGP,iBAAiB,CAACY,IAAD,EAAO,YAAP,EAAqB,QAArB,CAA7B,CADgB,CAC6C;;AAC7DL,IAAAA,KAAK,CAACE,QAAN,CAAeM,QAAf,GAA0Bd,eAAe,CAACW,IAAD,EAAO,UAAP,CAAf,KAAsC,MAAhE;AAEA,UAAMI,aAAa,GAAGjB,YAAY,CAACa,IAAD,EAAO,WAAP,CAAlC;AACAL,IAAAA,KAAK,CAACE,QAAN,CAAeQ,IAAf,GAAsBD,aAAa,CAACE,WAApC;AACAX,IAAAA,KAAK,CAACE,QAAN,CAAeU,eAAf,GAAiCjB,kBAAkB,CACjDc,aADiD,EAEjD,kBAFiD,EAGjD,EAHiD,CAAnD;AAMAT,IAAAA,KAAK,CAACE,QAAN,CAAeC,KAAf,GAAuBM,aAAa,CAACE,WAArC;AAEA,WAAOX,KAAP;AACD;;AAxCY,CAAf","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport {\r\n  // appendChildWithLineBreak,\r\n  appendChild,\r\n  appendQuestionBlock,\r\n  hasChildNode,\r\n  getChildNode,\r\n  readQuestionBlock,\r\n  getRequiredAttr,\r\n  getAttrWithDefault,\r\n} from \"./utils/xml\";\r\n\r\nexport default {\r\n  serialize(doc, findField, parentNode, field) {\r\n    // const { settings } = field;\r\n    // const { prefilledAnswer } = settings;\r\n    const questionBlock = appendQuestionBlock(\r\n      doc,\r\n      findField,\r\n      parentNode,\r\n      \"string\",\r\n      field\r\n    );\r\n\r\n    // appendChildWithLineBreak(doc, questionBlock, \"textfield\", null, {\r\n    //   \"prefilled-answer\": prefilledAnswer,\r\n    // });\r\n\r\n    appendChild(doc, questionBlock, \"textfield\", field.settings.value);\r\n  },\r\n\r\n  canDeserialize(node) {\r\n    return (\r\n      node.nodeName === \"question_block\" && hasChildNode(node, \"textfield\")\r\n    );\r\n  },\r\n\r\n  deserialize(node) {\r\n    let field = readQuestionBlock(node, \"singleLine\", \"string\"); // eslint-disable-line prefer-const\r\n    field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\r\n\r\n    const textFieldNode = getChildNode(node, \"textfield\");\r\n    field.settings.text = textFieldNode.textContent;\r\n    field.settings.prefilledAnswer = getAttrWithDefault(\r\n      textFieldNode,\r\n      \"prefilled-answer\",\r\n      \"\"\r\n    );\r\n\r\n    field.settings.value = textFieldNode.textContent;\r\n\r\n    return field;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}