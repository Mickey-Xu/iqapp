{"ast":null,"code":"import * as action from \"actions\";\nimport * as api from \"api\";\nimport * as repo from \"js/fetch\";\nimport { saveDraftToLocal } from \"js/util\";\nexport const updateDocumentList = data => ({\n  type: \"UPDATE_DOCUMENT_LIST\",\n  payload: data\n});\nexport const uploadDocumentForm = (data, draftData, param) => dispatch => {\n  dispatch(action.showLoading());\n  return savePdf(data, draftData).then(response => {\n    repo.updateDocumentList(response.data).then(() => {\n      dispatch(action.updateDocumentList(response.data));\n    });\n    const {\n      orderNo,\n      form\n    } = draftData;\n    const {\n      documentNo,\n      documentPart,\n      activityNo,\n      productFamily,\n      productLine,\n      language\n    } = param;\n    saveDraftToLocal(form, {\n      documentNo,\n      documentPart\n    }, {\n      orderNo,\n      activityNo,\n      productFamily,\n      productLine,\n      language\n    });\n    dispatch(action.removeTemplateFormState(param));\n  }).catch(error => {\n    if (error.code === 401) {\n      window.localStorage.removeItem(\"auth\");\n      dispatch(action.setAuth(null));\n    }\n\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n    window.history.back(-1);\n  });\n};\n\nconst savePdf = (data, dataDraft) => {\n  let promises = [];\n  promises.push(api.uploadDocumentForm(data));\n  return Promise.all(promises).then(response => {\n    return Promise.resolve(response[0]);\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/documents.js"],"names":["action","api","repo","saveDraftToLocal","updateDocumentList","data","type","payload","uploadDocumentForm","draftData","param","dispatch","showLoading","savePdf","then","response","orderNo","form","documentNo","documentPart","activityNo","productFamily","productLine","language","removeTemplateFormState","catch","error","code","window","localStorage","removeItem","setAuth","setError","message","finally","hideLoading","history","back","dataDraft","promises","push","Promise","all","resolve"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,SAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAO,KAAKC,IAAZ,MAAsB,UAAtB;AACA,SAASC,gBAAT,QAAiC,SAAjC;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,KAAW;AAC3CC,EAAAA,IAAI,EAAE,sBADqC;AAE3CC,EAAAA,OAAO,EAAEF;AAFkC,CAAX,CAA3B;AAKP,OAAO,MAAMG,kBAAkB,GAAG,CAACH,IAAD,EAAOI,SAAP,EAAkBC,KAAlB,KAA6BC,QAAD,IAAc;AAC1EA,EAAAA,QAAQ,CAACX,MAAM,CAACY,WAAP,EAAD,CAAR;AACA,SAAOC,OAAO,CAACR,IAAD,EAAOI,SAAP,CAAP,CACJK,IADI,CACEC,QAAD,IAAc;AAClBb,IAAAA,IAAI,CAACE,kBAAL,CAAwBW,QAAQ,CAACV,IAAjC,EAAuCS,IAAvC,CAA4C,MAAM;AAChDH,MAAAA,QAAQ,CAACX,MAAM,CAACI,kBAAP,CAA0BW,QAAQ,CAACV,IAAnC,CAAD,CAAR;AACD,KAFD;AAGA,UAAM;AAAEW,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAoBR,SAA1B;AACA,UAAM;AACJS,MAAAA,UADI;AAEJC,MAAAA,YAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,aAJI;AAKJC,MAAAA,WALI;AAMJC,MAAAA;AANI,QAOFb,KAPJ;AASAP,IAAAA,gBAAgB,CACdc,IADc,EAEd;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAFc,EAGd;AAAEH,MAAAA,OAAF;AAAWI,MAAAA,UAAX;AAAuBC,MAAAA,aAAvB;AAAsCC,MAAAA,WAAtC;AAAmDC,MAAAA;AAAnD,KAHc,CAAhB;AAKAZ,IAAAA,QAAQ,CAACX,MAAM,CAACwB,uBAAP,CAA+Bd,KAA/B,CAAD,CAAR;AACD,GArBI,EAsBJe,KAtBI,CAsBGC,KAAD,IAAW;AAChB,QAAIA,KAAK,CAACC,IAAN,KAAe,GAAnB,EAAwB;AACtBC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,MAA/B;AACAnB,MAAAA,QAAQ,CAACX,MAAM,CAAC+B,OAAP,CAAe,IAAf,CAAD,CAAR;AACD;;AACDpB,IAAAA,QAAQ,CAACX,MAAM,CAACgC,QAAP,CAAgBN,KAAK,CAACO,OAAtB,CAAD,CAAR;AACD,GA5BI,EA6BJC,OA7BI,CA6BI,MAAM;AACbvB,IAAAA,QAAQ,CAACX,MAAM,CAACmC,WAAP,EAAD,CAAR;AACAP,IAAAA,MAAM,CAACQ,OAAP,CAAeC,IAAf,CAAoB,CAAC,CAArB;AACD,GAhCI,CAAP;AAiCD,CAnCM;;AAqCP,MAAMxB,OAAO,GAAG,CAACR,IAAD,EAAOiC,SAAP,KAAqB;AACnC,MAAIC,QAAQ,GAAG,EAAf;AAEAA,EAAAA,QAAQ,CAACC,IAAT,CAAcvC,GAAG,CAACO,kBAAJ,CAAuBH,IAAvB,CAAd;AAEA,SAAOoC,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAAsBzB,IAAtB,CAA4BC,QAAD,IAAc;AAC9C,WAAO0B,OAAO,CAACE,OAAR,CAAgB5B,QAAQ,CAAC,CAAD,CAAxB,CAAP;AACD,GAFM,CAAP;AAGD,CARD","sourcesContent":["import * as action from \"actions\";\r\nimport * as api from \"api\";\r\nimport * as repo from \"js/fetch\";\r\nimport { saveDraftToLocal } from \"js/util\";\r\n\r\nexport const updateDocumentList = (data) => ({\r\n  type: \"UPDATE_DOCUMENT_LIST\",\r\n  payload: data,\r\n});\r\n\r\nexport const uploadDocumentForm = (data, draftData, param) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return savePdf(data, draftData)\r\n    .then((response) => {\r\n      repo.updateDocumentList(response.data).then(() => {\r\n        dispatch(action.updateDocumentList(response.data));\r\n      });\r\n      const { orderNo, form } = draftData;\r\n      const {\r\n        documentNo,\r\n        documentPart,\r\n        activityNo,\r\n        productFamily,\r\n        productLine,\r\n        language,\r\n      } = param;\r\n\r\n      saveDraftToLocal(\r\n        form,\r\n        { documentNo, documentPart },\r\n        { orderNo, activityNo, productFamily, productLine, language }\r\n      );\r\n      dispatch(action.removeTemplateFormState(param));\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        window.localStorage.removeItem(\"auth\");\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n      window.history.back(-1);\r\n    });\r\n};\r\n\r\nconst savePdf = (data, dataDraft) => {\r\n  let promises = [];\r\n\r\n  promises.push(api.uploadDocumentForm(data));\r\n\r\n  return Promise.all(promises).then((response) => {\r\n    return Promise.resolve(response[0]);\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}