{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nimport { appendChild, appendQuestionBlock, hasChildNode, readQuestionBlock, getRequiredAttr, getChildNode, getAttrWithDefault } from \"./utils/xml\";\nexport default {\n  serialize(doc, findField, parentNode, field) {\n    const {\n      min,\n      max,\n      step,\n      initialValue,\n      value\n    } = field.settings;\n    const questionBlock = appendQuestionBlock(doc, findField, parentNode, \"decimal\", field);\n    questionBlock.setAttribute(\"value\", initialValue);\n    appendChild(doc, questionBlock, \"range\", null, {\n      from: min,\n      to: max,\n      step: step,\n      value\n    });\n  },\n\n  canDeserialize(node) {\n    return node.nodeName === \"question_block\" && hasChildNode(node, \"range\");\n  },\n\n  deserialize(node) {\n    let field = readQuestionBlock(node, \"slider\", \"decimal\"); // eslint-disable-line prefer-const\n\n    const rangeNode = getChildNode(node, \"range\");\n    field.settings.min = Number(getRequiredAttr(rangeNode, \"from\"));\n    field.settings.max = Number(getRequiredAttr(rangeNode, \"to\"));\n    field.settings.step = Number(getRequiredAttr(rangeNode, \"step\"));\n    field.settings.initialValue = Number(getRequiredAttr(rangeNode, \"value\"));\n    const value = Number(getAttrWithDefault(node, \"value\", \"x\"));\n\n    if (!Number.isNaN(value)) {\n      field.settings.value = value;\n    }\n\n    return field;\n  }\n\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/SliderIO.js"],"names":["appendChild","appendQuestionBlock","hasChildNode","readQuestionBlock","getRequiredAttr","getChildNode","getAttrWithDefault","serialize","doc","findField","parentNode","field","min","max","step","initialValue","value","settings","questionBlock","setAttribute","from","to","canDeserialize","node","nodeName","deserialize","rangeNode","Number","isNaN"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACEA,WADF,EAEEC,mBAFF,EAGEC,YAHF,EAIEC,iBAJF,EAKEC,eALF,EAMEC,YANF,EAOEC,kBAPF,QAQO,aARP;AAUA,eAAe;AACbC,EAAAA,SAAS,CAACC,GAAD,EAAMC,SAAN,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoC;AAC3C,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,GAAP;AAAYC,MAAAA,IAAZ;AAAkBC,MAAAA,YAAlB;AAAgCC,MAAAA;AAAhC,QAA0CL,KAAK,CAACM,QAAtD;AAEA,UAAMC,aAAa,GAAGjB,mBAAmB,CACvCO,GADuC,EAEvCC,SAFuC,EAGvCC,UAHuC,EAIvC,SAJuC,EAKvCC,KALuC,CAAzC;AAOAO,IAAAA,aAAa,CAACC,YAAd,CAA2B,OAA3B,EAAoCJ,YAApC;AAEAf,IAAAA,WAAW,CAACQ,GAAD,EAAMU,aAAN,EAAqB,OAArB,EAA8B,IAA9B,EAAoC;AAC7CE,MAAAA,IAAI,EAAER,GADuC;AAE7CS,MAAAA,EAAE,EAAER,GAFyC;AAG7CC,MAAAA,IAAI,EAAEA,IAHuC;AAI7CE,MAAAA;AAJ6C,KAApC,CAAX;AAMD,GAnBY;;AAqBbM,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,WAAOA,IAAI,CAACC,QAAL,KAAkB,gBAAlB,IAAsCtB,YAAY,CAACqB,IAAD,EAAO,OAAP,CAAzD;AACD,GAvBY;;AAyBbE,EAAAA,WAAW,CAACF,IAAD,EAAO;AAChB,QAAIZ,KAAK,GAAGR,iBAAiB,CAACoB,IAAD,EAAO,QAAP,EAAiB,SAAjB,CAA7B,CADgB,CAC0C;;AAE1D,UAAMG,SAAS,GAAGrB,YAAY,CAACkB,IAAD,EAAO,OAAP,CAA9B;AACAZ,IAAAA,KAAK,CAACM,QAAN,CAAeL,GAAf,GAAqBe,MAAM,CAACvB,eAAe,CAACsB,SAAD,EAAY,MAAZ,CAAhB,CAA3B;AACAf,IAAAA,KAAK,CAACM,QAAN,CAAeJ,GAAf,GAAqBc,MAAM,CAACvB,eAAe,CAACsB,SAAD,EAAY,IAAZ,CAAhB,CAA3B;AACAf,IAAAA,KAAK,CAACM,QAAN,CAAeH,IAAf,GAAsBa,MAAM,CAACvB,eAAe,CAACsB,SAAD,EAAY,MAAZ,CAAhB,CAA5B;AACAf,IAAAA,KAAK,CAACM,QAAN,CAAeF,YAAf,GAA8BY,MAAM,CAACvB,eAAe,CAACsB,SAAD,EAAY,OAAZ,CAAhB,CAApC;AAEA,UAAMV,KAAK,GAAGW,MAAM,CAACrB,kBAAkB,CAACiB,IAAD,EAAO,OAAP,EAAgB,GAAhB,CAAnB,CAApB;;AACA,QAAI,CAACI,MAAM,CAACC,KAAP,CAAaZ,KAAb,CAAL,EAA0B;AACxBL,MAAAA,KAAK,CAACM,QAAN,CAAeD,KAAf,GAAuBA,KAAvB;AACD;;AAED,WAAOL,KAAP;AACD;;AAxCY,CAAf","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport {\r\n  appendChild,\r\n  appendQuestionBlock,\r\n  hasChildNode,\r\n  readQuestionBlock,\r\n  getRequiredAttr,\r\n  getChildNode,\r\n  getAttrWithDefault,\r\n} from \"./utils/xml\";\r\n\r\nexport default {\r\n  serialize(doc, findField, parentNode, field) {\r\n    const { min, max, step, initialValue, value } = field.settings;\r\n\r\n    const questionBlock = appendQuestionBlock(\r\n      doc,\r\n      findField,\r\n      parentNode,\r\n      \"decimal\",\r\n      field\r\n    );\r\n    questionBlock.setAttribute(\"value\", initialValue);\r\n\r\n    appendChild(doc, questionBlock, \"range\", null, {\r\n      from: min,\r\n      to: max,\r\n      step: step,\r\n      value,\r\n    });\r\n  },\r\n\r\n  canDeserialize(node) {\r\n    return node.nodeName === \"question_block\" && hasChildNode(node, \"range\");\r\n  },\r\n\r\n  deserialize(node) {\r\n    let field = readQuestionBlock(node, \"slider\", \"decimal\"); // eslint-disable-line prefer-const\r\n\r\n    const rangeNode = getChildNode(node, \"range\");\r\n    field.settings.min = Number(getRequiredAttr(rangeNode, \"from\"));\r\n    field.settings.max = Number(getRequiredAttr(rangeNode, \"to\"));\r\n    field.settings.step = Number(getRequiredAttr(rangeNode, \"step\"));\r\n    field.settings.initialValue = Number(getRequiredAttr(rangeNode, \"value\"));\r\n\r\n    const value = Number(getAttrWithDefault(node, \"value\", \"x\"));\r\n    if (!Number.isNaN(value)) {\r\n      field.settings.value = value;\r\n    }\r\n\r\n    return field;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}