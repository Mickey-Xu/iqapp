{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */import{appendChild,appendQuestionBlock,hasChildNode,getChildNode,getRequiredAttr,readQuestionBlock,getAttrWithDefault}from\"./utils/xml\";export default{serialize:function serialize(doc,findField,parentNode,field){var formula=field.settings.formula;var questionBlock=appendQuestionBlock(doc,findField,parentNode,\"decimal\",field);appendChild(doc,questionBlock,\"calculation\",null,{formula:formula||\"0\"});},canDeserialize:function canDeserialize(node){return node.nodeName===\"question_block\"&&hasChildNode(node,\"calculation\");},deserialize:function deserialize(node){var field=readQuestionBlock(node,\"calculation\",\"decimal\");// eslint-disable-line prefer-const\nvar calculationNode=getChildNode(node,\"calculation\");field.settings.formula=getRequiredAttr(calculationNode,\"formula\");var value=parseFloat(getAttrWithDefault(node,\"value\",\"\"));if(!Number.isNaN(value)){field.settings.value=value;}return field;}};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/CalculationIO.js"],"names":["appendChild","appendQuestionBlock","hasChildNode","getChildNode","getRequiredAttr","readQuestionBlock","getAttrWithDefault","serialize","doc","findField","parentNode","field","formula","settings","questionBlock","canDeserialize","node","nodeName","deserialize","calculationNode","value","parseFloat","Number","isNaN"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,OACEA,WADF,CAEEC,mBAFF,CAGEC,YAHF,CAIEC,YAJF,CAKEC,eALF,CAMEC,iBANF,CAOEC,kBAPF,KAQO,aARP,CAUA,cAAe,CACbC,SADa,oBACHC,GADG,CACEC,SADF,CACaC,UADb,CACyBC,KADzB,CACgC,IACnCC,CAAAA,OADmC,CACvBD,KAAK,CAACE,QADiB,CACnCD,OADmC,CAG3C,GAAME,CAAAA,aAAa,CAAGb,mBAAmB,CACvCO,GADuC,CAEvCC,SAFuC,CAGvCC,UAHuC,CAIvC,SAJuC,CAKvCC,KALuC,CAAzC,CAOAX,WAAW,CAACQ,GAAD,CAAMM,aAAN,CAAqB,aAArB,CAAoC,IAApC,CAA0C,CACnDF,OAAO,CAAEA,OAAO,EAAI,GAD+B,CAA1C,CAAX,CAGD,CAdY,CAgBbG,cAhBa,yBAgBEC,IAhBF,CAgBQ,CACnB,MACEA,CAAAA,IAAI,CAACC,QAAL,GAAkB,gBAAlB,EAAsCf,YAAY,CAACc,IAAD,CAAO,aAAP,CADpD,CAGD,CApBY,CAsBbE,WAtBa,sBAsBDF,IAtBC,CAsBK,CAChB,GAAIL,CAAAA,KAAK,CAAGN,iBAAiB,CAACW,IAAD,CAAO,aAAP,CAAsB,SAAtB,CAA7B,CAA+D;AAE/D,GAAMG,CAAAA,eAAe,CAAGhB,YAAY,CAACa,IAAD,CAAO,aAAP,CAApC,CACAL,KAAK,CAACE,QAAN,CAAeD,OAAf,CAAyBR,eAAe,CAACe,eAAD,CAAkB,SAAlB,CAAxC,CAEA,GAAMC,CAAAA,KAAK,CAAGC,UAAU,CAACf,kBAAkB,CAACU,IAAD,CAAO,OAAP,CAAgB,EAAhB,CAAnB,CAAxB,CACA,GAAI,CAACM,MAAM,CAACC,KAAP,CAAaH,KAAb,CAAL,CAA0B,CACxBT,KAAK,CAACE,QAAN,CAAeO,KAAf,CAAuBA,KAAvB,CACD,CAED,MAAOT,CAAAA,KAAP,CACD,CAlCY,CAAf","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport {\r\n  appendChild,\r\n  appendQuestionBlock,\r\n  hasChildNode,\r\n  getChildNode,\r\n  getRequiredAttr,\r\n  readQuestionBlock,\r\n  getAttrWithDefault,\r\n} from \"./utils/xml\";\r\n\r\nexport default {\r\n  serialize(doc, findField, parentNode, field) {\r\n    const { formula } = field.settings;\r\n\r\n    const questionBlock = appendQuestionBlock(\r\n      doc,\r\n      findField,\r\n      parentNode,\r\n      \"decimal\",\r\n      field\r\n    );\r\n    appendChild(doc, questionBlock, \"calculation\", null, {\r\n      formula: formula || \"0\",\r\n    });\r\n  },\r\n\r\n  canDeserialize(node) {\r\n    return (\r\n      node.nodeName === \"question_block\" && hasChildNode(node, \"calculation\")\r\n    );\r\n  },\r\n\r\n  deserialize(node) {\r\n    let field = readQuestionBlock(node, \"calculation\", \"decimal\"); // eslint-disable-line prefer-const\r\n\r\n    const calculationNode = getChildNode(node, \"calculation\");\r\n    field.settings.formula = getRequiredAttr(calculationNode, \"formula\");\r\n\r\n    const value = parseFloat(getAttrWithDefault(node, \"value\", \"\"));\r\n    if (!Number.isNaN(value)) {\r\n      field.settings.value = value;\r\n    }\r\n\r\n    return field;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}