{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\SCF-NI_PM_App\\\\SCF.InstallationQuality\\\\react-client\\\\src\\\\pages\\\\TaskListPage\\\\index.js\";\nimport { Box } from \"@material-ui/core\";\nimport FFTab from \"components/FFTab\";\nimport TaskListItem from \"components/TaskListItem\";\nimport { LocalizeContext } from \"i18n\";\nimport { toDoOrDone } from \"js/util\";\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport * as action from \"actions\";\nimport * as util from \"js/util\";\n\nconst Tasks = ({\n  type,\n  tasksData,\n  getTaskCount,\n  submit,\n  orders,\n  orderActivities\n}) => {\n  const i18n = React.useContext(LocalizeContext);\n  const [status, setStatus] = React.useState(\"open\");\n  const params = useParams();\n  const awaitStart = getTaskCount(tasksData, 'awaitStart');\n  const awaitComplate = getTaskCount(tasksData, 'awaitComplate');\n  const awaitClose = getTaskCount(tasksData, 'awaitClose');\n  const tabs = [{\n    title: i18n.ISNTAPP_TO_COMPLETE,\n    value: \"open\"\n  }, {\n    title: i18n.ISNTAPP_TO_CLOSE,\n    value: \"pending\"\n  }, {\n    title: i18n.ISNTAPP_CLOSED,\n    value: \"close\"\n  }];\n  let currentStatusTasks = [];\n\n  if (status === \"open\") {\n    tasksData.forEach(item => {\n      if (item.status === \"awaitComplate\" || item.status === \"awaitStart\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  if (status === \"pending\") {\n    tasksData.forEach(item => {\n      if (item.status === \"awaitClose\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  if (status === \"close\") {\n    tasksData.forEach(item => {\n      if (item.status === \"closed\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(PrimaryLayout, {\n    name: \"tasks\",\n    title: params.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    style: {\n      position: \"fixed\",\n      top: \"52px\",\n      width: \"100%\",\n      zIndex: \"10000\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FFTab, {\n    tabs: tabs,\n    selectedTabValue: \"open\",\n    onTabChange: value => setStatus(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"22%\",\n      padding: \"2px 8px\",\n      backgroundColor: \"red\",\n      borderRadius: \"40px\",\n      color: \"white\",\n      display: awaitComplate + awaitStart > 0 ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, awaitComplate + awaitStart), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"55%\",\n      padding: \"2px 8px\",\n      backgroundColor: \"red\",\n      borderRadius: \"40px\",\n      color: \"white\",\n      display: awaitClose > 0 ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, awaitClose)), /*#__PURE__*/React.createElement(Box, {\n    style: {\n      width: \"100%\",\n      padding: \"16px\",\n      position: \"absolute\",\n      top: \"32px\",\n      height: window.screen.height - 157 + \"px\",\n      overflow: \"hidden auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TaskListItem, {\n    data: currentStatusTasks,\n    status: status,\n    type: type,\n    submit: (type, data) => {\n      const activityParams = util.setActivityStatusParams(data.projectNo, data.orderNo, data.activityNo, util.formatDateToYMD(new Date()), 1, orderActivities, orders);\n      submit(type, data, activityParams);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    match\n  } = ownProps;\n  const {\n    params\n  } = match;\n  const {\n    type\n  } = params;\n  const {\n    tasks,\n    orders,\n    templates,\n    documentList,\n    orderActivities\n  } = state;\n  let data = Object.keys(tasks).length > 0 ? tasks : [];\n  let taskList = data.filter(item => item.taskType === type);\n  taskList.forEach(item => {\n    var _orders$item$orderNo, _orders$item$orderNo2;\n\n    item['productFamily'] = (_orders$item$orderNo = orders[item === null || item === void 0 ? void 0 : item.orderNo]) === null || _orders$item$orderNo === void 0 ? void 0 : _orders$item$orderNo.productFamily;\n    item['documentStatus'] = toDoOrDone((_orders$item$orderNo2 = orders[item === null || item === void 0 ? void 0 : item.orderNo]) === null || _orders$item$orderNo2 === void 0 ? void 0 : _orders$item$orderNo2.projectNumber, item.orderNo, item.activityNo, templates, documentList);\n  });\n  return {\n    type,\n    tasksData: taskList,\n    orders,\n    orderActivities\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (type, data, activityParams) => {\n      const result = verifyWhenConfirm7020or70C0(orderActivities, data.orderNumber, data.activityNumber);\n\n      if (result) {\n        alert(result.stepNo + result.message);\n        return;\n      }\n\n      const templateDataList = getTemplateList(templates[data.activityNumber] || [], orders[data.orderNumber].productLine, orders[data.orderNumber].productFamily, orders[data.orderNumber].productCategory);\n      const param = templateDataList.map(item => {\n        return {\n          foe: orders[data.orderNumber].fo,\n          region: orders[data.orderNumber].region,\n          branch: orders[data.orderNumber].prctr,\n          ProjectNo: orders[data.orderNumber].projectNumber,\n          OrderNo: data.orderNumber,\n          ActivityNo: data.activityNumber,\n          Description: item.documentDescription\n        };\n      });\n      checkFileIsExisting(templates, data, orders).then(message => {\n        if (message.length < 1) {\n          param.map(item => fetchNoConformityList(item).then(res => {\n            var _res$data, _res$data$0$nonConfor;\n\n            const foundItems = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$0$nonConfor = _res$data[0].nonConformities) === null || _res$data$0$nonConfor === void 0 ? void 0 : _res$data$0$nonConfor.flatMap(key => key.nonConformityItems.filter(subItem => subItem.questionType === \"Triangle\" && subItem.itemValue === \"no\"));\n\n            if (foundItems.length > 0) {\n              alert(`您有${foundItems.length}个三角项检查项未关闭，请关闭三角项后再确认节点`);\n              return false;\n            }\n\n            ;\n          }));\n          handleClickOpen(\"confirm\", data.activityNumber, (tabType ? data.activityNumber : data.stepNumber) + \" \" + data.description);\n        } else {\n          alert(`请上传 ${message.toString()}`);\n        }\n      });\n      dispatch(action.processingTasks(type, data, activityParams, dispatch));\n    },\n    getTaskCount: (task, status) => {\n      let count = task.filter(item => item.status === status).length;\n      return count;\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/pages/TaskListPage/index.js"],"names":["Box","FFTab","TaskListItem","LocalizeContext","toDoOrDone","PrimaryLayout","React","connect","useParams","action","util","Tasks","type","tasksData","getTaskCount","submit","orders","orderActivities","i18n","useContext","status","setStatus","useState","params","awaitStart","awaitComplate","awaitClose","tabs","title","ISNTAPP_TO_COMPLETE","value","ISNTAPP_TO_CLOSE","ISNTAPP_CLOSED","currentStatusTasks","forEach","item","push","position","top","width","zIndex","left","padding","backgroundColor","borderRadius","color","display","height","window","screen","overflow","data","activityParams","setActivityStatusParams","projectNo","orderNo","activityNo","formatDateToYMD","Date","mapStateToProps","state","ownProps","match","tasks","templates","documentList","Object","keys","length","taskList","filter","taskType","productFamily","projectNumber","mapDispatchToProps","dispatch","result","verifyWhenConfirm7020or70C0","orderNumber","activityNumber","alert","stepNo","message","templateDataList","getTemplateList","productLine","productCategory","param","map","foe","fo","region","branch","prctr","ProjectNo","OrderNo","ActivityNo","Description","documentDescription","checkFileIsExisting","then","fetchNoConformityList","res","foundItems","nonConformities","flatMap","key","nonConformityItems","subItem","questionType","itemValue","handleClickOpen","tabType","stepNumber","description","toString","processingTasks","task","count"],"mappings":"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","sourcesContent":["import { Box } from \"@material-ui/core\";\r\nimport FFTab from \"components/FFTab\";\r\nimport TaskListItem from \"components/TaskListItem\";\r\nimport { LocalizeContext } from \"i18n\";\r\nimport { toDoOrDone } from \"js/util\";\r\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport * as action from \"actions\";\r\nimport * as util from \"js/util\";\r\n\r\nconst Tasks = ({ type, tasksData, getTaskCount, submit, orders, orderActivities }) => {\r\n  const i18n = React.useContext(LocalizeContext);\r\n  const [status, setStatus] = React.useState(\"open\");\r\n  const params = useParams()\r\n  const awaitStart = getTaskCount(tasksData, 'awaitStart');\r\n  const awaitComplate = getTaskCount(tasksData,'awaitComplate');\r\n  const awaitClose = getTaskCount(tasksData, 'awaitClose');\r\n  const tabs = [\r\n    { title: i18n.ISNTAPP_TO_COMPLETE, value: \"open\" },\r\n    { title: i18n.ISNTAPP_TO_CLOSE, value: \"pending\" },\r\n    { title: i18n.ISNTAPP_CLOSED, value: \"close\" },\r\n  ];\r\n\r\n  let currentStatusTasks = [];\r\n\r\n  if (status === \"open\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.status === \"awaitComplate\" || item.status === \"awaitStart\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (status === \"pending\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.status === \"awaitClose\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (status === \"close\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.status === \"closed\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n  \r\n  return (\r\n    <PrimaryLayout name=\"tasks\" title={params.type}>\r\n      <Box\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"52px\",\r\n          width: \"100%\",\r\n          zIndex: \"10000\",\r\n        }}\r\n      >\r\n        <FFTab\r\n          tabs={tabs}\r\n          selectedTabValue={\"open\"}\r\n          onTabChange={(value) => setStatus(value)}\r\n        />\r\n        <span\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"0\",\r\n            left: \"22%\",\r\n            padding: \"2px 8px\",\r\n            backgroundColor: \"red\",\r\n            borderRadius: \"40px\",\r\n            color: \"white\",\r\n            display: (awaitComplate + awaitStart) >0?'block':'none'\r\n          }}\r\n        >\r\n          {awaitComplate + awaitStart}\r\n        </span>\r\n            <span\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"0\",\r\n                left: \"55%\",\r\n                padding: \"2px 8px\",\r\n                backgroundColor: \"red\",\r\n                borderRadius: \"40px\",\r\n                color: \"white\",\r\n                display: awaitClose > 0 ? 'block' : 'none'\r\n              }}\r\n            >\r\n          {awaitClose}\r\n        </span>\r\n      </Box>\r\n\r\n      <Box\r\n        style={{\r\n          width: \"100%\",\r\n          padding: \"16px\",\r\n          position: \"absolute\",\r\n          top: \"32px\",\r\n          height: window.screen.height - 157 + \"px\",\r\n          overflow: \"hidden auto\",\r\n        }}\r\n      >\r\n        <TaskListItem\r\n          data={currentStatusTasks}\r\n          status={status}\r\n          type={type}\r\n          submit={(type, data) => { \r\n              const activityParams = util.setActivityStatusParams(\r\n                                    data.projectNo,\r\n                                    data.orderNo,\r\n                                    data.activityNo,\r\n                                    util.formatDateToYMD(new Date()),\r\n                                    1,\r\n                                    orderActivities,\r\n                                    orders\r\n            );\r\n            submit(type, data,activityParams)\r\n          }}\r\n        ></TaskListItem>\r\n      </Box>\r\n    </PrimaryLayout>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const { match } = ownProps;\r\n  const { params } = match;\r\n  const { type } = params;\r\n  const { tasks, orders, templates, documentList, orderActivities } = state;\r\n  let data = Object.keys(tasks).length > 0 ? tasks : [];\r\n  let taskList = data.filter((item) => item.taskType === type);\r\n\r\n  taskList.forEach((item) =>\r\n  {\r\n    item['productFamily'] = orders[item?.orderNo]?.productFamily;\r\n    item['documentStatus'] = toDoOrDone(\r\n      orders[item?.orderNo]?.projectNumber,\r\n      item.orderNo,\r\n      item.activityNo,\r\n      templates,\r\n      documentList\r\n      );\r\n    }\r\n  )\r\n\r\n  return {\r\n    type,\r\n    tasksData: taskList,\r\n    orders,\r\n    orderActivities\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    submit: (type, data, activityParams) => {\r\n\r\n      const result = verifyWhenConfirm7020or70C0(\r\n        orderActivities,\r\n        data.orderNumber,\r\n        data.activityNumber\r\n      );\r\n      if (result) {\r\n        alert(result.stepNo + result.message);\r\n        return;\r\n      }\r\n\r\n\r\n\r\n      const templateDataList = getTemplateList(\r\n        templates[data.activityNumber] || [],\r\n        orders[data.orderNumber].productLine,\r\n        orders[data.orderNumber].productFamily,\r\n        orders[data.orderNumber].productCategory\r\n      );\r\n\r\n      const param = templateDataList.map((item) => {\r\n        return {\r\n          foe: orders[data.orderNumber].fo,\r\n          region: orders[data.orderNumber].region,\r\n          branch: orders[data.orderNumber].prctr,\r\n          ProjectNo: orders[data.orderNumber].projectNumber,\r\n          OrderNo: data.orderNumber,\r\n          ActivityNo: data.activityNumber,\r\n          Description: item.documentDescription,\r\n        };\r\n      });\r\n\r\n      checkFileIsExisting(templates, data, orders).then((message) => {\r\n        if (message.length < 1) {\r\n          param.map(item =>\r\n            fetchNoConformityList(item).then((res) => {\r\n              const foundItems = res.data?.[0].nonConformities?.flatMap(key =>\r\n                key.nonConformityItems.filter(\r\n                  subItem => subItem.questionType === \"Triangle\" && subItem.itemValue === \"no\"\r\n                )\r\n              );\r\n\r\n              if (foundItems.length > 0) {\r\n                alert(`您有${foundItems.length}个三角项检查项未关闭，请关闭三角项后再确认节点`);\r\n                return false;\r\n              };\r\n            })\r\n          )\r\n          handleClickOpen(\r\n            \"confirm\",\r\n            data.activityNumber,\r\n            (tabType ? data.activityNumber : data.stepNumber) +\r\n            \" \" +\r\n            data.description\r\n          );\r\n        } else {\r\n          alert(`请上传 ${message.toString()}`);\r\n        }\r\n      });\r\n\r\n\r\n\r\n\r\n\r\n      dispatch(action.processingTasks(type, data,activityParams,dispatch))\r\n    },\r\n    getTaskCount: (task, status) => {\r\n      let count = task.filter((item) => item.status === status).length\r\n      return count\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);\r\n"]},"metadata":{},"sourceType":"module"}