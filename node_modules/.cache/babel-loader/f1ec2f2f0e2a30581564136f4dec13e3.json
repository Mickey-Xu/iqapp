{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nimport { appendChild, appendQuestionBlock, hasChildNode, getChildNode, getChildNodes, getRequiredAttr, getAttrWithDefault, readQuestionBlock } from \"./utils/xml\";\nimport { FREE_TEXT_VALUE } from \"./utils/options\";\nimport { DEFAULT_LANG } from \"./constants/global\";\nimport uuid from \"node-uuid\";\nexport default {\n  serialize(doc, findField, parentNode, field) {\n    const {\n      options,\n      includeOther\n    } = field.settings;\n    const questionBlock = appendQuestionBlock(doc, findField, parentNode, \"string[]\", field);\n    const multiGroup = appendChild(doc, questionBlock, \"multi_group\");\n    options.forEach(({\n      id,\n      nameI18n,\n      value\n    }) => {\n      const optionNode = appendChild(doc, multiGroup, \"option\", null, {\n        value: value,\n        selected: field.settings.value.includes(value)\n      });\n      Object.keys(nameI18n).forEach(lang => {\n        if (typeof nameI18n[lang] !== \"undefined\") {\n          appendChild(doc, optionNode, \"text\", nameI18n[lang], {\n            lang\n          });\n        }\n      });\n    });\n\n    if (includeOther) {\n      const optionNode = appendChild(doc, multiGroup, \"option\", null, {\n        value: FREE_TEXT_VALUE,\n        selected: false\n      });\n      appendChild(doc, optionNode, \"textfield\");\n    }\n  },\n\n  canDeserialize(node) {\n    return node.nodeName === \"question_block\" && hasChildNode(node, \"multi_group\");\n  },\n\n  deserialize(node) {\n    let field = readQuestionBlock(node, \"checkboxes\", \"string[]\"); // eslint-disable-line prefer-const\n\n    const multiGroupNode = getChildNode(node, \"multi_group\");\n    const optionNodes = getChildNodes(multiGroupNode, \"option\");\n    let selectedValues = getAttrWithDefault(node, \"value\", \"\");\n    field.settings.value = selectedValues === \"\" ? [] : selectedValues.split(\",\");\n    let options = []; // eslint-disable-line prefer-const\n\n    let selectedIds = []; // eslint-disable-line prefer-const\n\n    field.settings.options = options;\n    field.settings.selectedIds = selectedIds;\n    field.settings.includeOther = false;\n    optionNodes.forEach(optionNode => {\n      if (hasChildNode(optionNode, \"textfield\")) {\n        const otherTextFieldNode = getChildNode(optionNode, \"textfield\");\n        field.settings.includeOther = true;\n        field.settings.otherOptionText = otherTextFieldNode.textContent;\n        field.settings.otherOptionSelected = getAttrWithDefault(optionNode, \"selected\", \"false\") === \"true\";\n      } else {\n        const optionId = uuid.v4();\n        const nameI18n = getChildNodes(optionNode, \"text\").reduce((acc, textNode) => {\n          return Object.assign({}, acc, {\n            [getAttrWithDefault(textNode, \"lang\", DEFAULT_LANG)]: textNode.textContent\n          });\n        }, {});\n        options.push({\n          id: optionId,\n          nameI18n: nameI18n,\n          value: getRequiredAttr(optionNode, \"value\")\n        });\n\n        if (getAttrWithDefault(optionNode, \"selected\", \"false\") === \"true\") {\n          selectedIds.push(optionId);\n        }\n      }\n    });\n    return field;\n  }\n\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/CheckboxesIO.js"],"names":["appendChild","appendQuestionBlock","hasChildNode","getChildNode","getChildNodes","getRequiredAttr","getAttrWithDefault","readQuestionBlock","FREE_TEXT_VALUE","DEFAULT_LANG","uuid","serialize","doc","findField","parentNode","field","options","includeOther","settings","questionBlock","multiGroup","forEach","id","nameI18n","value","optionNode","selected","includes","Object","keys","lang","canDeserialize","node","nodeName","deserialize","multiGroupNode","optionNodes","selectedValues","split","selectedIds","otherTextFieldNode","otherOptionText","textContent","otherOptionSelected","optionId","v4","reduce","acc","textNode","assign","push"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport {\r\n  appendChild,\r\n  appendQuestionBlock,\r\n  hasChildNode,\r\n  getChildNode,\r\n  getChildNodes,\r\n  getRequiredAttr,\r\n  getAttrWithDefault,\r\n  readQuestionBlock,\r\n} from \"./utils/xml\";\r\nimport { FREE_TEXT_VALUE } from \"./utils/options\";\r\nimport { DEFAULT_LANG } from \"./constants/global\";\r\nimport uuid from \"node-uuid\";\r\n\r\nexport default {\r\n  serialize(doc, findField, parentNode, field) {\r\n    const { options, includeOther } = field.settings;\r\n\r\n    const questionBlock = appendQuestionBlock(\r\n      doc,\r\n      findField,\r\n      parentNode,\r\n      \"string[]\",\r\n      field\r\n    );\r\n\r\n    const multiGroup = appendChild(doc, questionBlock, \"multi_group\");\r\n\r\n    options.forEach(({ id, nameI18n, value }) => {\r\n      const optionNode = appendChild(doc, multiGroup, \"option\", null, {\r\n        value: value,\r\n        selected: field.settings.value.includes(value),\r\n      });\r\n\r\n      Object.keys(nameI18n).forEach((lang) => {\r\n        if (typeof nameI18n[lang] !== \"undefined\") {\r\n          appendChild(doc, optionNode, \"text\", nameI18n[lang], { lang });\r\n        }\r\n      });\r\n    });\r\n\r\n    if (includeOther) {\r\n      const optionNode = appendChild(doc, multiGroup, \"option\", null, {\r\n        value: FREE_TEXT_VALUE,\r\n        selected: false,\r\n      });\r\n      appendChild(doc, optionNode, \"textfield\");\r\n    }\r\n  },\r\n\r\n  canDeserialize(node) {\r\n    return (\r\n      node.nodeName === \"question_block\" && hasChildNode(node, \"multi_group\")\r\n    );\r\n  },\r\n\r\n  deserialize(node) {\r\n    let field = readQuestionBlock(node, \"checkboxes\", \"string[]\"); // eslint-disable-line prefer-const\r\n\r\n    const multiGroupNode = getChildNode(node, \"multi_group\");\r\n    const optionNodes = getChildNodes(multiGroupNode, \"option\");\r\n\r\n    let selectedValues = getAttrWithDefault(node, \"value\", \"\");\r\n    field.settings.value =\r\n      selectedValues === \"\" ? [] : selectedValues.split(\",\");\r\n\r\n    let options = []; // eslint-disable-line prefer-const\r\n    let selectedIds = []; // eslint-disable-line prefer-const\r\n    field.settings.options = options;\r\n    field.settings.selectedIds = selectedIds;\r\n\r\n    field.settings.includeOther = false;\r\n\r\n    optionNodes.forEach((optionNode) => {\r\n      if (hasChildNode(optionNode, \"textfield\")) {\r\n        const otherTextFieldNode = getChildNode(optionNode, \"textfield\");\r\n        field.settings.includeOther = true;\r\n        field.settings.otherOptionText = otherTextFieldNode.textContent;\r\n        field.settings.otherOptionSelected =\r\n          getAttrWithDefault(optionNode, \"selected\", \"false\") === \"true\";\r\n      } else {\r\n        const optionId = uuid.v4();\r\n\r\n        const nameI18n = getChildNodes(optionNode, \"text\").reduce(\r\n          (acc, textNode) => {\r\n            return Object.assign({}, acc, {\r\n              [getAttrWithDefault(\r\n                textNode,\r\n                \"lang\",\r\n                DEFAULT_LANG\r\n              )]: textNode.textContent,\r\n            });\r\n          },\r\n          {}\r\n        );\r\n\r\n        options.push({\r\n          id: optionId,\r\n          nameI18n: nameI18n,\r\n          value: getRequiredAttr(optionNode, \"value\"),\r\n        });\r\n\r\n        if (getAttrWithDefault(optionNode, \"selected\", \"false\") === \"true\") {\r\n          selectedIds.push(optionId);\r\n        }\r\n      }\r\n    });\r\n\r\n    return field;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}