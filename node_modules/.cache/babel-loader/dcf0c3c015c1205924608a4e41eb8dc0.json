{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */import forge from\"node-forge\";var KEY=forge.util.hexToBytes(\"C8DF55A9BAE39437C383A64B3D0FCBF2BFEDF599C0F4F246128503D0D13370A5\");var IV=forge.util.hexToBytes(\"7DE549A796BFF62AC8E1FB716C57DF46\");export function encrypt(cleartext){var cipher=forge.cipher.createCipher(\"AES-CBC\",KEY);cipher.start({iv:IV});cipher.update(forge.util.createBuffer(cleartext));cipher.finish();return forge.util.encode64(cipher.output.getBytes());}export function decrypt(encrypted64){var encrypted=forge.util.decode64(encrypted64);var decipher=forge.cipher.createDecipher(\"AES-CBC\",KEY);decipher.start({iv:IV});decipher.update(forge.util.createBuffer(encrypted));decipher.finish();return decipher.output.data;}","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/utils/crypto.js"],"names":["forge","KEY","util","hexToBytes","IV","encrypt","cleartext","cipher","createCipher","start","iv","update","createBuffer","finish","encode64","output","getBytes","decrypt","encrypted64","encrypted","decode64","decipher","createDecipher","data"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAOA,CAAAA,KAAP,KAAkB,YAAlB,CAEA,GAAMC,CAAAA,GAAG,CAAGD,KAAK,CAACE,IAAN,CAAWC,UAAX,CACV,kEADU,CAAZ,CAGA,GAAMC,CAAAA,EAAE,CAAGJ,KAAK,CAACE,IAAN,CAAWC,UAAX,CAAsB,kCAAtB,CAAX,CAEA,MAAO,SAASE,CAAAA,OAAT,CAAiBC,SAAjB,CAA4B,CACjC,GAAMC,CAAAA,MAAM,CAAGP,KAAK,CAACO,MAAN,CAAaC,YAAb,CAA0B,SAA1B,CAAqCP,GAArC,CAAf,CACAM,MAAM,CAACE,KAAP,CAAa,CAAEC,EAAE,CAAEN,EAAN,CAAb,EACAG,MAAM,CAACI,MAAP,CAAcX,KAAK,CAACE,IAAN,CAAWU,YAAX,CAAwBN,SAAxB,CAAd,EACAC,MAAM,CAACM,MAAP,GAEA,MAAOb,CAAAA,KAAK,CAACE,IAAN,CAAWY,QAAX,CAAoBP,MAAM,CAACQ,MAAP,CAAcC,QAAd,EAApB,CAAP,CACD,CAED,MAAO,SAASC,CAAAA,OAAT,CAAiBC,WAAjB,CAA8B,CACnC,GAAMC,CAAAA,SAAS,CAAGnB,KAAK,CAACE,IAAN,CAAWkB,QAAX,CAAoBF,WAApB,CAAlB,CAEA,GAAMG,CAAAA,QAAQ,CAAGrB,KAAK,CAACO,MAAN,CAAae,cAAb,CAA4B,SAA5B,CAAuCrB,GAAvC,CAAjB,CACAoB,QAAQ,CAACZ,KAAT,CAAe,CAAEC,EAAE,CAAEN,EAAN,CAAf,EACAiB,QAAQ,CAACV,MAAT,CAAgBX,KAAK,CAACE,IAAN,CAAWU,YAAX,CAAwBO,SAAxB,CAAhB,EACAE,QAAQ,CAACR,MAAT,GAEA,MAAOQ,CAAAA,QAAQ,CAACN,MAAT,CAAgBQ,IAAvB,CACD","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport forge from \"node-forge\";\r\n\r\nconst KEY = forge.util.hexToBytes(\r\n  \"C8DF55A9BAE39437C383A64B3D0FCBF2BFEDF599C0F4F246128503D0D13370A5\"\r\n);\r\nconst IV = forge.util.hexToBytes(\"7DE549A796BFF62AC8E1FB716C57DF46\");\r\n\r\nexport function encrypt(cleartext) {\r\n  const cipher = forge.cipher.createCipher(\"AES-CBC\", KEY);\r\n  cipher.start({ iv: IV });\r\n  cipher.update(forge.util.createBuffer(cleartext));\r\n  cipher.finish();\r\n\r\n  return forge.util.encode64(cipher.output.getBytes());\r\n}\r\n\r\nexport function decrypt(encrypted64) {\r\n  const encrypted = forge.util.decode64(encrypted64);\r\n\r\n  const decipher = forge.cipher.createDecipher(\"AES-CBC\", KEY);\r\n  decipher.start({ iv: IV });\r\n  decipher.update(forge.util.createBuffer(encrypted));\r\n  decipher.finish();\r\n\r\n  return decipher.output.data;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}