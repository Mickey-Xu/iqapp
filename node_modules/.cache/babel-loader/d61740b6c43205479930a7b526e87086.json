{"ast":null,"code":"import * as api from \"api\";\nimport * as action from \"actions\";\nimport { db } from \"js/db\";\nimport { getIDPToken } from \"./auth\";\nimport { taskDataConversion } from \"js/util\";\nexport const setTasks = data => ({\n  type: \"SET_TASKS\",\n  payload: data\n});\nexport const fetchCreateTask = data => dispatch => {\n  dispatch(action.showLoading());\n  return api.createTask(data).then(response => {\n    //get task\n    dispatch(action.hideLoading());\n  }).catch(error => {\n    if (error.code === 401) {\n      dispatch(action.setAuth(null));\n    }\n\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};\nexport const processingTasks = (type, data, activityParams) => dispatch => {\n  dispatch(action.showLoading());\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  const userInfo = {\n    userId: auth.userName\n  };\n  return api.processingTasks(type.toLocaleUpperCase(), data.taskId, userInfo).then(response => {\n    dispatch(action.hideLoading());\n    db.cache.get(\"tasks\").then(cache => {\n      const resp = response.data.data;\n      const result = taskDataConversion(resp);\n      const lastData = cache.data.map(task => task.taskId === data.taskId ? { ...task,\n        ...result\n      } : task);\n      db.cache.put({\n        id: \"tasks\",\n        data: lastData\n      }).then(() => {\n        dispatch(action.setTasks(lastData));\n      });\n    });\n\n    if (data.taskType === \"COMMISSIONING\" && type === \"finish\") {\n      dispatch(action.updateOrderActivityStatus(activityParams));\n    }\n  }).catch(error => {\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/task.js"],"names":["api","action","db","getIDPToken","taskDataConversion","setTasks","data","type","payload","fetchCreateTask","dispatch","showLoading","createTask","then","response","hideLoading","catch","error","code","setAuth","setError","message","finally","processingTasks","activityParams","auth","JSON","parse","window","localStorage","getItem","userInfo","userId","userName","toLocaleUpperCase","taskId","cache","get","resp","result","lastData","map","task","put","id","taskType","updateOrderActivityStatus"],"mappings":"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","sourcesContent":["import * as api from \"api\";\r\nimport * as action from \"actions\";\r\nimport { db } from \"js/db\";\r\nimport { getIDPToken } from \"./auth\";\r\nimport { taskDataConversion } from \"js/util\";\r\n\r\nexport const setTasks = (data) => ({\r\n  type: \"SET_TASKS\",\r\n  payload: data,\r\n});\r\n\r\nexport const fetchCreateTask = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .createTask(data)\r\n    .then((response) => {\r\n      //get task\r\n      dispatch(action.hideLoading());\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\n\r\nexport const processingTasks = (type, data, activityParams) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n\r\n  const userInfo = {\r\n    userId: auth.userName\r\n  };\r\n\r\n  return api\r\n    .processingTasks(type.toLocaleUpperCase(), data.taskId, userInfo)\r\n    .then((response) => {\r\n      dispatch(action.hideLoading());\r\n      db.cache.get(\"tasks\").then((cache) => {\r\n        const resp = response.data.data;\r\n        const result = taskDataConversion(resp)\r\n        const lastData = cache.data.map(task =>\r\n          task.taskId === data.taskId\r\n            ? { ...task, ...result } \r\n            : task\r\n        );\r\n        db.cache.put({ id: \"tasks\", data: lastData }).then(() => {\r\n          dispatch(action.setTasks(lastData));\r\n        });\r\n      });      \r\n      if (data.taskType === \"COMMISSIONING\" && type === \"finish\") {\r\n        dispatch(action.updateOrderActivityStatus(activityParams));\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.setError(error.message));\r\n    })  \r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}