{"ast":null,"code":"import * as action from \"actions\";\nimport * as api from \"api\";\nimport { db } from \"js/db\";\nimport * as repo from \"js/fetch\";\nimport * as installationStep from \"js/installationStep\";\nimport * as schema from \"js/schema\";\nimport { normalize } from \"normalizr\";\nexport const updateOrderInstallationsMethod = data => dispatch => {\n  dispatch(action.showLoading());\n  return api.updateOrderInstallationsMethod(data).then(response => {\n    const {\n      entities\n    } = normalize(response.data, [schema.orderInstallationMethod]);\n    dispatch(action.setEntities(entities));\n    db.cache.get(\"ordersData\").then(cache => {\n      const selectValue = {};\n      selectValue[data.orderNumbers] = {\n        orderNumbers: data.orderNumbers[0],\n        installationMethod: Number(data.installationMethod)\n      };\n      const datas = { ...cache.data.orderInstallationMethods,\n        ...selectValue\n      };\n      db.cache.put({\n        id: \"ordersData\",\n        data: { ...cache.data,\n          ...{\n            orderInstallationMethods: datas\n          }\n        }\n      });\n    });\n  }).catch(error => {\n    if (error.code === 401) {\n      window.localStorage.removeItem(\"auth\");\n      dispatch(action.setAuth(null));\n    }\n\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};\n/* data = {\r\n    \"projectNo\": \"string\",\r\n    \"orderNo\": \"string\",\r\n    \"activityNo\": \"string\",\r\n    \"type\": 1,      // 1  actual date   2  planned date\r\n    \"date\": \"string\",  // don't required or set it to \"\" when unlock or cancel     otherwise set this like \"2020-11-23\" \r\n    \"combinePdf\": true    \r\n  }\r\n*/\n\nexport const updateOrderActivityStatus = data => dispatch => {\n  dispatch(action.showLoading());\n  return api.updateOrderActivityStatus(data).then(response => {// const { entities } = normalize(response.data, [schema.orderActivity]);\n    // repo.updateOrderActivities(entities).then(() => {\n    //   let newEntities = installationStep.addActivityStepEditable(entities);\n    //   newEntities = installationStep.activityStatusSetNineStepsToFourteen(\n    //     newEntities\n    //   );\n    //   dispatch(action.setEntities(newEntities));\n    //   db.cache.get(\"localInstallationStepsConfirmDate\").then((cache) => {\n    //     if (cache?.data) {\n    //       dispatch(action.setAllLocalInstallationStepConfirmDate(cache.data));\n    //     }\n    //   });\n    // });\n    // if (data.type === 1 && data.combinePdf && data.date !== \"\") {\n    //   db.cache.get(\"documentList\").then((cache) => {\n    //     let V001 = [{ name: `${data.orderNo}_安装检查清单.pdf`, modified: new Date().toISOString().substring(0, 16) }];\n    //     cache.data[data.projectNo][data.orderNo][\"V001\"] = V001\n    //     db.cache.put({ id: \"documentList\", data: cache.data })\n    //   });\n    // }\n  }).catch(error => {\n    if (error.code === 401) {\n      window.localStorage.removeItem(\"auth\");\n      dispatch(action.setAuth(null));\n    }\n\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};\nexport const setMethods = data => ({\n  type: \"SET_METHODS\",\n  payload: data\n});\nexport const updateLocalInstallationStepConfirmDate = data => dispatch => {\n  dispatch(action.showLoading());\n  return api.updateLocalInstallationStepConfirmDate(data).then(response => {\n    const data = response.data;\n\n    if (data.confirmedDate === \"0001-01-01T00:00:00\") {\n      data.confirmedDate = null;\n    }\n\n    repo.updateLocalInstallationStepConfirmDate(data).then(() => {\n      dispatch(action.setLocalInstallationStepConfirmDate(data));\n    });\n  }).catch(error => {\n    if (error.code === 401) {\n      window.localStorage.removeItem(\"auth\");\n      dispatch(action.setAuth(null));\n    }\n\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};\nexport const setLocalInstallationStepConfirmDate = data => ({\n  type: \"SET_LOCAL_INSTALLATION_STEP_CONFIRMDATE\",\n  payload: data\n});\nexport const setAllLocalInstallationStepConfirmDate = data => ({\n  type: \"SET_ALL_LOCAL_INSTALLATION_STEP_CONFIRMDATE\",\n  payload: data\n});","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/orders.js"],"names":["action","api","db","repo","installationStep","schema","normalize","updateOrderInstallationsMethod","data","dispatch","showLoading","then","response","entities","orderInstallationMethod","setEntities","cache","get","selectValue","orderNumbers","installationMethod","Number","datas","orderInstallationMethods","put","id","catch","error","code","window","localStorage","removeItem","setAuth","setError","message","finally","hideLoading","updateOrderActivityStatus","setMethods","type","payload","updateLocalInstallationStepConfirmDate","confirmedDate","setLocalInstallationStepConfirmDate","setAllLocalInstallationStepConfirmDate"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,SAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,EAAT,QAAmB,OAAnB;AACA,OAAO,KAAKC,IAAZ,MAAsB,UAAtB;AACA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA,OAAO,MAAMC,8BAA8B,GAAIC,IAAD,IAAWC,QAAD,IAAc;AACpEA,EAAAA,QAAQ,CAACT,MAAM,CAACU,WAAP,EAAD,CAAR;AACA,SAAOT,GAAG,CACPM,8BADI,CAC2BC,IAD3B,EAEJG,IAFI,CAEEC,QAAD,IAAc;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAeP,SAAS,CAACM,QAAQ,CAACJ,IAAV,EAAgB,CAC5CH,MAAM,CAACS,uBADqC,CAAhB,CAA9B;AAGAL,IAAAA,QAAQ,CAACT,MAAM,CAACe,WAAP,CAAmBF,QAAnB,CAAD,CAAR;AAEAX,IAAAA,EAAE,CAACc,KAAH,CAASC,GAAT,CAAa,YAAb,EAA2BN,IAA3B,CAAiCK,KAAD,IAAW;AACzC,YAAME,WAAW,GAAG,EAApB;AACAA,MAAAA,WAAW,CAACV,IAAI,CAACW,YAAN,CAAX,GAAiC;AAC/BA,QAAAA,YAAY,EAAEX,IAAI,CAACW,YAAL,CAAkB,CAAlB,CADiB;AAE/BC,QAAAA,kBAAkB,EAAEC,MAAM,CAACb,IAAI,CAACY,kBAAN;AAFK,OAAjC;AAIA,YAAME,KAAK,GAAG,EACZ,GAAGN,KAAK,CAACR,IAAN,CAAWe,wBADF;AAEZ,WAAGL;AAFS,OAAd;AAIAhB,MAAAA,EAAE,CAACc,KAAH,CAASQ,GAAT,CAAa;AACXC,QAAAA,EAAE,EAAE,YADO;AAEXjB,QAAAA,IAAI,EAAE,EAAE,GAAGQ,KAAK,CAACR,IAAX;AAAiB,aAAG;AAAEe,YAAAA,wBAAwB,EAAED;AAA5B;AAApB;AAFK,OAAb;AAID,KAdD;AAeD,GAvBI,EAwBJI,KAxBI,CAwBGC,KAAD,IAAW;AAChB,QAAIA,KAAK,CAACC,IAAN,KAAe,GAAnB,EAAwB;AACtBC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,MAA/B;AACAtB,MAAAA,QAAQ,CAACT,MAAM,CAACgC,OAAP,CAAe,IAAf,CAAD,CAAR;AACD;;AACDvB,IAAAA,QAAQ,CAACT,MAAM,CAACiC,QAAP,CAAgBN,KAAK,CAACO,OAAtB,CAAD,CAAR;AACD,GA9BI,EA+BJC,OA/BI,CA+BI,MAAM;AACb1B,IAAAA,QAAQ,CAACT,MAAM,CAACoC,WAAP,EAAD,CAAR;AACD,GAjCI,CAAP;AAkCD,CApCM;AAsCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAI7B,IAAD,IAAWC,QAAD,IAAc;AAC/DA,EAAAA,QAAQ,CAACT,MAAM,CAACU,WAAP,EAAD,CAAR;AACA,SAAOT,GAAG,CACPoC,yBADI,CACsB7B,IADtB,EAEJG,IAFI,CAEEC,QAAD,IAAc,CAClB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,GA1BI,EA2BJc,KA3BI,CA2BGC,KAAD,IAAW;AAChB,QAAIA,KAAK,CAACC,IAAN,KAAe,GAAnB,EAAwB;AACtBC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,MAA/B;AACAtB,MAAAA,QAAQ,CAACT,MAAM,CAACgC,OAAP,CAAe,IAAf,CAAD,CAAR;AACD;;AACDvB,IAAAA,QAAQ,CAACT,MAAM,CAACiC,QAAP,CAAgBN,KAAK,CAACO,OAAtB,CAAD,CAAR;AACD,GAjCI,EAkCJC,OAlCI,CAkCI,MAAM;AACb1B,IAAAA,QAAQ,CAACT,MAAM,CAACoC,WAAP,EAAD,CAAR;AACD,GApCI,CAAP;AAqCD,CAvCM;AAyCP,OAAO,MAAME,UAAU,GAAI9B,IAAD,KAAW;AACnC+B,EAAAA,IAAI,EAAE,aAD6B;AAEnCC,EAAAA,OAAO,EAAEhC;AAF0B,CAAX,CAAnB;AAKP,OAAO,MAAMiC,sCAAsC,GAAIjC,IAAD,IAAWC,QAAD,IAAc;AAC5EA,EAAAA,QAAQ,CAACT,MAAM,CAACU,WAAP,EAAD,CAAR;AACA,SAAOT,GAAG,CACPwC,sCADI,CACmCjC,IADnC,EAEJG,IAFI,CAEEC,QAAD,IAAc;AAClB,UAAMJ,IAAI,GAAGI,QAAQ,CAACJ,IAAtB;;AACA,QAAIA,IAAI,CAACkC,aAAL,KAAuB,qBAA3B,EAAkD;AAChDlC,MAAAA,IAAI,CAACkC,aAAL,GAAqB,IAArB;AACD;;AAEDvC,IAAAA,IAAI,CAACsC,sCAAL,CAA4CjC,IAA5C,EAAkDG,IAAlD,CAAuD,MAAM;AAC3DF,MAAAA,QAAQ,CAACT,MAAM,CAAC2C,mCAAP,CAA2CnC,IAA3C,CAAD,CAAR;AACD,KAFD;AAGD,GAXI,EAYJkB,KAZI,CAYGC,KAAD,IAAW;AAChB,QAAIA,KAAK,CAACC,IAAN,KAAe,GAAnB,EAAwB;AACtBC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,MAA/B;AACAtB,MAAAA,QAAQ,CAACT,MAAM,CAACgC,OAAP,CAAe,IAAf,CAAD,CAAR;AACD;;AACDvB,IAAAA,QAAQ,CAACT,MAAM,CAACiC,QAAP,CAAgBN,KAAK,CAACO,OAAtB,CAAD,CAAR;AACD,GAlBI,EAmBJC,OAnBI,CAmBI,MAAM;AACb1B,IAAAA,QAAQ,CAACT,MAAM,CAACoC,WAAP,EAAD,CAAR;AACD,GArBI,CAAP;AAsBD,CAxBM;AA0BP,OAAO,MAAMO,mCAAmC,GAAInC,IAAD,KAAW;AAC5D+B,EAAAA,IAAI,EAAE,yCADsD;AAE5DC,EAAAA,OAAO,EAAEhC;AAFmD,CAAX,CAA5C;AAKP,OAAO,MAAMoC,sCAAsC,GAAIpC,IAAD,KAAW;AAC/D+B,EAAAA,IAAI,EAAE,6CADyD;AAE/DC,EAAAA,OAAO,EAAEhC;AAFsD,CAAX,CAA/C","sourcesContent":["import * as action from \"actions\";\r\nimport * as api from \"api\";\r\nimport { db } from \"js/db\";\r\nimport * as repo from \"js/fetch\";\r\nimport * as installationStep from \"js/installationStep\";\r\nimport * as schema from \"js/schema\";\r\nimport { normalize } from \"normalizr\";\r\n\r\nexport const updateOrderInstallationsMethod = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .updateOrderInstallationsMethod(data)\r\n    .then((response) => {\r\n      const { entities } = normalize(response.data, [\r\n        schema.orderInstallationMethod,\r\n      ]);\r\n      dispatch(action.setEntities(entities));\r\n\r\n      db.cache.get(\"ordersData\").then((cache) => {\r\n        const selectValue = {};\r\n        selectValue[data.orderNumbers] = {\r\n          orderNumbers: data.orderNumbers[0],\r\n          installationMethod: Number(data.installationMethod),\r\n        };\r\n        const datas = {\r\n          ...cache.data.orderInstallationMethods,\r\n          ...selectValue,\r\n        };\r\n        db.cache.put({\r\n          id: \"ordersData\",\r\n          data: { ...cache.data, ...{ orderInstallationMethods: datas } },\r\n        });\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        window.localStorage.removeItem(\"auth\");\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\n/* data = {\r\n    \"projectNo\": \"string\",\r\n    \"orderNo\": \"string\",\r\n    \"activityNo\": \"string\",\r\n    \"type\": 1,      // 1  actual date   2  planned date\r\n    \"date\": \"string\",  // don't required or set it to \"\" when unlock or cancel     otherwise set this like \"2020-11-23\" \r\n    \"combinePdf\": true    \r\n  }\r\n*/\r\nexport const updateOrderActivityStatus = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .updateOrderActivityStatus(data)\r\n    .then((response) => {\r\n      // const { entities } = normalize(response.data, [schema.orderActivity]);\r\n\r\n      // repo.updateOrderActivities(entities).then(() => {\r\n      //   let newEntities = installationStep.addActivityStepEditable(entities);\r\n      //   newEntities = installationStep.activityStatusSetNineStepsToFourteen(\r\n      //     newEntities\r\n      //   );\r\n      //   dispatch(action.setEntities(newEntities));\r\n      //   db.cache.get(\"localInstallationStepsConfirmDate\").then((cache) => {\r\n      //     if (cache?.data) {\r\n      //       dispatch(action.setAllLocalInstallationStepConfirmDate(cache.data));\r\n      //     }\r\n      //   });\r\n      // });\r\n\r\n      // if (data.type === 1 && data.combinePdf && data.date !== \"\") {\r\n      //   db.cache.get(\"documentList\").then((cache) => {\r\n      //     let V001 = [{ name: `${data.orderNo}_安装检查清单.pdf`, modified: new Date().toISOString().substring(0, 16) }];\r\n      //     cache.data[data.projectNo][data.orderNo][\"V001\"] = V001\r\n      //     db.cache.put({ id: \"documentList\", data: cache.data })\r\n      //   });\r\n      // }\r\n\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        window.localStorage.removeItem(\"auth\");\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\nexport const setMethods = (data) => ({\r\n  type: \"SET_METHODS\",\r\n  payload: data,\r\n});\r\n\r\nexport const updateLocalInstallationStepConfirmDate = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .updateLocalInstallationStepConfirmDate(data)\r\n    .then((response) => {\r\n      const data = response.data;\r\n      if (data.confirmedDate === \"0001-01-01T00:00:00\") {\r\n        data.confirmedDate = null;\r\n      }\r\n\r\n      repo.updateLocalInstallationStepConfirmDate(data).then(() => {\r\n        dispatch(action.setLocalInstallationStepConfirmDate(data));\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        window.localStorage.removeItem(\"auth\");\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\nexport const setLocalInstallationStepConfirmDate = (data) => ({\r\n  type: \"SET_LOCAL_INSTALLATION_STEP_CONFIRMDATE\",\r\n  payload: data,\r\n});\r\n\r\nexport const setAllLocalInstallationStepConfirmDate = (data) => ({\r\n  type: \"SET_ALL_LOCAL_INSTALLATION_STEP_CONFIRMDATE\",\r\n  payload: data,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}