{"ast":null,"code":"import * as action from \"actions\";\nimport * as api from \"api\";\nimport { db } from \"js/db\";\nimport * as schema from \"js/schema\";\nimport { currentRefreshTime, orderActivitiesSort, templatesConverter, getNonConformityConfig } from \"js/util\";\nimport { normalize } from \"normalizr\";\nimport * as repo from \"js/fetch\";\nexport const setAllDataRefreshTime = data => ({\n  type: \"SET_ALL_DATA_REFRESH_TIME\",\n  payload: data\n});\n\nconst setRequestStatus = (name, loading) => {\n  return {\n    type: \"SET_REQUEST_STATUS\",\n    payload: {\n      name,\n      loading\n    }\n  };\n};\n\nexport const closeLoading = name => setRequestStatus(name, \"loaded\");\nexport const openLoading = name => setRequestStatus(name, \"loading\");\nexport const closeLoadingShowFailInfo = name => setRequestStatus(name, \"failToLoad\");\nexport const fetchOrders = (request, type, userInfo) => dispatch => {\n  var _auth;\n\n  let roles = (_auth = auth) === null || _auth === void 0 ? void 0 : _auth.roles;\n  const isSubconTLOrPE = roles.indexOf('Subcon TL') > -1 || roles.indexOf('PE') > -1;\n  dispatch(action.openLoading(\"masterData\")); //设置loading\n\n  api.fetchMasterData((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    const {\n      entities\n    } = normalize(response.data, schema.masterData);\n    entities[\"nonConformityConfig\"] = getNonConformityConfig();\n    db.cache.put({\n      id: \"masterData\",\n      data: entities\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"masterDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n    let projects = entities.workCenters ? Object.keys(entities.workCenters) : [];\n    fetchTasksList(userInfo, dispatch);\n    dispatch(action.openLoading(\"ordersData\"));\n    api.fetchOrdersDataByProjectsAndMerge(projects, 1, userInfo).then(response => {\n      const data = response;\n      data.orderActivities = orderActivitiesSort(data.orderActivities);\n      const {\n        entities\n      } = normalize(response, schema.ordersData);\n      db.cache.put({\n        id: \"ordersData\",\n        data: entities\n      }).then(() => {\n        const param = {\n          projectNos: projects\n        };\n\n        if (userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) {\n          param[\"pNumber\"] = userInfo.pNumber;\n        }\n\n        repo.fetchLocalInstallationStepsConfirmDate(param).then(() => {\n          db.cache.get(\"dataRefreshTime\").then(cache => {\n            const datatime = cache.data;\n            datatime[\"orderDataRefreshTime\"] = currentRefreshTime();\n            db.cache.put({\n              id: \"dataRefreshTime\",\n              data: datatime\n            }).then(() => {\n              dispatch(action.setAllDataRefreshTime(datatime));\n              type === \"all\" && dispatch(action.fetchDocuments(request, userInfo, dispatch));\n            });\n          });\n        });\n      });\n    }).finally(() => {\n      dispatch(action.closeLoading(\"ordersData\"));\n    }).catch(error => {\n      dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\n      dispatch(action.setError(error.message));\n      return false;\n    });\n  }).finally(() => {\n    db.cache.put({\n      id: \"dataVersion\",\n      data: \"lastVersion\"\n    });\n    dispatch(action.closeLoading(\"masterData\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"masterData\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchDocuments = (request, userInfo) => dispatch => {\n  dispatch(action.openLoading(\"document\")); //设置loading\n\n  api.getDocumentList(request).then(response => {\n    return db.cache.put({\n      id: \"documentList\",\n      data: response.data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"documentListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"document\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"document\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n  dispatch(action.openLoading(\"templateList\")); //设置loading\n\n  api.fetchTemplatesData((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    const data = templatesConverter(response.data);\n    db.cache.put({\n      id: \"templatesData\",\n      data: data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"templateListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"templateList\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"templateList\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchTasksList = userInfo => dispatch => {\n  console.log(userInfo); // return false\n\n  dispatch(action.openLoading(\"taskList\")); //设置loading\n\n  api.fetchTasks((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    return db.cache.put({\n      id: \"tasks\",\n      data: response.data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"taskListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"taskList\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"taskList\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/refreshTime.js"],"names":["action","api","db","schema","currentRefreshTime","orderActivitiesSort","templatesConverter","getNonConformityConfig","normalize","repo","setAllDataRefreshTime","data","type","payload","setRequestStatus","name","loading","closeLoading","openLoading","closeLoadingShowFailInfo","fetchOrders","request","userInfo","dispatch","roles","auth","isSubconTLOrPE","indexOf","fetchMasterData","pNumber","then","response","entities","masterData","cache","put","id","get","datatime","projects","workCenters","Object","keys","fetchTasksList","fetchOrdersDataByProjectsAndMerge","orderActivities","ordersData","param","projectNos","fetchLocalInstallationStepsConfirmDate","fetchDocuments","finally","catch","error","setError","message","getDocumentList","fetchTemplatesData","console","log","fetchTasks"],"mappings":"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","sourcesContent":["import * as action from \"actions\";\r\nimport * as api from \"api\";\r\nimport { db } from \"js/db\";\r\nimport * as schema from \"js/schema\";\r\nimport {\r\n  currentRefreshTime,\r\n  orderActivitiesSort,\r\n  templatesConverter,\r\n  getNonConformityConfig\r\n} from \"js/util\";\r\nimport { normalize } from \"normalizr\";\r\nimport * as repo from \"js/fetch\";\r\n\r\nexport const setAllDataRefreshTime = (data) => ({\r\n  type: \"SET_ALL_DATA_REFRESH_TIME\",\r\n  payload: data,\r\n});\r\n\r\nconst setRequestStatus = (name, loading) => {\r\n  return { type: \"SET_REQUEST_STATUS\", payload: { name, loading } };\r\n};\r\n\r\nexport const closeLoading = (name) => setRequestStatus(name, \"loaded\");\r\n\r\nexport const openLoading = (name) => setRequestStatus(name, \"loading\");\r\n\r\nexport const closeLoadingShowFailInfo = (name) =>\r\n  setRequestStatus(name, \"failToLoad\");\r\n\r\nexport const fetchOrders = (request, type, userInfo) => (dispatch) => {\r\n  let roles = auth?.roles;\r\n  const isSubconTLOrPE = roles.indexOf('Subcon TL') > -1 || roles.indexOf('PE') > -1;\r\n\r\n\r\n  dispatch(action.openLoading(\"masterData\")); //设置loading\r\n  api\r\n    .fetchMasterData(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      const { entities } = normalize(response.data, schema.masterData);\r\n      entities[\"nonConformityConfig\"] = getNonConformityConfig()\r\n      db.cache.put({ id: \"masterData\", data: entities }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"masterDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n\r\n      let projects = entities.workCenters\r\n        ? Object.keys(entities.workCenters)\r\n        : [];\r\n      fetchTasksList(userInfo, dispatch);\r\n      dispatch(action.openLoading(\"ordersData\"));\r\n      api\r\n        .fetchOrdersDataByProjectsAndMerge(projects, 1, userInfo)\r\n        .then((response) => {\r\n          const data = response;\r\n          data.orderActivities = orderActivitiesSort(data.orderActivities);\r\n          const { entities } = normalize(response, schema.ordersData);\r\n          db.cache.put({ id: \"ordersData\", data: entities }).then(() => {\r\n            const param = { projectNos: projects }\r\n            if (userInfo?.pNumber) {\r\n              param[\"pNumber\"] = userInfo.pNumber\r\n            }\r\n            repo\r\n              .fetchLocalInstallationStepsConfirmDate(param)\r\n              .then(() => {\r\n                db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n                  const datatime = cache.data;\r\n                  datatime[\"orderDataRefreshTime\"] = currentRefreshTime();\r\n                  db.cache\r\n                    .put({ id: \"dataRefreshTime\", data: datatime })\r\n                    .then(() => {\r\n                      dispatch(action.setAllDataRefreshTime(datatime));\r\n                      type === \"all\" &&\r\n                        dispatch(action.fetchDocuments(request, userInfo, dispatch));\r\n                    });\r\n                });\r\n              });\r\n          });\r\n        })\r\n        .finally(() => {\r\n          dispatch(action.closeLoading(\"ordersData\"));\r\n        })\r\n        .catch((error) => {\r\n          dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\r\n          dispatch(action.setError(error.message));\r\n          return false;\r\n        });\r\n    })\r\n    .finally(() => {\r\n      db.cache.put({ id: \"dataVersion\", data: \"lastVersion\" })\r\n      dispatch(action.closeLoading(\"masterData\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"masterData\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\nexport const fetchDocuments = (request, userInfo) => (dispatch) => {\r\n  dispatch(action.openLoading(\"document\")); //设置loading\r\n  api\r\n    .getDocumentList(request)\r\n    .then((response) => {\r\n      return db.cache\r\n        .put({ id: \"documentList\", data: response.data })\r\n        .then(() => {\r\n          db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n            const datatime = cache.data;\r\n            datatime[\"documentListDataRefreshTime\"] = currentRefreshTime();\r\n            db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n              dispatch(action.setAllDataRefreshTime(datatime));\r\n            });\r\n          });\r\n        });\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"document\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"document\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n\r\n  dispatch(action.openLoading(\"templateList\")); //设置loading\r\n  api\r\n    .fetchTemplatesData(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      const data = templatesConverter(response.data);\r\n      db.cache.put({ id: \"templatesData\", data: data }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"templateListDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n    })\r\n\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"templateList\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"templateList\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\nexport const fetchTasksList = (userInfo) => (dispatch) => {\r\n  console.log(userInfo)\r\n  // return false\r\n  dispatch(action.openLoading(\"taskList\")); //设置loading\r\n  api\r\n    .fetchTasks(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      return db.cache.put({ id: \"tasks\", data: response.data }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"taskListDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"taskList\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"taskList\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}