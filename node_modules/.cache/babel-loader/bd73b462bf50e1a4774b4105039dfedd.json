{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nimport { appendChild, appendQuestionBlock, hasChildNode, getChildNode, getChildNodes, getRequiredAttr, getAttrWithDefault, readQuestionBlock, getValueAttr } from \"./utils/xml\";\nimport { FREE_TEXT_VALUE } from \"./utils/options\";\nimport uuid from \"node-uuid\";\nimport { DEFAULT_LANG } from \"./constants/global\";\nexport default function genericMCIOFactory(fieldType, xmlElementName) {\n  return {\n    serialize(doc, findField, parentNode, field) {\n      const {\n        options,\n        includeOther\n      } = field.settings;\n      const questionBlock = appendQuestionBlock(doc, findField, parentNode, \"string\", field);\n      const radioGroupOrDropdown = appendChild(doc, questionBlock, xmlElementName);\n      options.forEach(({\n        id,\n        nameI18n,\n        value\n      }) => {\n        const optionNode = appendChild(doc, radioGroupOrDropdown, \"option\", null, {\n          value: value,\n          selected: value === field.settings.value\n        });\n        Object.keys(nameI18n).forEach(lang => {\n          if (typeof nameI18n[lang] !== \"undefined\") {\n            appendChild(doc, optionNode, \"text\", nameI18n[lang], {\n              lang\n            });\n          }\n        });\n      });\n\n      if (includeOther) {\n        const optionNode = appendChild(doc, radioGroupOrDropdown, \"option\", null, {\n          value: FREE_TEXT_VALUE,\n          selected: false\n        });\n        appendChild(doc, optionNode, \"textfield\");\n      }\n    },\n\n    canDeserialize(node) {\n      return node.nodeName === \"question_block\" && hasChildNode(node, xmlElementName);\n    },\n\n    deserialize(node) {\n      let field = readQuestionBlock(node, fieldType, \"string\"); // eslint-disable-line prefer-const\n\n      field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\n      field.settings.value = getValueAttr(node, \"value\");\n      const radioOrDropdownNode = getChildNode(node, xmlElementName);\n      const optionNodes = getChildNodes(radioOrDropdownNode, \"option\");\n      let options = []; // eslint-disable-line prefer-const\n\n      field.settings.options = options;\n      field.settings.selectedId = null;\n      field.settings.includeOther = false;\n      optionNodes.forEach(optionNode => {\n        if (hasChildNode(optionNode, \"textfield\")) {\n          const otherTextFieldNode = getChildNode(optionNode, \"textfield\");\n          field.settings.includeOther = true;\n          field.settings.otherOptionText = otherTextFieldNode.textContent;\n          field.settings.otherOptionSelected = getAttrWithDefault(optionNode, \"selected\", \"false\") === \"true\";\n        } else {\n          const optionId = uuid.v4();\n          const nameI18n = getChildNodes(optionNode, \"text\").reduce((acc, textNode) => {\n            return Object.assign({}, acc, {\n              [getAttrWithDefault(textNode, \"lang\", DEFAULT_LANG)]: textNode.textContent\n            });\n          }, {});\n          options.push({\n            id: optionId,\n            nameI18n: nameI18n,\n            value: getRequiredAttr(optionNode, \"value\")\n          });\n\n          if (getAttrWithDefault(optionNode, \"selected\", \"false\") === \"true\") {\n            field.settings.selectedId = optionId;\n          }\n        }\n      });\n\n      if (field.settings.otherOptionSelected) {\n        field.settings.selectedId = null;\n      }\n\n      return field;\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/genericMCIOFactory.js"],"names":["appendChild","appendQuestionBlock","hasChildNode","getChildNode","getChildNodes","getRequiredAttr","getAttrWithDefault","readQuestionBlock","getValueAttr","FREE_TEXT_VALUE","uuid","DEFAULT_LANG","genericMCIOFactory","fieldType","xmlElementName","serialize","doc","findField","parentNode","field","options","includeOther","settings","questionBlock","radioGroupOrDropdown","forEach","id","nameI18n","value","optionNode","selected","Object","keys","lang","canDeserialize","node","nodeName","deserialize","required","radioOrDropdownNode","optionNodes","selectedId","otherTextFieldNode","otherOptionText","textContent","otherOptionSelected","optionId","v4","reduce","acc","textNode","assign","push"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport {\r\n  appendChild,\r\n  appendQuestionBlock,\r\n  hasChildNode,\r\n  getChildNode,\r\n  getChildNodes,\r\n  getRequiredAttr,\r\n  getAttrWithDefault,\r\n  readQuestionBlock,\r\n  getValueAttr,\r\n} from \"./utils/xml\";\r\nimport { FREE_TEXT_VALUE } from \"./utils/options\";\r\nimport uuid from \"node-uuid\";\r\nimport { DEFAULT_LANG } from \"./constants/global\";\r\n\r\nexport default function genericMCIOFactory(fieldType, xmlElementName) {\r\n  return {\r\n    serialize(doc, findField, parentNode, field) {\r\n      const { options, includeOther } = field.settings;\r\n\r\n      const questionBlock = appendQuestionBlock(\r\n        doc,\r\n        findField,\r\n        parentNode,\r\n        \"string\",\r\n        field\r\n      );\r\n\r\n      const radioGroupOrDropdown = appendChild(\r\n        doc,\r\n        questionBlock,\r\n        xmlElementName\r\n      );\r\n\r\n      options.forEach(({ id, nameI18n, value }) => {\r\n        const optionNode = appendChild(\r\n          doc,\r\n          radioGroupOrDropdown,\r\n          \"option\",\r\n          null,\r\n          {\r\n            value: value,\r\n            selected: value === field.settings.value,\r\n          }\r\n        );\r\n\r\n        Object.keys(nameI18n).forEach((lang) => {\r\n          if (typeof nameI18n[lang] !== \"undefined\") {\r\n            appendChild(doc, optionNode, \"text\", nameI18n[lang], { lang });\r\n          }\r\n        });\r\n      });\r\n\r\n      if (includeOther) {\r\n        const optionNode = appendChild(\r\n          doc,\r\n          radioGroupOrDropdown,\r\n          \"option\",\r\n          null,\r\n          {\r\n            value: FREE_TEXT_VALUE,\r\n            selected: false,\r\n          }\r\n        );\r\n        appendChild(doc, optionNode, \"textfield\");\r\n      }\r\n    },\r\n\r\n    canDeserialize(node) {\r\n      return (\r\n        node.nodeName === \"question_block\" && hasChildNode(node, xmlElementName)\r\n      );\r\n    },\r\n\r\n    deserialize(node) {\r\n      let field = readQuestionBlock(node, fieldType, \"string\"); // eslint-disable-line prefer-const\r\n      field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\r\n\r\n      field.settings.value = getValueAttr(node, \"value\");\r\n\r\n      const radioOrDropdownNode = getChildNode(node, xmlElementName);\r\n      const optionNodes = getChildNodes(radioOrDropdownNode, \"option\");\r\n\r\n      let options = []; // eslint-disable-line prefer-const\r\n      field.settings.options = options;\r\n\r\n      field.settings.selectedId = null;\r\n      field.settings.includeOther = false;\r\n\r\n      optionNodes.forEach((optionNode) => {\r\n        if (hasChildNode(optionNode, \"textfield\")) {\r\n          const otherTextFieldNode = getChildNode(optionNode, \"textfield\");\r\n          field.settings.includeOther = true;\r\n          field.settings.otherOptionText = otherTextFieldNode.textContent;\r\n          field.settings.otherOptionSelected =\r\n            getAttrWithDefault(optionNode, \"selected\", \"false\") === \"true\";\r\n        } else {\r\n          const optionId = uuid.v4();\r\n\r\n          const nameI18n = getChildNodes(optionNode, \"text\").reduce(\r\n            (acc, textNode) => {\r\n              return Object.assign({}, acc, {\r\n                [getAttrWithDefault(\r\n                  textNode,\r\n                  \"lang\",\r\n                  DEFAULT_LANG\r\n                )]: textNode.textContent,\r\n              });\r\n            },\r\n            {}\r\n          );\r\n\r\n          options.push({\r\n            id: optionId,\r\n            nameI18n: nameI18n,\r\n            value: getRequiredAttr(optionNode, \"value\"),\r\n          });\r\n\r\n          if (getAttrWithDefault(optionNode, \"selected\", \"false\") === \"true\") {\r\n            field.settings.selectedId = optionId;\r\n          }\r\n        }\r\n      });\r\n\r\n      if (field.settings.otherOptionSelected) {\r\n        field.settings.selectedId = null;\r\n      }\r\n\r\n      return field;\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}