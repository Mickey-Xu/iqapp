{"ast":null,"code":"import axios from \"axios\";\nimport { axiosConfig, blobResponseURLs, formDataURLs } from \"config\";\n\nconst getPostData = (data, useFormData = false) => {\n  if (useFormData) {\n    const formData = new FormData();\n    Object.keys(data).forEach(key => {\n      if (Array.isArray(data[key])) {\n        data[key].forEach(item => formData.append(key, item));\n      } else {\n        formData.append(key, data[key]);\n      }\n    });\n    return formData;\n  } else {\n    return JSON.stringify(data);\n  }\n};\n\nconst getQueryString = data => {\n  let queryString = \"\";\n\n  if (data) {\n    queryString = Object.keys(data).map(key => {\n      let result = `${encodeURIComponent(key)}=`;\n\n      if (Array.isArray(data[key])) {\n        result += data[key].map(v => {\n          return `${encodeURIComponent(v)}`;\n        }).join(`${\"&\" + key + \"=\"}`);\n      } else {\n        result += `${encodeURIComponent(data[key])}`;\n      }\n\n      return result;\n    }).join(\"&\");\n  }\n\n  if (queryString) {\n    return `?${queryString}`;\n  }\n\n  return queryString;\n};\n\nexport const get = (url, data, type) => {\n  const auth = JSON.parse(window.localStorage.getItem(\"idptAuth\"));\n  console.log(auth);\n  return axios.get(url + getQueryString(data), { ...(!type ? axiosConfig : {}),\n    responseType: blobResponseURLs.some(element => url.startsWith(element)) ? \"blob\" : \"json\",\n    headers: type ? {\n      'Authorization': `Bearer ${auth.access_token}`\n    } : {}\n  }).catch(({\n    message,\n    response\n  }) => {\n    if (response.status === 400 || response.status === 403) {\n      return Promise.reject({\n        code: response.status,\n        message: response.data.error.message\n      });\n    }\n\n    if (response.status === 401) {\n      return Promise.reject({\n        code: response.status,\n        message: \"用户凭证已过期，请重新登录\"\n      });\n    }\n\n    return Promise.reject({\n      code: response.status,\n      message\n    });\n  });\n};\nexport const post = (url, data) => {\n  const useFormData = formDataURLs.some(element => url.startsWith(element));\n  const postData = getPostData(data, useFormData);\n  return axios.post(url, postData, { ...axiosConfig,\n    headers: !useFormData ? {\n      \"Content-Type\": \"application/json\"\n    } : {}\n  }).catch(({\n    message,\n    response\n  }) => {\n    if (response.status === 400 || response.status === 403) {\n      return Promise.reject({\n        code: response.status,\n        message: response.data.error.message\n      });\n    }\n\n    if (response.status === 401) {\n      return Promise.reject({\n        code: response.status,\n        message: \"用户凭证已过期，请重新登录\"\n      });\n    }\n\n    return Promise.reject({\n      code: response.status,\n      message\n    });\n  });\n};\nexport const put = (url, data) => {\n  const auth = JSON.parse(window.localStorage.getItem(\"idptAuth\"));\n  return axios.put(url, data, {\n    headers: {\n      'Authorization': `Bearer ${auth.access_token}`\n    }\n  }).catch(({\n    message,\n    response\n  }) => {\n    if (response.status === 400 || response.status === 403) {\n      return Promise.reject({\n        code: response.status,\n        message: response.data.error.message\n      });\n    }\n\n    if (response.status === 401) {\n      return Promise.reject({\n        code: response.status,\n        message: \"用户凭证已过期，请重新登录\"\n      });\n    }\n\n    return Promise.reject({\n      code: response.status,\n      message\n    });\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/api/base.js"],"names":["axios","axiosConfig","blobResponseURLs","formDataURLs","getPostData","data","useFormData","formData","FormData","Object","keys","forEach","key","Array","isArray","item","append","JSON","stringify","getQueryString","queryString","map","result","encodeURIComponent","v","join","get","url","type","auth","parse","window","localStorage","getItem","console","log","responseType","some","element","startsWith","headers","access_token","catch","message","response","status","Promise","reject","code","error","post","postData","put"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { axiosConfig, blobResponseURLs, formDataURLs } from \"config\";\r\n\r\nconst getPostData = (data, useFormData = false) => {\r\n  if (useFormData) {\r\n    const formData = new FormData();\r\n    Object.keys(data).forEach((key) => {\r\n      if (Array.isArray(data[key])) {\r\n        data[key].forEach((item) => formData.append(key, item));\r\n      } else {\r\n        formData.append(key, data[key]);\r\n      }\r\n    });\r\n    return formData;\r\n  } else {\r\n    return JSON.stringify(data);\r\n  }\r\n};\r\n\r\nconst getQueryString = (data) => {\r\n  let queryString = \"\";\r\n\r\n  if (data) {\r\n    queryString = Object.keys(data)\r\n      .map((key) => {\r\n        let result = `${encodeURIComponent(key)}=`;\r\n        if (Array.isArray(data[key])) {\r\n          result += data[key]\r\n            .map((v) => {\r\n              return `${encodeURIComponent(v)}`;\r\n            })\r\n            .join(`${\"&\" + key + \"=\"}`);\r\n        } else {\r\n          result += `${encodeURIComponent(data[key])}`;\r\n        }\r\n        return result;\r\n      })\r\n      .join(\"&\");\r\n  }\r\n\r\n  if (queryString) {\r\n    return `?${queryString}`;\r\n  }\r\n\r\n  return queryString;\r\n};\r\n\r\nexport const get = (url, data, type) => {\r\n  const auth = JSON.parse(window.localStorage.getItem(\"idptAuth\"));\r\n  console.log(auth)\r\n  return axios\r\n    .get(url + getQueryString(data), {\r\n      ...(!type ? axiosConfig:{}),\r\n      responseType: blobResponseURLs.some((element) => url.startsWith(element))\r\n        ? \"blob\"\r\n        : \"json\",\r\n      headers: type? {\r\n        'Authorization': `Bearer ${auth.access_token}`\r\n      }:{}\r\n      \r\n    })\r\n    .catch(({ message, response }) => {\r\n      if (response.status === 400 || response.status === 403) {\r\n        return Promise.reject({\r\n          code: response.status,\r\n          message: response.data.error.message,\r\n        });\r\n      }\r\n\r\n      if (response.status === 401) {\r\n        return Promise.reject({\r\n          code: response.status,\r\n          message: \"用户凭证已过期，请重新登录\",\r\n        });\r\n      }\r\n\r\n      return Promise.reject({ code: response.status, message });\r\n    });\r\n};\r\n\r\nexport const post = (url, data) => {\r\n  const useFormData = formDataURLs.some((element) => url.startsWith(element));\r\n  const postData = getPostData(data, useFormData);\r\n\r\n  return axios\r\n    .post(url, postData, {\r\n      ...axiosConfig,\r\n      headers: !useFormData ? { \"Content-Type\": \"application/json\" } : {},\r\n    })\r\n    .catch(({ message, response }) => {\r\n      if (response.status === 400 || response.status === 403) {\r\n        return Promise.reject({\r\n          code: response.status,\r\n          message: response.data.error.message,\r\n        });\r\n      }\r\n\r\n      if (response.status === 401) {\r\n        return Promise.reject({\r\n          code: response.status,\r\n          message: \"用户凭证已过期，请重新登录\",\r\n        });\r\n      }\r\n\r\n      return Promise.reject({ code: response.status, message });\r\n    });\r\n};\r\n\r\nexport const put = (url, data) => {\r\n  const auth = JSON.parse(window.localStorage.getItem(\"idptAuth\"));\r\n  return axios.put(url, data, {\r\n    headers:  {\r\n      'Authorization': `Bearer ${auth.access_token}`\r\n    } \r\n  })\r\n    .catch(({ message, response }) => {\r\n      if (response.status === 400 || response.status === 403) {\r\n        return Promise.reject({\r\n          code: response.status,\r\n          message: response.data.error.message,\r\n        });\r\n      }\r\n\r\n      if (response.status === 401) {\r\n        return Promise.reject({\r\n          code: response.status,\r\n          message: \"用户凭证已过期，请重新登录\",\r\n        });\r\n      }\r\n\r\n      return Promise.reject({ code: response.status, message });\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}