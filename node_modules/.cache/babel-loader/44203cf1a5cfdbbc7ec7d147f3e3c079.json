{"ast":null,"code":"import * as api from \"api\";\nimport * as action from \"actions\";\nimport { db } from \"js/db\";\nimport { getIDPToken } from \"./auth\";\nimport { formatDateToYMD } from \"js/util\";\nexport const setTasks = data => ({\n  type: \"SET_TASKS\",\n  payload: data\n});\nexport const fetchCreateTask = data => dispatch => {\n  dispatch(action.showLoading());\n  return api.createTask(data).then(response => {\n    //get task\n    dispatch(action.hideLoading());\n  }).catch(error => {\n    if (error.code === 401) {\n      dispatch(action.setAuth(null));\n    }\n\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};\nexport const processingTasks = (type, data) => dispatch => {\n  dispatch(action.showLoading());\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  const userInfo = {\n    userId: auth.userName\n  };\n  return api.processingTasks(type.toLocaleUpperCase(), data.taskId, userInfo).then(response => {\n    dispatch(action.hideLoading());\n    db.cache.get(\"tasks\").then(cache => {\n      const resp = response.data.data;\n      const result = {\n        taskId: resp.id,\n        taskType: resp.type,\n        projectNo: resp.projectNo,\n        orderNo: resp.salesOrderNo,\n        activityNo: resp.activityNo,\n        projectName: resp.projectName,\n        planStartDate: formatDateToYMD(resp.planStartDate),\n        planEndDate: formatDateToYMD(resp.planEndDate),\n        actualStartDate: formatDateToYMD(resp.actualStartDate),\n        actualEndDate: resp.actualEndDate,\n        actualCloseDate: resp.actualClosedDate,\n        statusDesc: resp.statusDesc,\n        status: resp.status === 'NEW' ? 'awaitStart' : resp.status === 'PROCESSING' ? 'awaitComplate' : resp.status === \"FINISHED\" ? 'awaitClose' : 'closed'\n      };\n      const lastData = cache.data.map(task => task.taskId === data.taskId ? { ...task,\n        ...result\n      } : task);\n      db.cache.put({\n        id: \"tasks\",\n        data: lastData\n      }).then(() => {\n        dispatch(action.setTasks(lastData));\n      });\n    });\n  }).catch(error => {\n    console.log(error);\n\n    if (error.code === 401 || error.code === 404) {\n      getIDPToken();\n    }\n\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/task.js"],"names":["api","action","db","getIDPToken","formatDateToYMD","setTasks","data","type","payload","fetchCreateTask","dispatch","showLoading","createTask","then","response","hideLoading","catch","error","code","setAuth","setError","message","finally","processingTasks","auth","JSON","parse","window","localStorage","getItem","userInfo","userId","userName","toLocaleUpperCase","taskId","cache","get","resp","result","id","taskType","projectNo","orderNo","salesOrderNo","activityNo","projectName","planStartDate","planEndDate","actualStartDate","actualEndDate","actualCloseDate","actualClosedDate","statusDesc","status","lastData","map","task","put","console","log"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,OAAO,KAAKC,MAAZ,MAAwB,SAAxB;AACA,SAASC,EAAT,QAAmB,OAAnB;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,eAAT,QAAgC,SAAhC;AAEA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,KAAW;AACjCC,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,OAAO,EAAEF;AAFwB,CAAX,CAAjB;AAKP,OAAO,MAAMG,eAAe,GAAIH,IAAD,IAAWI,QAAD,IAAc;AACrDA,EAAAA,QAAQ,CAACT,MAAM,CAACU,WAAP,EAAD,CAAR;AACA,SAAOX,GAAG,CACPY,UADI,CACON,IADP,EAEJO,IAFI,CAEEC,QAAD,IAAc;AAClB;AACAJ,IAAAA,QAAQ,CAACT,MAAM,CAACc,WAAP,EAAD,CAAR;AACD,GALI,EAMJC,KANI,CAMGC,KAAD,IAAW;AAChB,QAAIA,KAAK,CAACC,IAAN,KAAe,GAAnB,EAAwB;AACtBR,MAAAA,QAAQ,CAACT,MAAM,CAACkB,OAAP,CAAe,IAAf,CAAD,CAAR;AACD;;AACDT,IAAAA,QAAQ,CAACT,MAAM,CAACmB,QAAP,CAAgBH,KAAK,CAACI,OAAtB,CAAD,CAAR;AACD,GAXI,EAYJC,OAZI,CAYI,MAAM;AACbZ,IAAAA,QAAQ,CAACT,MAAM,CAACc,WAAP,EAAD,CAAR;AACD,GAdI,CAAP;AAeD,CAjBM;AAoBP,OAAO,MAAMQ,eAAe,GAAG,CAAChB,IAAD,EAAOD,IAAP,KAAiBI,QAAD,IAAc;AAC3DA,EAAAA,QAAQ,CAACT,MAAM,CAACU,WAAP,EAAD,CAAR;AACA,QAAMa,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAX,CAAb;AAEA,QAAMC,QAAQ,GAAG;AACfC,IAAAA,MAAM,EAAEP,IAAI,CAACQ;AADE,GAAjB;AAIA,SAAOhC,GAAG,CACPuB,eADI,CACYhB,IAAI,CAAC0B,iBAAL,EADZ,EACsC3B,IAAI,CAAC4B,MAD3C,EACmDJ,QADnD,EAEJjB,IAFI,CAEEC,QAAD,IAAc;AAClBJ,IAAAA,QAAQ,CAACT,MAAM,CAACc,WAAP,EAAD,CAAR;AACAb,IAAAA,EAAE,CAACiC,KAAH,CAASC,GAAT,CAAa,OAAb,EAAsBvB,IAAtB,CAA4BsB,KAAD,IAAW;AACpC,YAAME,IAAI,GAAGvB,QAAQ,CAACR,IAAT,CAAcA,IAA3B;AACA,YAAMgC,MAAM,GAAG;AACbJ,QAAAA,MAAM,EAAEG,IAAI,CAACE,EADA;AAEbC,QAAAA,QAAQ,EAAEH,IAAI,CAAC9B,IAFF;AAGbkC,QAAAA,SAAS,EAAEJ,IAAI,CAACI,SAHH;AAIbC,QAAAA,OAAO,EAAEL,IAAI,CAACM,YAJD;AAKbC,QAAAA,UAAU,EAAEP,IAAI,CAACO,UALJ;AAMbC,QAAAA,WAAW,EAAER,IAAI,CAACQ,WANL;AAObC,QAAAA,aAAa,EAAE1C,eAAe,CAACiC,IAAI,CAACS,aAAN,CAPjB;AAQbC,QAAAA,WAAW,EAAE3C,eAAe,CAACiC,IAAI,CAACU,WAAN,CARf;AASbC,QAAAA,eAAe,EAAE5C,eAAe,CAACiC,IAAI,CAACW,eAAN,CATnB;AAUbC,QAAAA,aAAa,EAAEZ,IAAI,CAACY,aAVP;AAWbC,QAAAA,eAAe,EAAEb,IAAI,CAACc,gBAXT;AAYbC,QAAAA,UAAU,EAAEf,IAAI,CAACe,UAZJ;AAabC,QAAAA,MAAM,EAAEhB,IAAI,CAACgB,MAAL,KAAgB,KAAhB,GACN,YADM,GAENhB,IAAI,CAACgB,MAAL,KAAgB,YAAhB,GACE,eADF,GAEEhB,IAAI,CAACgB,MAAL,KAAgB,UAAhB,GACE,YADF,GACiB;AAlBR,OAAf;AAqBA,YAAMC,QAAQ,GAAGnB,KAAK,CAAC7B,IAAN,CAAWiD,GAAX,CAAeC,IAAI,IAClCA,IAAI,CAACtB,MAAL,KAAgB5B,IAAI,CAAC4B,MAArB,GACI,EAAE,GAAGsB,IAAL;AAAW,WAAGlB;AAAd,OADJ,GAEIkB,IAHW,CAAjB;AAKAtD,MAAAA,EAAE,CAACiC,KAAH,CAASsB,GAAT,CAAa;AAAElB,QAAAA,EAAE,EAAE,OAAN;AAAejC,QAAAA,IAAI,EAAEgD;AAArB,OAAb,EAA8CzC,IAA9C,CAAmD,MAAM;AACvDH,QAAAA,QAAQ,CAACT,MAAM,CAACI,QAAP,CAAgBiD,QAAhB,CAAD,CAAR;AACD,OAFD;AAGD,KA/BD;AAgCD,GApCI,EAqCJtC,KArCI,CAqCGC,KAAD,IAAW;AAChByC,IAAAA,OAAO,CAACC,GAAR,CAAY1C,KAAZ;;AACA,QAAIA,KAAK,CAACC,IAAN,KAAe,GAAf,IAAsBD,KAAK,CAACC,IAAN,KAAe,GAAzC,EAA8C;AAC5Cf,MAAAA,WAAW;AACZ;;AACDO,IAAAA,QAAQ,CAACT,MAAM,CAACmB,QAAP,CAAgBH,KAAK,CAACI,OAAtB,CAAD,CAAR;AACD,GA3CI,EA4CJC,OA5CI,CA4CI,MAAM;AACbZ,IAAAA,QAAQ,CAACT,MAAM,CAACc,WAAP,EAAD,CAAR;AACD,GA9CI,CAAP;AA+CD,CAvDM","sourcesContent":["import * as api from \"api\";\r\nimport * as action from \"actions\";\r\nimport { db } from \"js/db\";\r\nimport { getIDPToken } from \"./auth\";\r\nimport { formatDateToYMD } from \"js/util\";\r\n\r\nexport const setTasks = (data) => ({\r\n  type: \"SET_TASKS\",\r\n  payload: data,\r\n});\r\n\r\nexport const fetchCreateTask = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .createTask(data)\r\n    .then((response) => {\r\n      //get task\r\n      dispatch(action.hideLoading());\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\n\r\nexport const processingTasks = (type, data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n\r\n  const userInfo = {\r\n    userId: auth.userName\r\n  };\r\n\r\n  return api\r\n    .processingTasks(type.toLocaleUpperCase(), data.taskId, userInfo)\r\n    .then((response) => {\r\n      dispatch(action.hideLoading());\r\n      db.cache.get(\"tasks\").then((cache) => {\r\n        const resp = response.data.data;\r\n        const result = {\r\n          taskId: resp.id,\r\n          taskType: resp.type,\r\n          projectNo: resp.projectNo,\r\n          orderNo: resp.salesOrderNo,\r\n          activityNo: resp.activityNo,\r\n          projectName: resp.projectName,\r\n          planStartDate: formatDateToYMD(resp.planStartDate),\r\n          planEndDate: formatDateToYMD(resp.planEndDate) ,\r\n          actualStartDate: formatDateToYMD(resp.actualStartDate),\r\n          actualEndDate: resp.actualEndDate,\r\n          actualCloseDate: resp.actualClosedDate,\r\n          statusDesc: resp.statusDesc,\r\n          status: resp.status === 'NEW' ?\r\n            'awaitStart' :\r\n            resp.status === 'PROCESSING' ?\r\n              'awaitComplate' :\r\n              resp.status === \"FINISHED\" ?\r\n                'awaitClose' : 'closed'\r\n        };\r\n        \r\n        const lastData = cache.data.map(task =>\r\n          task.taskId === data.taskId\r\n            ? { ...task, ...result } \r\n            : task\r\n        );\r\n        db.cache.put({ id: \"tasks\", data: lastData }).then(() => {\r\n          dispatch(action.setTasks(lastData));\r\n        });\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.log(error)\r\n      if (error.code === 401 || error.code === 404) {\r\n        getIDPToken()\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })  \r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}