{"ast":null,"code":"import * as api from \"api\";\nimport * as action from \"actions\";\nimport { db } from \"js/db\";\nexport const setTasks = data => ({\n  type: \"SET_TASKS\",\n  payload: data\n});\nexport const fetchCreateTask = data => dispatch => {\n  dispatch(action.showLoading());\n  return api.createTask(data).then(response => {\n    //get task\n    dispatch(action.hideLoading());\n  }).catch(error => {\n    if (error.code === 401) {\n      dispatch(action.setAuth(null));\n    }\n\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};\nexport const processingTasks = (type, data) => dispatch => {\n  dispatch(action.showLoading());\n  return api.processingTasks(type, data.taskId).then(response => {\n    dispatch(action.hideLoading());\n  }).catch(error => {\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    alert(\"rtyuio\");\n    dispatch(action.hideLoading()); // db.cache.put({ id: \"tasks\", data: entities }).then(() => {\n    // });\n\n    db.cache.get(\"tasks\").then(cache => {\n      const data = cache.data;\n      db.cache.put({\n        id: \"dataRefreshTime\",\n        data: data\n      }).then(() => {\n        dispatch(action.setTasks(data));\n      });\n    });\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/task.js"],"names":["api","action","db","setTasks","data","type","payload","fetchCreateTask","dispatch","showLoading","createTask","then","response","hideLoading","catch","error","code","setAuth","setError","message","finally","processingTasks","taskId","alert","cache","get","put","id"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,OAAO,KAAKC,MAAZ,MAAwB,SAAxB;AACA,SAASC,EAAT,QAAmB,OAAnB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,KAAW;AACjCC,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,OAAO,EAAEF;AAFwB,CAAX,CAAjB;AAKP,OAAO,MAAMG,eAAe,GAAIH,IAAD,IAAWI,QAAD,IAAc;AACrDA,EAAAA,QAAQ,CAACP,MAAM,CAACQ,WAAP,EAAD,CAAR;AACA,SAAOT,GAAG,CACPU,UADI,CACON,IADP,EAEJO,IAFI,CAEEC,QAAD,IAAc;AAClB;AACAJ,IAAAA,QAAQ,CAACP,MAAM,CAACY,WAAP,EAAD,CAAR;AACD,GALI,EAMJC,KANI,CAMGC,KAAD,IAAW;AAChB,QAAIA,KAAK,CAACC,IAAN,KAAe,GAAnB,EAAwB;AACtBR,MAAAA,QAAQ,CAACP,MAAM,CAACgB,OAAP,CAAe,IAAf,CAAD,CAAR;AACD;;AACDT,IAAAA,QAAQ,CAACP,MAAM,CAACiB,QAAP,CAAgBH,KAAK,CAACI,OAAtB,CAAD,CAAR;AACD,GAXI,EAYJC,OAZI,CAYI,MAAM;AACbZ,IAAAA,QAAQ,CAACP,MAAM,CAACY,WAAP,EAAD,CAAR;AACD,GAdI,CAAP;AAeD,CAjBM;AAoBP,OAAO,MAAMQ,eAAe,GAAG,CAAChB,IAAD,EAAOD,IAAP,KAAiBI,QAAD,IAAc;AAC3DA,EAAAA,QAAQ,CAACP,MAAM,CAACQ,WAAP,EAAD,CAAR;AACA,SAAOT,GAAG,CACPqB,eADI,CACYhB,IADZ,EACkBD,IAAI,CAACkB,MADvB,EAEJX,IAFI,CAEEC,QAAD,IAAc;AAClBJ,IAAAA,QAAQ,CAACP,MAAM,CAACY,WAAP,EAAD,CAAR;AACD,GAJI,EAKJC,KALI,CAKGC,KAAD,IAAW;AAChBP,IAAAA,QAAQ,CAACP,MAAM,CAACiB,QAAP,CAAgBH,KAAK,CAACI,OAAtB,CAAD,CAAR;AACD,GAPI,EAQJC,OARI,CAQI,MAAM;AACbG,IAAAA,KAAK,CAAC,QAAD,CAAL;AACAf,IAAAA,QAAQ,CAACP,MAAM,CAACY,WAAP,EAAD,CAAR,CAFa,CAGb;AAEA;;AACAX,IAAAA,EAAE,CAACsB,KAAH,CAASC,GAAT,CAAa,OAAb,EAAsBd,IAAtB,CAA4Ba,KAAD,IAAW;AACpC,YAAMpB,IAAI,GAAGoB,KAAK,CAACpB,IAAnB;AAEAF,MAAAA,EAAE,CAACsB,KAAH,CAASE,GAAT,CAAa;AAAEC,QAAAA,EAAE,EAAE,iBAAN;AAAyBvB,QAAAA,IAAI,EAAEA;AAA/B,OAAb,EAAoDO,IAApD,CAAyD,MAAM;AAC7DH,QAAAA,QAAQ,CAACP,MAAM,CAACE,QAAP,CAAgBC,IAAhB,CAAD,CAAR;AAED,OAHD;AAID,KAPD;AAUD,GAxBI,CAAP;AAyBD,CA3BM","sourcesContent":["import * as api from \"api\";\r\nimport * as action from \"actions\";\r\nimport { db } from \"js/db\";\r\n\r\nexport const setTasks = (data) => ({\r\n  type: \"SET_TASKS\",\r\n  payload: data,\r\n});\r\n\r\nexport const fetchCreateTask = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .createTask(data)\r\n    .then((response) => {\r\n      //get task\r\n      dispatch(action.hideLoading());\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\n\r\nexport const processingTasks = (type, data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .processingTasks(type, data.taskId)\r\n    .then((response) => {\r\n      dispatch(action.hideLoading());\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.setError(error.message));\r\n    })  \r\n    .finally(() => {\r\n      alert(\"rtyuio\")\r\n      dispatch(action.hideLoading());\r\n      // db.cache.put({ id: \"tasks\", data: entities }).then(() => {\r\n      \r\n      // });\r\n      db.cache.get(\"tasks\").then((cache) => {\r\n        const data = cache.data;\r\n \r\n        db.cache.put({ id: \"dataRefreshTime\", data: data }).then(() => {\r\n          dispatch(action.setTasks(data));\r\n\r\n        });\r\n      });\r\n\r\n\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}