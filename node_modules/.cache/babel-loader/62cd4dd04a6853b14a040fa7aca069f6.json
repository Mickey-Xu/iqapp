{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\SCF-NI_PM_App\\\\SCF.InstallationQuality\\\\react-client\\\\src\\\\components\\\\OrderList\\\\index.js\";\nimport List from \"@material-ui/core/List\";\nimport OrderListItem from \"components/OrderListItem\";\nimport * as util from \"js/util\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst OrderList = ({\n  orderActivities,\n  pendingList\n}) => {\n  return /*#__PURE__*/React.createElement(List, {\n    style: {\n      position: \"absolute\",\n      backgroundColor: \"#f3f3f3\",\n      height: `calc(100%- 173px)`,\n      width: \"100%\",\n      overflow: \"hidden auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, orderActivities.map(item => {\n    return /*#__PURE__*/React.createElement(OrderListItem, {\n      key: item,\n      number: item,\n      pendingList: pendingList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    orderActivities,\n    overdueActivities,\n    timeHorizon\n  } = state;\n  const {\n    activityNumber,\n    activityStatus\n  } = ownProps;\n  const today = new Date().setHours(0, 0, 0, 0);\n  let overdueList = [];\n  let pendingList = [];\n  let confirmList = [];\n  let currentActivityOverdueList = [];\n\n  const sortOrderActivitiesList = list => {\n    const sortDate = {};\n    list.forEach(key => {\n      sortDate[key] = orderActivities[key].leadingDate ? orderActivities[key].leadingDate : orderActivities[key].leadingEndDate;\n    });\n    return list.sort((a, b) => sortDate[a] ? sortDate[a] > sortDate[b] ? 1 : -1 : 1);\n  };\n\n  Object.keys(orderActivities).forEach(key => {\n    if (orderActivities[key].activityNumber === activityNumber && util.timeHorizonFilter(orderActivities[key].leadingDate ? orderActivities[key].leadingDate : orderActivities[key].leadingStartDate && orderActivities[key].leadingEndDate ? orderActivities[key].leadingEndDate : null, today, timeHorizon)) {\n      if (activityStatus === \"open\") {\n        var _overdueActivities$ac;\n\n        if ((_overdueActivities$ac = overdueActivities[activityNumber]) === null || _overdueActivities$ac === void 0 ? void 0 : _overdueActivities$ac.includes(key)) {\n          overdueList.push(key);\n          overdueList = sortOrderActivitiesList(overdueList);\n        } else if (!orderActivities[key].confirmedDate) {\n          pendingList.push(key);\n          pendingList = sortOrderActivitiesList(pendingList);\n        }\n      } else if (activityStatus === \"confirmed\") {\n        var _overdueActivities$ac2;\n\n        if (!((_overdueActivities$ac2 = overdueActivities[activityNumber]) === null || _overdueActivities$ac2 === void 0 ? void 0 : _overdueActivities$ac2.includes(key)) && orderActivities[key].confirmedDate) {\n          confirmList.push(key);\n          confirmList = sortOrderActivitiesList(confirmList);\n        }\n      } else {\n        var _overdueActivities$ac3;\n\n        if ((_overdueActivities$ac3 = overdueActivities[activityNumber]) === null || _overdueActivities$ac3 === void 0 ? void 0 : _overdueActivities$ac3.includes(key)) {\n          overdueList.push(key);\n          overdueList = sortOrderActivitiesList(overdueList);\n        } else if (orderActivities[key].confirmedDate) {\n          confirmList.push(key);\n          confirmList = sortOrderActivitiesList(confirmList);\n        } else {\n          pendingList.push(key);\n          pendingList = sortOrderActivitiesList(pendingList);\n        }\n      }\n    }\n  });\n  currentActivityOverdueList = overdueList.concat(pendingList, confirmList);\n  return {\n    orderActivities: currentActivityOverdueList,\n    pendingList: pendingList\n  };\n};\n\nexport default connect(mapStateToProps)(OrderList);","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/components/OrderList/index.js"],"names":["List","OrderListItem","util","React","connect","OrderList","orderActivities","pendingList","position","backgroundColor","height","width","overflow","map","item","mapStateToProps","state","ownProps","overdueActivities","timeHorizon","activityNumber","activityStatus","today","Date","setHours","overdueList","confirmList","currentActivityOverdueList","sortOrderActivitiesList","list","sortDate","forEach","key","leadingDate","leadingEndDate","sort","a","b","Object","keys","timeHorizonFilter","leadingStartDate","includes","push","confirmedDate","concat"],"mappings":"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","sourcesContent":["import List from \"@material-ui/core/List\";\r\nimport OrderListItem from \"components/OrderListItem\";\r\nimport * as util from \"js/util\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst OrderList = ({ orderActivities, pendingList }) => {\r\n  return (\r\n    <List\r\n      style={{\r\n        position: \"absolute\",\r\n        backgroundColor: \"#f3f3f3\",\r\n        height: `calc(100%- 173px)`,\r\n        width: \"100%\",\r\n        overflow: \"hidden auto\",\r\n      }}\r\n    >\r\n      {orderActivities.map((item) => {\r\n        return (\r\n          <OrderListItem key={item} number={item} pendingList={pendingList} />\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const { orderActivities, overdueActivities, timeHorizon } = state;\r\n  const { activityNumber, activityStatus } = ownProps;\r\n  const today = new Date().setHours(0, 0, 0, 0);\r\n\r\n  let overdueList = [];\r\n  let pendingList = [];\r\n  let confirmList = [];\r\n  let currentActivityOverdueList = [];\r\n\r\n  const sortOrderActivitiesList = (list) => {\r\n    const sortDate = {};\r\n    list.forEach((key) => {\r\n      sortDate[key] = orderActivities[key].leadingDate\r\n        ? orderActivities[key].leadingDate\r\n        : orderActivities[key].leadingEndDate;\r\n    });\r\n\r\n    return list.sort((a, b) =>\r\n      sortDate[a] ? (sortDate[a] > sortDate[b] ? 1 : -1) : 1\r\n    );\r\n  };\r\n\r\n  Object.keys(orderActivities).forEach((key) => {\r\n    if (\r\n      orderActivities[key].activityNumber === activityNumber &&\r\n      util.timeHorizonFilter(\r\n        orderActivities[key].leadingDate\r\n          ? orderActivities[key].leadingDate\r\n          : orderActivities[key].leadingStartDate &&\r\n            orderActivities[key].leadingEndDate\r\n          ? orderActivities[key].leadingEndDate\r\n          : null,\r\n        today,\r\n        timeHorizon\r\n      )\r\n    ) {\r\n      if (activityStatus === \"open\") {\r\n        if (overdueActivities[activityNumber]?.includes(key)) {\r\n          overdueList.push(key);\r\n          overdueList = sortOrderActivitiesList(overdueList);\r\n        } else if (!orderActivities[key].confirmedDate) {\r\n          pendingList.push(key);\r\n          pendingList = sortOrderActivitiesList(pendingList);\r\n        }\r\n      } else if (activityStatus === \"confirmed\") {\r\n        if (\r\n          !overdueActivities[activityNumber]?.includes(key) &&\r\n          orderActivities[key].confirmedDate\r\n        ) {\r\n          confirmList.push(key);\r\n          confirmList = sortOrderActivitiesList(confirmList);\r\n        }\r\n      } else {\r\n        if (overdueActivities[activityNumber]?.includes(key)) {\r\n          overdueList.push(key);\r\n          overdueList = sortOrderActivitiesList(overdueList);\r\n        } else if (orderActivities[key].confirmedDate) {\r\n          confirmList.push(key);\r\n          confirmList = sortOrderActivitiesList(confirmList);\r\n        } else {\r\n          pendingList.push(key);\r\n          pendingList = sortOrderActivitiesList(pendingList);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  currentActivityOverdueList = overdueList.concat(pendingList, confirmList);\r\n\r\n  return {\r\n    orderActivities: currentActivityOverdueList,\r\n    pendingList: pendingList,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(OrderList);\r\n"]},"metadata":{},"sourceType":"module"}