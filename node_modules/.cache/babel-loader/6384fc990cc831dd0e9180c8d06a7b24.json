{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nimport { appendChild, appendQuestionBlock, hasChildNode, getChildNode, getRequiredAttr, getAttrWithDefault, readQuestionBlock } from \"./utils/xml\";\nexport default {\n  serialize(doc, findField, parentNode, field) {\n    const {\n      min,\n      max,\n      unit,\n      unitFront,\n      prefilledAnswer,\n      value\n    } = field.settings;\n    const questionBlock = appendQuestionBlock(doc, findField, parentNode, \"decimal\", field);\n    appendChild(doc, questionBlock, \"numberfield\", null, {\n      unit,\n      \"unit-in-front\": unitFront,\n      min,\n      max,\n      \"prefilled-answer\": prefilledAnswer,\n      value\n    });\n  },\n\n  canDeserialize(node) {\n    return node.nodeName === \"question_block\" && hasChildNode(node, \"numberfield\");\n  },\n\n  deserialize(node) {\n    let field = readQuestionBlock(node, \"number\", \"decimal\"); // eslint-disable-line prefer-const\n\n    field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\n    const inputNode = getChildNode(node, \"numberfield\");\n    field.settings.unit = getAttrWithDefault(inputNode, \"unit\", \"\");\n    field.settings.unitFront = getAttrWithDefault(inputNode, \"unit-in-front\") === \"true\";\n    field.settings.prefilledAnswer = getAttrWithDefault(inputNode, \"prefilled-answer\", \"\");\n    field.settings.value = getAttrWithDefault(inputNode, \"value\", \"\");\n\n    if (inputNode.textContent && inputNode.textContent.trim() !== \"\") {\n      field.settings.value = Number(inputNode.textContent.trim());\n\n      if (isNaN(field.settings.value)) {\n        console.warn(\"Number field value is not a number: \" + inputNode.textContent);\n      }\n    }\n\n    [\"min\", \"max\"].forEach(attr => {\n      if (inputNode.hasAttribute(attr) && getRequiredAttr(inputNode, attr).trim() !== \"\") {\n        field.settings[attr] = Number(getAttrWithDefault(inputNode, attr, \"0\"));\n      } else {\n        field.settings[attr] = null;\n      }\n    });\n    return field;\n  }\n\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/NumberIO.js"],"names":["appendChild","appendQuestionBlock","hasChildNode","getChildNode","getRequiredAttr","getAttrWithDefault","readQuestionBlock","serialize","doc","findField","parentNode","field","min","max","unit","unitFront","prefilledAnswer","value","settings","questionBlock","canDeserialize","node","nodeName","deserialize","required","inputNode","textContent","trim","Number","isNaN","console","warn","forEach","attr","hasAttribute"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACEA,WADF,EAEEC,mBAFF,EAGEC,YAHF,EAIEC,YAJF,EAKEC,eALF,EAMEC,kBANF,EAOEC,iBAPF,QAQO,aARP;AAUA,eAAe;AACbC,EAAAA,SAAS,CAACC,GAAD,EAAMC,SAAN,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoC;AAC3C,UAAM;AACJC,MAAAA,GADI;AAEJC,MAAAA,GAFI;AAGJC,MAAAA,IAHI;AAIJC,MAAAA,SAJI;AAKJC,MAAAA,eALI;AAMJC,MAAAA;AANI,QAOFN,KAAK,CAACO,QAPV;AASA,UAAMC,aAAa,GAAGlB,mBAAmB,CACvCO,GADuC,EAEvCC,SAFuC,EAGvCC,UAHuC,EAIvC,SAJuC,EAKvCC,KALuC,CAAzC;AAOAX,IAAAA,WAAW,CAACQ,GAAD,EAAMW,aAAN,EAAqB,aAArB,EAAoC,IAApC,EAA0C;AACnDL,MAAAA,IADmD;AAEnD,uBAAiBC,SAFkC;AAGnDH,MAAAA,GAHmD;AAInDC,MAAAA,GAJmD;AAKnD,0BAAoBG,eAL+B;AAMnDC,MAAAA;AANmD,KAA1C,CAAX;AAQD,GA1BY;;AA4BbG,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,WACEA,IAAI,CAACC,QAAL,KAAkB,gBAAlB,IAAsCpB,YAAY,CAACmB,IAAD,EAAO,aAAP,CADpD;AAGD,GAhCY;;AAkCbE,EAAAA,WAAW,CAACF,IAAD,EAAO;AAChB,QAAIV,KAAK,GAAGL,iBAAiB,CAACe,IAAD,EAAO,QAAP,EAAiB,SAAjB,CAA7B,CADgB,CAC0C;;AAC1DV,IAAAA,KAAK,CAACO,QAAN,CAAeM,QAAf,GAA0BpB,eAAe,CAACiB,IAAD,EAAO,UAAP,CAAf,KAAsC,MAAhE;AAEA,UAAMI,SAAS,GAAGtB,YAAY,CAACkB,IAAD,EAAO,aAAP,CAA9B;AACAV,IAAAA,KAAK,CAACO,QAAN,CAAeJ,IAAf,GAAsBT,kBAAkB,CAACoB,SAAD,EAAY,MAAZ,EAAoB,EAApB,CAAxC;AACAd,IAAAA,KAAK,CAACO,QAAN,CAAeH,SAAf,GACEV,kBAAkB,CAACoB,SAAD,EAAY,eAAZ,CAAlB,KAAmD,MADrD;AAEAd,IAAAA,KAAK,CAACO,QAAN,CAAeF,eAAf,GAAiCX,kBAAkB,CACjDoB,SADiD,EAEjD,kBAFiD,EAGjD,EAHiD,CAAnD;AAMAd,IAAAA,KAAK,CAACO,QAAN,CAAeD,KAAf,GAAuBZ,kBAAkB,CAACoB,SAAD,EAAY,OAAZ,EAAqB,EAArB,CAAzC;;AAEA,QAAIA,SAAS,CAACC,WAAV,IAAyBD,SAAS,CAACC,WAAV,CAAsBC,IAAtB,OAAiC,EAA9D,EAAkE;AAChEhB,MAAAA,KAAK,CAACO,QAAN,CAAeD,KAAf,GAAuBW,MAAM,CAACH,SAAS,CAACC,WAAV,CAAsBC,IAAtB,EAAD,CAA7B;;AACA,UAAIE,KAAK,CAAClB,KAAK,CAACO,QAAN,CAAeD,KAAhB,CAAT,EAAiC;AAC/Ba,QAAAA,OAAO,CAACC,IAAR,CACE,yCAAyCN,SAAS,CAACC,WADrD;AAGD;AACF;;AAED,KAAC,KAAD,EAAQ,KAAR,EAAeM,OAAf,CAAwBC,IAAD,IAAU;AAC/B,UACER,SAAS,CAACS,YAAV,CAAuBD,IAAvB,KACA7B,eAAe,CAACqB,SAAD,EAAYQ,IAAZ,CAAf,CAAiCN,IAAjC,OAA4C,EAF9C,EAGE;AACAhB,QAAAA,KAAK,CAACO,QAAN,CAAee,IAAf,IAAuBL,MAAM,CAACvB,kBAAkB,CAACoB,SAAD,EAAYQ,IAAZ,EAAkB,GAAlB,CAAnB,CAA7B;AACD,OALD,MAKO;AACLtB,QAAAA,KAAK,CAACO,QAAN,CAAee,IAAf,IAAuB,IAAvB;AACD;AACF,KATD;AAWA,WAAOtB,KAAP;AACD;;AAvEY,CAAf","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport {\r\n  appendChild,\r\n  appendQuestionBlock,\r\n  hasChildNode,\r\n  getChildNode,\r\n  getRequiredAttr,\r\n  getAttrWithDefault,\r\n  readQuestionBlock,\r\n} from \"./utils/xml\";\r\n\r\nexport default {\r\n  serialize(doc, findField, parentNode, field) {\r\n    const {\r\n      min,\r\n      max,\r\n      unit,\r\n      unitFront,\r\n      prefilledAnswer,\r\n      value,\r\n    } = field.settings;\r\n\r\n    const questionBlock = appendQuestionBlock(\r\n      doc,\r\n      findField,\r\n      parentNode,\r\n      \"decimal\",\r\n      field\r\n    );\r\n    appendChild(doc, questionBlock, \"numberfield\", null, {\r\n      unit,\r\n      \"unit-in-front\": unitFront,\r\n      min,\r\n      max,\r\n      \"prefilled-answer\": prefilledAnswer,\r\n      value,\r\n    });\r\n  },\r\n\r\n  canDeserialize(node) {\r\n    return (\r\n      node.nodeName === \"question_block\" && hasChildNode(node, \"numberfield\")\r\n    );\r\n  },\r\n\r\n  deserialize(node) {\r\n    let field = readQuestionBlock(node, \"number\", \"decimal\"); // eslint-disable-line prefer-const\r\n    field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\r\n\r\n    const inputNode = getChildNode(node, \"numberfield\");\r\n    field.settings.unit = getAttrWithDefault(inputNode, \"unit\", \"\");\r\n    field.settings.unitFront =\r\n      getAttrWithDefault(inputNode, \"unit-in-front\") === \"true\";\r\n    field.settings.prefilledAnswer = getAttrWithDefault(\r\n      inputNode,\r\n      \"prefilled-answer\",\r\n      \"\"\r\n    );\r\n\r\n    field.settings.value = getAttrWithDefault(inputNode, \"value\", \"\");\r\n\r\n    if (inputNode.textContent && inputNode.textContent.trim() !== \"\") {\r\n      field.settings.value = Number(inputNode.textContent.trim());\r\n      if (isNaN(field.settings.value)) {\r\n        console.warn(\r\n          \"Number field value is not a number: \" + inputNode.textContent\r\n        );\r\n      }\r\n    }\r\n\r\n    [\"min\", \"max\"].forEach((attr) => {\r\n      if (\r\n        inputNode.hasAttribute(attr) &&\r\n        getRequiredAttr(inputNode, attr).trim() !== \"\"\r\n      ) {\r\n        field.settings[attr] = Number(getAttrWithDefault(inputNode, attr, \"0\"));\r\n      } else {\r\n        field.settings[attr] = null;\r\n      }\r\n    });\r\n\r\n    return field;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}