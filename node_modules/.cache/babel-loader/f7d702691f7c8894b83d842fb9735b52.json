{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\SCF-NI_PM_App\\\\SCF.InstallationQuality\\\\react-client\\\\src\\\\pages\\\\SynchronizePage\\\\index.js\";\nimport { Box, Button, makeStyles, Typography, TextField } from \"@material-ui/core\";\nimport Divider from \"@material-ui/core/Divider\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Loading from \"assets/img/loading.gif\";\nimport Refresh from \"assets/img/refresh.png\";\nimport { LocalizeContext } from \"i18n\";\nimport { recordRefreshTime, updateOrdersData } from \"js/util\";\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport ConfirmModal from \"components/ConfirmModal\";\nimport AddIcon from '@material-ui/icons/Add';\nimport { showUploadButton } from \"js/util\";\nconst useStyles = makeStyles(({\n  spacing\n}) => ({\n  root: {\n    width: \"100%\",\n    // color: \"#7e7a7a\",\n    fontWeight: \"500\",\n    marginBottom: spacing(2)\n  },\n  box: {\n    width: \"90%\",\n    margin: spacing(2, \"auto\", 0),\n    marginTop: spacing(2)\n  },\n  list: {\n    padding: 0,\n    backgroundColor: \"#fff\"\n  },\n  secondList: {\n    padding: 0,\n    backgroundColor: \"#fff\",\n    paddingLeft: spacing(2)\n  },\n  title: {\n    padding: \"0px 35px 0 16px\",\n    marginTop: spacing(2),\n    backgroundColor: \"#fff\",\n    color: \"#666\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\"\n  },\n  listItem: {\n    backgroundColor: \"#fff\",\n    paddingBottom: spacing(1),\n    position: \"relative\"\n  },\n  listItemText: {\n    padding: 0\n  },\n  loadItem: {\n    fontSize: \"12px\"\n  },\n  loading: {\n    width: spacing(2),\n    position: \"absolute\",\n    right: spacing(1)\n  },\n  refreshTime: {\n    marginLeft: spacing(2)\n  },\n  fail: {\n    color: \"red\"\n  }\n}));\n\nconst SynchronizePage = ({\n  refresh,\n  refreshTime,\n  projects,\n  requestStatus: {\n    documentStatus,\n    masterDataStatus,\n    ordersDataStatus,\n    templateListStatus,\n    taskListStatus\n  },\n  auth,\n  updateOrdersData\n}) => {\n  const i18n = React.useContext(LocalizeContext);\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [SODialog, setSODialog] = useState(false);\n  const [userInfo, setUserInfo] = useState(null);\n  const [SONO, setSONO] = useState({\n    pNumber: auth.personalNumber\n  });\n  const [moduleName, setModuleName] = useState({});\n  const status = [documentStatus, masterDataStatus, ordersDataStatus, templateListStatus, taskListStatus];\n  const data = [{\n    label: i18n.ISNTAPP_SYNCHRONIZE_ORDER,\n    value: \"orders\",\n    list: [{\n      label: i18n.ISNTAPP_SYNCHRONIZE_MASTER_DATA,\n      date: refreshTime.masterDataRefreshTime,\n      loading: masterDataStatus\n    }, {\n      label: i18n.ISNTAPP_SYNCHRONIZE_ORDER_DATA,\n      date: refreshTime.orderDataRefreshTime,\n      loading: ordersDataStatus\n    }]\n  }, {\n    label: i18n.ISNTAPP_SYNCHRONIZE_DOCUMENTS,\n    value: \"documents\",\n    list: [{\n      label: i18n.ISNTAPP_SYNCHRONIZE_DOCUMENTS,\n      date: refreshTime.templateListDataRefreshTime,\n      loading: templateListStatus\n    }, {\n      label: i18n.ISNTAPP_SYNCHRONIZE_DOCUMENT_LIST,\n      date: refreshTime.documentListDataRefreshTime,\n      loading: documentStatus\n    }]\n  }, {\n    label: i18n.ISNTAPP_SYNCHRONIZE_TASK,\n    value: \"task\",\n    list: [{\n      label: i18n.ISNTAPP_SYNCHRONIZE_TASK_LIST,\n      date: refreshTime.taskListDataRefreshTime,\n      loading: taskListStatus\n    }]\n  }];\n\n  const synchroData = (name, projects) => {\n    // if (auth?.roles[0] === \"SL\") {\n    //     setOpen(true)\n    // } else {\n    refresh(name, projects, userInfo); // }\n  };\n\n  const confirmRefresh = () => {\n    // if (!userInfo?.pNumber) {\n    //   return false;\n    // }\n    window.localStorage.setItem(\"peInfo\", JSON.stringify({\n      pNumber: 123456789\n    }));\n    refresh(moduleName.name, moduleName.projects, userInfo);\n    setOpen(false);\n  };\n\n  const confirmSO = () => {\n    setSODialog(false);\n    updateOrdersData(SONO);\n    setSONO(null);\n  };\n\n  return /*#__PURE__*/React.createElement(PrimaryLayout, {\n    name: \"synchronize\",\n    title: i18n.ISNTAPP_SYNC_PAGE,\n    isShowRefreshButton: false,\n    isFetchAll: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, i18n.ISNTAPP_SYNCHRONIZE_PAGE), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, showUploadButton() && /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setSODialog(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AddIcon, {\n    color: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      synchroData(\"all\", projects);\n      setModuleName({\n        name: \"all\",\n        projects: projects\n      });\n    },\n    disabled: status.indexOf(\"loading\") > -1 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: Refresh,\n    width: \"32\",\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  })))), data.map((item, index) => {\n    return /*#__PURE__*/React.createElement(Box, {\n      key: index,\n      className: classes.box,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(List, {\n      className: classes.list,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListItemText, {\n      primary: /*#__PURE__*/React.createElement(Typography, {\n        variant: \"subtitle2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 23\n        }\n      }, item.label),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        synchroData(item.value, projects);\n        setModuleName({\n          name: item.value,\n          projects: projects\n        });\n      },\n      disabled: status.indexOf(\"loading\") > -1 ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: Refresh,\n      width: \"32\",\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(List, {\n      className: classes.secondList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 15\n      }\n    }, item.list.map((item, index) => {\n      return /*#__PURE__*/React.createElement(Box, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ListItem, {\n        className: classes.listItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(ListItemText, {\n        primary: /*#__PURE__*/React.createElement(Typography, {\n          variant: \"body2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 29\n          }\n        }, item.label),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(ListItemText, {\n        primary: /*#__PURE__*/React.createElement(Typography, {\n          className: classes.loadItem,\n          color: \"textSecondary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: item.loading === \"failToLoad\" ? classes.fail : \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 31\n          }\n        }, item.loading === \"loading\" ? i18n.ISNTAPP_LOADING : item.loading === \"loaded\" ? i18n.ISNTAPP_LOADED : i18n.ISNTAPP_FEIL_TO_LOAD), /*#__PURE__*/React.createElement(\"span\", {\n          className: classes.refreshTime,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 31\n          }\n        }, item.loading !== \"loading\" && item.date)),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }\n      }), item.loading === \"loading\" && /*#__PURE__*/React.createElement(\"img\", {\n        src: Loading,\n        className: classes.loading,\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 27\n        }\n      })), index === 0 && item.label !== \"Synchronize Task list\" && /*#__PURE__*/React.createElement(Divider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 67\n        }\n      }));\n    })));\n  })), /*#__PURE__*/React.createElement(ConfirmModal, {\n    open: open,\n    onClose: () => setOpen(false),\n    handleClick: () => confirmRefresh(),\n    children: /*#__PURE__*/React.createElement(TextField, {\n      label: i18n.ISNTAPP_INPUT_PE_JOB_NO,\n      style: {\n        margin: 8\n      },\n      fullWidth: true,\n      margin: \"normal\",\n      onChange: event => setUserInfo({\n        pNumber: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 19\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ConfirmModal, {\n    open: SODialog,\n    onClose: () => setSODialog(false),\n    handleClick: () => (SONO === null || SONO === void 0 ? void 0 : SONO.orderNo) && confirmSO(),\n    children: /*#__PURE__*/React.createElement(TextField, {\n      label: i18n.ISNTAPP_INPUT_ORDER_NO,\n      style: {\n        margin: 8\n      },\n      value: (SONO === null || SONO === void 0 ? void 0 : SONO.orderNo) || \"\",\n      fullWidth: true,\n      margin: \"normal\",\n      onChange: event => setSONO({ ...SONO,\n        orderNo: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 19\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default connect(({\n  projects,\n  refreshTime,\n  requestStatus,\n  auth\n}) => {\n  return {\n    projects,\n    refreshTime,\n    requestStatus,\n    auth\n  };\n}, dispatch => {\n  return {\n    refresh: (name, projects, userInfo) => {\n      recordRefreshTime(dispatch, name, projects, userInfo);\n    },\n    updateOrdersData: soNo => {\n      updateOrdersData(soNo, dispatch);\n    }\n  };\n})(SynchronizePage);","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/pages/SynchronizePage/index.js"],"names":["Box","Button","makeStyles","Typography","TextField","Divider","List","ListItem","ListItemText","Loading","Refresh","LocalizeContext","recordRefreshTime","updateOrdersData","PrimaryLayout","React","useState","connect","ConfirmModal","AddIcon","showUploadButton","useStyles","spacing","root","width","fontWeight","marginBottom","box","margin","marginTop","list","padding","backgroundColor","secondList","paddingLeft","title","color","display","alignItems","justifyContent","listItem","paddingBottom","position","listItemText","loadItem","fontSize","loading","right","refreshTime","marginLeft","fail","SynchronizePage","refresh","projects","requestStatus","documentStatus","masterDataStatus","ordersDataStatus","templateListStatus","taskListStatus","auth","i18n","useContext","classes","open","setOpen","SODialog","setSODialog","userInfo","setUserInfo","SONO","setSONO","pNumber","personalNumber","moduleName","setModuleName","status","data","label","ISNTAPP_SYNCHRONIZE_ORDER","value","ISNTAPP_SYNCHRONIZE_MASTER_DATA","date","masterDataRefreshTime","ISNTAPP_SYNCHRONIZE_ORDER_DATA","orderDataRefreshTime","ISNTAPP_SYNCHRONIZE_DOCUMENTS","templateListDataRefreshTime","ISNTAPP_SYNCHRONIZE_DOCUMENT_LIST","documentListDataRefreshTime","ISNTAPP_SYNCHRONIZE_TASK","ISNTAPP_SYNCHRONIZE_TASK_LIST","taskListDataRefreshTime","synchroData","name","confirmRefresh","window","localStorage","setItem","JSON","stringify","confirmSO","ISNTAPP_SYNC_PAGE","ISNTAPP_SYNCHRONIZE_PAGE","indexOf","map","item","index","ISNTAPP_LOADING","ISNTAPP_LOADED","ISNTAPP_FEIL_TO_LOAD","ISNTAPP_INPUT_PE_JOB_NO","event","target","orderNo","ISNTAPP_INPUT_ORDER_NO","dispatch","soNo"],"mappings":"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","sourcesContent":["import { Box, Button, makeStyles, Typography, TextField } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Loading from \"assets/img/loading.gif\";\r\nimport Refresh from \"assets/img/refresh.png\";\r\nimport { LocalizeContext } from \"i18n\";\r\nimport { recordRefreshTime, updateOrdersData } from \"js/util\";\r\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\r\nimport React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ConfirmModal from \"components/ConfirmModal\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { showUploadButton } from \"js/util\";\r\nconst useStyles = makeStyles(({ spacing }) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    // color: \"#7e7a7a\",\r\n    fontWeight: \"500\",\r\n    marginBottom: spacing(2),\r\n  },\r\n  box: {\r\n    width: \"90%\",\r\n    margin: spacing(2, \"auto\", 0),\r\n    marginTop: spacing(2),\r\n  },\r\n  list: {\r\n    padding: 0,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  secondList: {\r\n    padding: 0,\r\n    backgroundColor: \"#fff\",\r\n    paddingLeft: spacing(2),\r\n  },\r\n  title: {\r\n    padding: \"0px 35px 0 16px\",\r\n    marginTop: spacing(2),\r\n    backgroundColor: \"#fff\",\r\n    color: \"#666\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  listItem: {\r\n    backgroundColor: \"#fff\",\r\n    paddingBottom: spacing(1),\r\n    position: \"relative\",\r\n  },\r\n  listItemText: {\r\n    padding: 0,\r\n  },\r\n\r\n  loadItem: {\r\n    fontSize: \"12px\",\r\n  },\r\n  loading: {\r\n    width: spacing(2),\r\n    position: \"absolute\",\r\n    right: spacing(1),\r\n  },\r\n  refreshTime: {\r\n    marginLeft: spacing(2),\r\n  },\r\n  fail: {\r\n    color: \"red\",\r\n  },\r\n}));\r\n\r\nconst SynchronizePage = ({\r\n  refresh,\r\n  refreshTime,\r\n  projects,\r\n  requestStatus: {\r\n    documentStatus,\r\n    masterDataStatus,\r\n    ordersDataStatus,\r\n    templateListStatus,\r\n    taskListStatus,\r\n  },\r\n  auth,\r\n  updateOrdersData\r\n}) => {\r\n  const i18n = React.useContext(LocalizeContext);\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [SODialog, setSODialog] = useState(false);\r\n  const [userInfo, setUserInfo] = useState(null);\r\n  const [SONO, setSONO] = useState({ pNumber: auth.personalNumber });\r\n  const [moduleName, setModuleName] = useState({});\r\n\r\n  const status = [\r\n    documentStatus,\r\n    masterDataStatus,\r\n    ordersDataStatus,\r\n    templateListStatus,\r\n    taskListStatus,\r\n  ];\r\n  const data = [\r\n    {\r\n      label: i18n.ISNTAPP_SYNCHRONIZE_ORDER,\r\n      value: \"orders\",\r\n      list: [\r\n        {\r\n          label: i18n.ISNTAPP_SYNCHRONIZE_MASTER_DATA,\r\n          date: refreshTime.masterDataRefreshTime,\r\n          loading: masterDataStatus,\r\n        },\r\n        {\r\n          label: i18n.ISNTAPP_SYNCHRONIZE_ORDER_DATA,\r\n          date: refreshTime.orderDataRefreshTime,\r\n          loading: ordersDataStatus,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      label: i18n.ISNTAPP_SYNCHRONIZE_DOCUMENTS,\r\n      value: \"documents\",\r\n      list: [\r\n        {\r\n          label: i18n.ISNTAPP_SYNCHRONIZE_DOCUMENTS,\r\n          date: refreshTime.templateListDataRefreshTime,\r\n          loading: templateListStatus,\r\n        },\r\n        {\r\n          label: i18n.ISNTAPP_SYNCHRONIZE_DOCUMENT_LIST,\r\n          date: refreshTime.documentListDataRefreshTime,\r\n          loading: documentStatus,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      label: i18n.ISNTAPP_SYNCHRONIZE_TASK,\r\n      value: \"task\",\r\n      list: [\r\n        {\r\n          label: i18n.ISNTAPP_SYNCHRONIZE_TASK_LIST,\r\n          date: refreshTime.taskListDataRefreshTime,\r\n          loading: taskListStatus,\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const synchroData = (name, projects) => {\r\n    // if (auth?.roles[0] === \"SL\") {\r\n    //     setOpen(true)\r\n    // } else {\r\n      refresh(name, projects, userInfo)\r\n    // }\r\n  }\r\n\r\n  const confirmRefresh = () => {\r\n    // if (!userInfo?.pNumber) {\r\n    //   return false;\r\n    // }\r\n    window.localStorage.setItem(\"peInfo\", JSON.stringify({ pNumber: 123456789 }));\r\n    refresh(moduleName.name, moduleName.projects, userInfo)\r\n    setOpen(false)\r\n  }\r\n\r\n  const confirmSO = () => {\r\n    setSODialog(false);\r\n    updateOrdersData(SONO);\r\n    setSONO(null);\r\n  }\r\n\r\n  return (\r\n    <PrimaryLayout\r\n      name=\"synchronize\"\r\n      title={i18n.ISNTAPP_SYNC_PAGE}\r\n      isShowRefreshButton={false}\r\n      isFetchAll={false}\r\n    >\r\n      <Box className={classes.root}>\r\n        <Box className={classes.title}>\r\n          <Typography variant=\"h6\">{i18n.ISNTAPP_SYNCHRONIZE_PAGE}</Typography>\r\n          <Box>\r\n            {showUploadButton() &&\r\n              <Button\r\n                onClick={() => setSODialog(true)}\r\n              >\r\n                <AddIcon color=\"error\" />\r\n              </Button>\r\n            }\r\n            <Button\r\n              onClick={() => {\r\n                synchroData(\"all\", projects);\r\n                setModuleName({ name: \"all\", projects: projects })\r\n              }}\r\n              disabled={status.indexOf(\"loading\") > -1 ? true : false}\r\n            >\r\n              <img src={Refresh} width=\"32\" alt=\"\" />\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n\r\n        {data.map((item, index) => {\r\n          return (\r\n            <Box key={index} className={classes.box}>\r\n              <List className={classes.list}>\r\n                <ListItem>\r\n                  <ListItemText\r\n                    primary={\r\n                      <Typography variant=\"subtitle2\">{item.label}</Typography>\r\n                    }\r\n                  />\r\n                  <Button\r\n                    onClick={() => {\r\n                      synchroData(item.value, projects);\r\n                      setModuleName({ name: item.value, projects: projects })\r\n                    }}\r\n                    disabled={status.indexOf(\"loading\") > -1 ? true : false}\r\n                  >\r\n                    <img src={Refresh} width=\"32\" alt=\"\" />\r\n                  </Button>\r\n                </ListItem>\r\n              </List>\r\n              <Divider />\r\n              <List className={classes.secondList}>\r\n                {item.list.map((item, index) => {\r\n                  return (\r\n                    <Box key={index}>\r\n                      <ListItem className={classes.listItem}>\r\n                        <ListItemText\r\n                          primary={\r\n                            <Typography variant=\"body2\">\r\n                              {item.label}\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                        <ListItemText\r\n                          primary={\r\n                            <Typography\r\n                              className={classes.loadItem}\r\n                              color=\"textSecondary\"\r\n                            >\r\n                              <span\r\n                                className={\r\n                                  item.loading === \"failToLoad\"\r\n                                    ? classes.fail\r\n                                    : \"\"\r\n                                }\r\n                              >\r\n                                {item.loading === \"loading\"\r\n                                  ? i18n.ISNTAPP_LOADING\r\n                                  : item.loading === \"loaded\"\r\n                                  ? i18n.ISNTAPP_LOADED\r\n                                  : i18n.ISNTAPP_FEIL_TO_LOAD}\r\n                              </span>\r\n\r\n                              <span className={classes.refreshTime}>\r\n                                {item.loading !== \"loading\" && item.date}\r\n                              </span>\r\n                            </Typography>\r\n                          }\r\n                        />\r\n                        {item.loading === \"loading\" && (\r\n                          <img\r\n                            src={Loading}\r\n                            className={classes.loading}\r\n                            alt=\"\"\r\n                          />\r\n                        )}\r\n                      </ListItem>\r\n                      {index === 0 &&\r\n                        item.label !== \"Synchronize Task list\" && <Divider />}\r\n                    </Box>\r\n                  );\r\n                })}\r\n              </List>\r\n            </Box>\r\n          );\r\n        })}\r\n      </Box>\r\n\r\n      <ConfirmModal\r\n        open={open}\r\n        onClose={()=>setOpen(false)}\r\n        handleClick={() => confirmRefresh()}\r\n        children={<TextField\r\n        label={i18n.ISNTAPP_INPUT_PE_JOB_NO}\r\n        style={{ margin: 8 }}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        onChange={(event) => setUserInfo({pNumber:event.target.value})}\r\n      />}\r\n      />\r\n\r\n      <ConfirmModal\r\n        open={SODialog}\r\n        onClose={() => setSODialog(false)}\r\n        handleClick={() => SONO?.orderNo && confirmSO()}\r\n        children={<TextField\r\n          label={i18n.ISNTAPP_INPUT_ORDER_NO}\r\n          style={{ margin: 8 }}\r\n          value={SONO?.orderNo||\"\"}\r\n          fullWidth\r\n          margin=\"normal\"\r\n          onChange={(event) => setSONO({ ...SONO,orderNo: event.target.value})}\r\n        />}\r\n      />\r\n      </PrimaryLayout>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  ({ projects, refreshTime, requestStatus,auth }) => {\r\n    return { projects, refreshTime, requestStatus,auth };\r\n  },\r\n  (dispatch) => {\r\n    return {\r\n      refresh: (name, projects, userInfo) => {\r\n        recordRefreshTime(dispatch, name, projects, userInfo);\r\n      },\r\n      updateOrdersData: (soNo) => {\r\n        updateOrdersData(soNo, dispatch)\r\n      }\r\n    };\r\n  }\r\n)(SynchronizePage);\r\n"]},"metadata":{},"sourceType":"module"}