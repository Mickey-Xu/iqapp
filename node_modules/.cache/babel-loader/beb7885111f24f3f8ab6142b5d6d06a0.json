{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\SCF-NI_PM_App\\\\SCF.InstallationQuality\\\\react-client\\\\src\\\\components\\\\TemplateForm\\\\Photo\\\\index.js\";\n// import { Box, FormLabel, makeStyles, Typography } from \"@material-ui/core\";\n// import Compressor from \"compressorjs\";\n// import { LocalizeContext } from \"i18n\";\n// import { fillTextToImg } from \"js/util\";\n// import React, { useRef, useState } from \"react\";\n// import { useParams } from 'react-router-dom';\n// const useStyles = makeStyles(({ spacing }) => ({\n//   btm: {\n//     display: \"flex\",\n//     justifyContent: \"space-between\",\n//     margin: spacing(1, 1, 0, 1),\n//   },\n//   root: {\n//     display: \"grid\",\n//     padding: spacing(1, 0),\n//     borderBottom: \" 1px solid #e0e0e0\",\n//     backgroundColor: \"#FFF\",\n//   },\n//   lable: {\n//     margin: spacing(0, 0, 1, 0),\n//     color: \"rgba(0, 0, 0, 0.87)\",\n//   },\n//   inputFile: {\n//     width: \"0.1px\",\n//     height: \"0.1px\",\n//     opacity: 0,\n//     overflow: \"hidden\",\n//     position: \"absolute\",\n//     top: \"0\",\n//     zIndex: -1,\n//   },\n//   file: {\n//     height: \"160px\",\n//     position: \"relative\",\n//     overflow: \"hidden\",\n//     textAlign: \"center\",\n//   },\n// }));\n// export const Photo = (props) => {\n//   const i18n = React.useContext(LocalizeContext);\n//   const classes = useStyles();\n//   const [photoStyle, setPhotoStyle] = useState({\n//     width: \"auto\",\n//     height: \"100%\",\n//   });\n//   const photoEl = useRef(null);\n//   const iptRef = useRef(null);\n//   const projectData = useParams();\n//   const onPhotoChange = (e) => {\n//     const fileReader = new FileReader();\n//     const file = e.target.files[0];\n//     const isCamera = e.target.value.includes('camera');\n//     console.log(isCamera ? '用户选择了拍照' : '用户选择了本地图片');\n//     fileReader.onloadend = (e) => {\n//       const photo = e.target.result; \n//       if (projectData?.activityNo === \"7030\" && props?.identifier === \"photoJ\" && props?.identifier === \"photoP\") {\n//         fillTextToImg(photo, projectData).then((res) => {\n//           props.onChange(res);\n//         })\n//       } else {\n//         props.onChange(photo);\n//       }\n//       const i = new Image();\n//       i.onload = () => {\n//         setPhotoStyle({\n//           // width: photoEl.current.clientWidth,\n//           // height: (photoEl.current.clientWidth / i.width) * i.height,\n//           width: \"auto\",\n//           height: \"100%\",\n//         });\n//       };\n//       i.src = photo;\n//     };\n//     if (file) {\n//       new Compressor(file, {\n//         quality: 0.2,\n//         convertSize: 400000,\n//         success(result) {\n//           fileReader.readAsDataURL(result);\n//         },\n//         error(err) {\n//           console.log(err.message);\n//         },\n//       });\n//     } else {\n//       props.onChange(\"#\");\n//     }\n//   };\n//   return (\n//     <div className={classes.root}>\n//       <Typography variant=\"subtitle2\" className={classes.lable}>\n//         {props.label}\n//       </Typography>\n//       <div>\n//         <input\n//           className={classes.inputFile}\n//           type=\"file\"\n//           accept=\"image/x-png,image/jpeg,image/gif\"\n//           id={props.id}\n//           ref={iptRef}\n//           onChange={onPhotoChange}\n//         />\n//       </div>\n//       <div>\n//         {/* <Typography variant=\"body2\">{props.description}</Typography> */}\n//         <FormLabel required={props.required}>\n//           <Typography\n//             component=\"span\"\n//             variant=\"subtitle2\"\n//             className={classes.lable}\n//           >\n//             {props.description}\n//           </Typography>\n//         </FormLabel>\n//       </div>\n//       <Box border={1} className={classes.file}>\n//         <img src={props.value} style={photoStyle} ref={photoEl} alt=\"\" />\n//       </Box>\n//       <Box className={classes.btm}>\n//         <Typography\n//           color=\"secondary\"\n//           variant=\"body2\"\n//           onClick={() => {\n//             props.onChange(\"#\");\n//             iptRef.current.value = \"\";\n//           }}\n//         >\n//           {i18n.ISNTAPP_DELETE}\n//         </Typography>\n//         <label htmlFor={props.id}>\n//           <Typography color=\"secondary\" variant=\"body2\">\n//             {i18n.ISNTAPP_IMPORT_PICTURES}\n//           </Typography>\n//         </label>\n//       </Box>\n//     </div>\n//   );\n// };\nimport React, { useRef, useState } from 'react';\n\nconst Photo = () => {\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [isCameraActive, setIsCameraActive] = useState(false);\n  const [imageSrc, setImageSrc] = useState(null);\n\n  const startCamera = async () => {\n    if (videoRef.current) {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        videoRef.current.srcObject = stream;\n        videoRef.current.play();\n        setIsCameraActive(true);\n      } catch (error) {\n        console.error(\"Error accessing the camera: \", error);\n      }\n    }\n  };\n\n  const captureImage = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const video = videoRef.current; // 设置 canvas大小\n\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight; // 绘制视频帧到 canvas\n\n    context.drawImage(video, 0, 0, canvas.width, canvas.height); // 可以在 canvas 上添加定位框\n\n    const x = canvas.width / 4; // 定位框 X 坐标\n\n    const y = canvas.height / 4; // 定位框 Y 坐标\n\n    const width = canvas.width / 2; // 定位框宽度\n\n    const height = canvas.height / 2; // 定位框高度\n    // 绘制定位框\n\n    context.strokeStyle = 'red'; // 框的颜色\n\n    context.lineWidth = 5; // 框的宽度\n\n    context.strokeRect(x, y, width, height); // 获取图像数据\n\n    const base64 = canvas.toDataURL('image/png');\n    setImageSrc(base64);\n    stopCamera();\n  };\n\n  const stopCamera = () => {\n    const stream = videoRef.current.srcObject;\n\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n    }\n\n    videoRef.current.srcObject = null;\n    setIsCameraActive(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startCamera,\n    style: {\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, \"\\u542F\\u52A8\\u6444\\u50CF\\u5934\"), isCameraActive ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      display: 'inline-block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    ref: videoRef,\n    style: {\n      width: '300px',\n      height: 'auto',\n      border: '2px solid #fff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: captureImage,\n    style: {\n      marginTop: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, \"\\u62CD\\u7167\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      display: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      top: '25%',\n      left: '25%',\n      width: '50%',\n      height: '50%',\n      border: '2px solid red',\n      pointerEvents: 'none' // 确保框不会干扰点击\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  })) : imageSrc ? /*#__PURE__*/React.createElement(\"img\", {\n    src: imageSrc,\n    alt: \"\\u9884\\u89C8\",\n    style: {\n      maxWidth: '100%',\n      marginTop: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }) : null);\n};\n\nexport default Photo;","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/components/TemplateForm/Photo/index.js"],"names":["React","useRef","useState","Photo","videoRef","canvasRef","isCameraActive","setIsCameraActive","imageSrc","setImageSrc","startCamera","current","stream","navigator","mediaDevices","getUserMedia","video","srcObject","play","error","console","captureImage","canvas","context","getContext","width","videoWidth","height","videoHeight","drawImage","x","y","strokeStyle","lineWidth","strokeRect","base64","toDataURL","stopCamera","getTracks","forEach","track","stop","textAlign","marginBottom","position","display","border","marginTop","top","left","pointerEvents","maxWidth"],"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","sourcesContent":["// import { Box, FormLabel, makeStyles, Typography } from \"@material-ui/core\";\r\n// import Compressor from \"compressorjs\";\r\n// import { LocalizeContext } from \"i18n\";\r\n// import { fillTextToImg } from \"js/util\";\r\n// import React, { useRef, useState } from \"react\";\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const useStyles = makeStyles(({ spacing }) => ({\r\n//   btm: {\r\n//     display: \"flex\",\r\n//     justifyContent: \"space-between\",\r\n//     margin: spacing(1, 1, 0, 1),\r\n//   },\r\n//   root: {\r\n//     display: \"grid\",\r\n//     padding: spacing(1, 0),\r\n//     borderBottom: \" 1px solid #e0e0e0\",\r\n//     backgroundColor: \"#FFF\",\r\n//   },\r\n//   lable: {\r\n//     margin: spacing(0, 0, 1, 0),\r\n//     color: \"rgba(0, 0, 0, 0.87)\",\r\n//   },\r\n//   inputFile: {\r\n//     width: \"0.1px\",\r\n//     height: \"0.1px\",\r\n//     opacity: 0,\r\n//     overflow: \"hidden\",\r\n//     position: \"absolute\",\r\n//     top: \"0\",\r\n//     zIndex: -1,\r\n//   },\r\n//   file: {\r\n//     height: \"160px\",\r\n//     position: \"relative\",\r\n//     overflow: \"hidden\",\r\n//     textAlign: \"center\",\r\n//   },\r\n// }));\r\n\r\n// export const Photo = (props) => {\r\n//   const i18n = React.useContext(LocalizeContext);\r\n//   const classes = useStyles();\r\n//   const [photoStyle, setPhotoStyle] = useState({\r\n//     width: \"auto\",\r\n//     height: \"100%\",\r\n//   });\r\n//   const photoEl = useRef(null);\r\n//   const iptRef = useRef(null);\r\n//   const projectData = useParams();\r\n//   const onPhotoChange = (e) => {\r\n//     const fileReader = new FileReader();\r\n//     const file = e.target.files[0];\r\n//     const isCamera = e.target.value.includes('camera');\r\n//     console.log(isCamera ? '用户选择了拍照' : '用户选择了本地图片');\r\n\r\n//     fileReader.onloadend = (e) => {\r\n//       const photo = e.target.result; \r\n//       if (projectData?.activityNo === \"7030\" && props?.identifier === \"photoJ\" && props?.identifier === \"photoP\") {\r\n//         fillTextToImg(photo, projectData).then((res) => {\r\n//           props.onChange(res);\r\n//         })\r\n//       } else {\r\n//         props.onChange(photo);\r\n//       }\r\n\r\n//       const i = new Image();\r\n//       i.onload = () => {\r\n//         setPhotoStyle({\r\n//           // width: photoEl.current.clientWidth,\r\n//           // height: (photoEl.current.clientWidth / i.width) * i.height,\r\n//           width: \"auto\",\r\n//           height: \"100%\",\r\n//         });\r\n//       };\r\n//       i.src = photo;\r\n//     };\r\n//     if (file) {\r\n//       new Compressor(file, {\r\n//         quality: 0.2,\r\n//         convertSize: 400000,\r\n//         success(result) {\r\n//           fileReader.readAsDataURL(result);\r\n//         },\r\n//         error(err) {\r\n//           console.log(err.message);\r\n//         },\r\n//       });\r\n//     } else {\r\n//       props.onChange(\"#\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className={classes.root}>\r\n//       <Typography variant=\"subtitle2\" className={classes.lable}>\r\n//         {props.label}\r\n//       </Typography>\r\n//       <div>\r\n//         <input\r\n//           className={classes.inputFile}\r\n//           type=\"file\"\r\n//           accept=\"image/x-png,image/jpeg,image/gif\"\r\n//           id={props.id}\r\n//           ref={iptRef}\r\n//           onChange={onPhotoChange}\r\n//         />\r\n//       </div>\r\n//       <div>\r\n//         {/* <Typography variant=\"body2\">{props.description}</Typography> */}\r\n//         <FormLabel required={props.required}>\r\n//           <Typography\r\n//             component=\"span\"\r\n//             variant=\"subtitle2\"\r\n//             className={classes.lable}\r\n//           >\r\n//             {props.description}\r\n//           </Typography>\r\n//         </FormLabel>\r\n//       </div>\r\n//       <Box border={1} className={classes.file}>\r\n//         <img src={props.value} style={photoStyle} ref={photoEl} alt=\"\" />\r\n//       </Box>\r\n//       <Box className={classes.btm}>\r\n//         <Typography\r\n//           color=\"secondary\"\r\n//           variant=\"body2\"\r\n//           onClick={() => {\r\n//             props.onChange(\"#\");\r\n//             iptRef.current.value = \"\";\r\n//           }}\r\n//         >\r\n//           {i18n.ISNTAPP_DELETE}\r\n//         </Typography>\r\n//         <label htmlFor={props.id}>\r\n//           <Typography color=\"secondary\" variant=\"body2\">\r\n//             {i18n.ISNTAPP_IMPORT_PICTURES}\r\n//           </Typography>\r\n//         </label>\r\n//       </Box>\r\n//     </div>\r\n//   );\r\n// };\r\nimport React, { useRef, useState } from 'react';\r\n\r\nconst Photo = () => {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [isCameraActive, setIsCameraActive] = useState(false);\r\n  const [imageSrc, setImageSrc] = useState(null);\r\n\r\n  const startCamera = async () => {\r\n    if (videoRef.current) {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          video: true,\r\n        });\r\n        videoRef.current.srcObject = stream;\r\n        videoRef.current.play();\r\n        setIsCameraActive(true);\r\n      } catch (error) {\r\n        console.error(\"Error accessing the camera: \", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const captureImage = () => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n    const video = videoRef.current;\r\n\r\n    // 设置 canvas大小\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n\r\n    // 绘制视频帧到 canvas\r\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    // 可以在 canvas 上添加定位框\r\n    const x = canvas.width / 4; // 定位框 X 坐标\r\n    const y = canvas.height / 4; // 定位框 Y 坐标\r\n    const width = canvas.width / 2; // 定位框宽度\r\n    const height = canvas.height / 2; // 定位框高度\r\n\r\n    // 绘制定位框\r\n    context.strokeStyle = 'red'; // 框的颜色\r\n    context.lineWidth = 5; // 框的宽度\r\n    context.strokeRect(x, y, width, height);\r\n\r\n    // 获取图像数据\r\n    const base64 = canvas.toDataURL('image/png');\r\n    setImageSrc(base64);\r\n    stopCamera();\r\n  };\r\n\r\n  const stopCamera = () => {\r\n    const stream = videoRef.current.srcObject;\r\n    if (stream) {\r\n      stream.getTracks().forEach(track => track.stop());\r\n    }\r\n    videoRef.current.srcObject = null;\r\n    setIsCameraActive(false);\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <button onClick={startCamera} style={{ marginBottom: '10px' }}>\r\n        启动摄像头\r\n      </button>\r\n      {isCameraActive ? (\r\n        <div style={{ position: 'relative', display: 'inline-block' }}>\r\n          <video ref={videoRef} style={{ width: '300px', height: 'auto', border: '2px solid #fff' }} />\r\n          <button onClick={captureImage} style={{ marginTop: '10px' }}>\r\n            拍照\r\n          </button>\r\n          <canvas ref={canvasRef} style={{ display: 'none' }} />\r\n          {/* 定位框 */}\r\n          <div style={{\r\n            position: 'absolute',\r\n            top: '25%',\r\n            left: '25%',\r\n            width: '50%',\r\n            height: '50%',\r\n            border: '2px solid red',\r\n            pointerEvents: 'none', // 确保框不会干扰点击\r\n          }} />\r\n        </div>\r\n      ) : imageSrc ? (\r\n        <img src={imageSrc} alt=\"预览\" style={{ maxWidth: '100%', marginTop: '10px' }} />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Photo;\r\n"]},"metadata":{},"sourceType":"module"}