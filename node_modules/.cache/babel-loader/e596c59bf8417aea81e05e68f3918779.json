{"ast":null,"code":"import * as action from \"actions\";\nimport * as api from \"api\";\nimport { db } from \"js/db\";\nexport const setUserManual = data => ({\n  type: \"SET_USER_MANUAL_LIST\",\n  payload: data\n});\nexport const getUserManual = () => dispatch => {\n  dispatch(action.showLoading());\n  return api.getUserManual().then(res => {\n    return Promise.resolve(res.data);\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};\nexport const getPdfData = id => dispatch => {\n  dispatch(action.showLoading());\n  return db.cache.get(\"userManualData\").then(cache => {\n    if (cache === null || cache === void 0 ? void 0 : cache.data[id]) {\n      const pdfurl = `data:application/pdf;base64,${cache === null || cache === void 0 ? void 0 : cache.data[id].blob}`;\n      dispatch(action.hideLoading());\n      return Promise.resolve(pdfurl);\n    } else {\n      return api.downLoadPdf(id).then(res => {\n        const userManualData = (cache === null || cache === void 0 ? void 0 : cache.data) || {};\n        userManualData[id] = {\n          name: res.data.name,\n          blob: res.data.blob\n        };\n\n        if (cache === null || cache === void 0 ? void 0 : cache.data) {\n          return db.cache.put({\n            id: \"userManualData\",\n            data: userManualData\n          }).then(() => {\n            const pdfurl = `data:application/pdf;base64,${res.data.blob}`;\n            return Promise.resolve(pdfurl);\n          });\n        } else {\n          return db.cache.put({\n            id: \"userManualData\",\n            data: userManualData\n          }).then(() => {\n            const pdfurl = `data:application/pdf;base64,${res.data.blob}`;\n            return Promise.resolve(pdfurl);\n          });\n        }\n      }).finally(() => {\n        dispatch(action.hideLoading());\n      });\n    }\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/userManual.js"],"names":["action","api","db","setUserManual","data","type","payload","getUserManual","dispatch","showLoading","then","res","Promise","resolve","finally","hideLoading","getPdfData","id","cache","get","pdfurl","blob","downLoadPdf","userManualData","name","put"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,SAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,EAAT,QAAmB,OAAnB;AAEA,OAAO,MAAMC,aAAa,GAAIC,IAAD,KAAW;AACtCC,EAAAA,IAAI,EAAE,sBADgC;AAEtCC,EAAAA,OAAO,EAAEF;AAF6B,CAAX,CAAtB;AAKP,OAAO,MAAMG,aAAa,GAAG,MAAOC,QAAD,IAAc;AAC/CA,EAAAA,QAAQ,CAACR,MAAM,CAACS,WAAP,EAAD,CAAR;AACA,SAAOR,GAAG,CACPM,aADI,GAEJG,IAFI,CAEEC,GAAD,IAAS;AACb,WAAOC,OAAO,CAACC,OAAR,CAAgBF,GAAG,CAACP,IAApB,CAAP;AACD,GAJI,EAKJU,OALI,CAKI,MAAM;AACbN,IAAAA,QAAQ,CAACR,MAAM,CAACe,WAAP,EAAD,CAAR;AACD,GAPI,CAAP;AAQD,CAVM;AAYP,OAAO,MAAMC,UAAU,GAAIC,EAAD,IAAST,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAACR,MAAM,CAACS,WAAP,EAAD,CAAR;AAEA,SAAOP,EAAE,CAACgB,KAAH,CAASC,GAAT,CAAa,gBAAb,EAA+BT,IAA/B,CAAqCQ,KAAD,IAAW;AACpD,QAAIA,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEd,IAAP,CAAYa,EAAZ,CAAJ,EAAqB;AACnB,YAAMG,MAAM,GAAI,+BAA8BF,KAA/B,aAA+BA,KAA/B,uBAA+BA,KAAK,CAAEd,IAAP,CAAYa,EAAZ,EAAgBI,IAAK,EAAnE;AACAb,MAAAA,QAAQ,CAACR,MAAM,CAACe,WAAP,EAAD,CAAR;AACA,aAAOH,OAAO,CAACC,OAAR,CAAgBO,MAAhB,CAAP;AACD,KAJD,MAIO;AACL,aAAOnB,GAAG,CACPqB,WADI,CACQL,EADR,EAEJP,IAFI,CAEEC,GAAD,IAAS;AACb,cAAMY,cAAc,GAAG,CAAAL,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEd,IAAP,KAAe,EAAtC;AACAmB,QAAAA,cAAc,CAACN,EAAD,CAAd,GAAqB;AAAEO,UAAAA,IAAI,EAAEb,GAAG,CAACP,IAAJ,CAASoB,IAAjB;AAAuBH,UAAAA,IAAI,EAAEV,GAAG,CAACP,IAAJ,CAASiB;AAAtC,SAArB;;AAEA,YAAIH,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEd,IAAX,EAAiB;AACf,iBAAOF,EAAE,CAACgB,KAAH,CACJO,GADI,CACA;AACHR,YAAAA,EAAE,EAAE,gBADD;AAEHb,YAAAA,IAAI,EAAEmB;AAFH,WADA,EAKJb,IALI,CAKC,MAAM;AACV,kBAAMU,MAAM,GAAI,+BAA8BT,GAAG,CAACP,IAAJ,CAASiB,IAAK,EAA5D;AACA,mBAAOT,OAAO,CAACC,OAAR,CAAgBO,MAAhB,CAAP;AACD,WARI,CAAP;AASD,SAVD,MAUO;AACL,iBAAOlB,EAAE,CAACgB,KAAH,CACJO,GADI,CACA;AACHR,YAAAA,EAAE,EAAE,gBADD;AAEHb,YAAAA,IAAI,EAAEmB;AAFH,WADA,EAKJb,IALI,CAKC,MAAM;AACV,kBAAMU,MAAM,GAAI,+BAA8BT,GAAG,CAACP,IAAJ,CAASiB,IAAK,EAA5D;AACA,mBAAOT,OAAO,CAACC,OAAR,CAAgBO,MAAhB,CAAP;AACD,WARI,CAAP;AASD;AACF,OA3BI,EA4BJN,OA5BI,CA4BI,MAAM;AACbN,QAAAA,QAAQ,CAACR,MAAM,CAACe,WAAP,EAAD,CAAR;AACD,OA9BI,CAAP;AA+BD;AACF,GAtCM,CAAP;AAuCD,CA1CM","sourcesContent":["import * as action from \"actions\";\r\nimport * as api from \"api\";\r\nimport { db } from \"js/db\";\r\n\r\nexport const setUserManual = (data) => ({\r\n  type: \"SET_USER_MANUAL_LIST\",\r\n  payload: data,\r\n});\r\n\r\nexport const getUserManual = () => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .getUserManual()\r\n    .then((res) => {\r\n      return Promise.resolve(res.data);\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\nexport const getPdfData = (id) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n\r\n  return db.cache.get(\"userManualData\").then((cache) => {\r\n    if (cache?.data[id]) {\r\n      const pdfurl = `data:application/pdf;base64,${cache?.data[id].blob}`;\r\n      dispatch(action.hideLoading());\r\n      return Promise.resolve(pdfurl);\r\n    } else {\r\n      return api\r\n        .downLoadPdf(id)\r\n        .then((res) => {\r\n          const userManualData = cache?.data || {};\r\n          userManualData[id] = { name: res.data.name, blob: res.data.blob };\r\n\r\n          if (cache?.data) {\r\n            return db.cache\r\n              .put({\r\n                id: \"userManualData\",\r\n                data: userManualData,\r\n              })\r\n              .then(() => {\r\n                const pdfurl = `data:application/pdf;base64,${res.data.blob}`;\r\n                return Promise.resolve(pdfurl);\r\n              });\r\n          } else {\r\n            return db.cache\r\n              .put({\r\n                id: \"userManualData\",\r\n                data: userManualData,\r\n              })\r\n              .then(() => {\r\n                const pdfurl = `data:application/pdf;base64,${res.data.blob}`;\r\n                return Promise.resolve(pdfurl);\r\n              });\r\n          }\r\n        })\r\n        .finally(() => {\r\n          dispatch(action.hideLoading());\r\n        });\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}