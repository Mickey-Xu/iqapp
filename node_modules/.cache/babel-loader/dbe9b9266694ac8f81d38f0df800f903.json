{"ast":null,"code":"import * as action from \"actions\";\nimport * as api from \"api\";\nimport { db } from \"js/db\";\nimport * as schema from \"js/schema\";\nimport { currentRefreshTime, orderActivitiesSort, templatesConverter, getNonConformityConfig } from \"js/util\";\nimport { normalize } from \"normalizr\";\nimport * as repo from \"js/fetch\";\nimport store from \"js/store\";\nimport { taskList } from \"api/mockData\";\nexport const setAllDataRefreshTime = data => ({\n  type: \"SET_ALL_DATA_REFRESH_TIME\",\n  payload: data\n});\n\nconst setRequestStatus = (name, loading) => {\n  return {\n    type: \"SET_REQUEST_STATUS\",\n    payload: {\n      name,\n      loading\n    }\n  };\n};\n\nexport const closeLoading = name => setRequestStatus(name, \"loaded\");\nexport const openLoading = name => setRequestStatus(name, \"loading\");\nexport const closeLoadingShowFailInfo = name => setRequestStatus(name, \"failToLoad\");\nexport const fetchOrders = (request, type, userInfo) => dispatch => {\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  let roles = auth === null || auth === void 0 ? void 0 : auth.roles;\n  const isSubconTLOrPE = roles.indexOf('Subcon TL') > -1 || roles.indexOf('PE') > -1;\n  const isEISV = roles.indexOf('SL') > -1;\n  dispatch(action.openLoading(\"masterData\")); //设置loading\n\n  api.fetchMasterData((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    const {\n      entities\n    } = normalize(response.data, schema.masterData);\n    entities[\"nonConformityConfig\"] = getNonConformityConfig();\n    db.cache.put({\n      id: \"masterData\",\n      data: entities\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"masterDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n    let loaded = true;\n    isEISV && dispatch(action.fetchTasksList(request, userInfo, loaded, dispatch)).then(res => {\n      //将返回 order 去重后  传入fetchOrdersData\n      let orders = new Set(res.map(item => item.orderNo));\n      console.log(orders);\n      fetchOrdersData(request, type, userInfo, entities, orders);\n    });\n    isSubconTLOrPE && fetchOrdersData(request, type, userInfo, entities);\n    isSubconTLOrPE && dispatch(action.fetchTasksList(request, userInfo, dispatch));\n  }).finally(() => {\n    db.cache.put({\n      id: \"dataVersion\",\n      data: \"lastVersion\"\n    });\n    dispatch(action.closeLoading(\"masterData\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"masterData\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchDocuments = (request, userInfo) => dispatch => {\n  dispatch(action.openLoading(\"document\")); //设置loading\n\n  api.getDocumentList(request).then(response => {\n    return db.cache.put({\n      id: \"documentList\",\n      data: response.data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"documentListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"document\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"document\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n  dispatch(action.openLoading(\"templateList\")); //设置loading\n\n  api.fetchTemplatesData((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    const data = templatesConverter(response.data);\n    db.cache.put({\n      id: \"templatesData\",\n      data: data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"templateListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"templateList\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"templateList\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchTasksList = (request, userInfo, loaded) => dispatch => {\n  console.log(userInfo); // return false\n\n  dispatch(action.openLoading(\"taskList\")); //设置loading\n\n  return api.fetchTasks((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    let resp = taskList.map(item => {\n      return {\n        taskId: item.Task_ID,\n        taskType: item.Task_type,\n        orderNo: item.Order_no,\n        activityNo: item.ActivityNo,\n        projectName: item.Project_name,\n        planStartDate: item.PlanStartDate,\n        planEndDate: item.PlanEndDate,\n        actualStartDate: item.ActualStartDate,\n        actualEndDate: item.ActualEndDate,\n        actualCloseDate: item.ActualCloseDate,\n        status: item.Status === \"待关闭\" ? 'awaitClose' : item.Status === \"待完成\" ? 'awaitComplate' : 'closed'\n      };\n    });\n    console.log(resp);\n    return db.cache.put({\n      id: \"tasks\",\n      data: resp\n    }).then(() => {\n      return db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"taskListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n        return resp;\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"taskList\"));\n    const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n\n    if ((auth === null || auth === void 0 ? void 0 : auth.roles.indexOf('SL')) > -1 && !loaded) {\n      db.cache.get(\"masterData\").then(cache => {\n        //将返回 order 去重后  传入fetchOrdersData\n        fetchOrdersData(request, '', userInfo, cache === null || cache === void 0 ? void 0 : cache.data);\n      });\n    }\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"taskList\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchOrdersData = (request, type, userInfo, entities, orders) => {\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  let roles = auth === null || auth === void 0 ? void 0 : auth.roles;\n  const isEISV = roles.indexOf('SL') > -1;\n  let projects = entities.workCenters ? Object.keys(entities.workCenters) : [];\n  console.log(entities);\n  const dispatch = store.dispatch;\n  dispatch(action.openLoading(\"ordersData\"));\n\n  if (isEISV) {\n    return api.fetchEISVOrdersData(['19071132', '24805182']).then(response => {\n      const data = response.data;\n      data.orderActivities = orderActivitiesSort(data.orderActivities);\n      const {\n        entities\n      } = normalize(data, schema.ordersData);\n      return db.cache.put({\n        id: \"ordersData\",\n        data: entities\n      }).then(() => {\n        return entities;\n      });\n    }).finally(() => {\n      dispatch(action.closeLoading(\"ordersData\"));\n    }).catch(error => {\n      dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\n      dispatch(action.setError(error.message));\n      return false;\n    });\n  } else {\n    api.fetchOrdersDataByProjectsAndMerge(projects, 1, userInfo).then(response => {\n      const data = response;\n      data.orderActivities = orderActivitiesSort(data.orderActivities);\n      const {\n        entities\n      } = normalize(response, schema.ordersData);\n      db.cache.put({\n        id: \"ordersData\",\n        data: entities\n      }).then(() => {\n        const param = {\n          projectNos: projects\n        };\n\n        if (userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) {\n          param[\"pNumber\"] = userInfo.pNumber;\n        }\n\n        repo.fetchLocalInstallationStepsConfirmDate(param).then(() => {\n          db.cache.get(\"dataRefreshTime\").then(cache => {\n            const datatime = cache.data;\n            datatime[\"orderDataRefreshTime\"] = currentRefreshTime();\n            db.cache.put({\n              id: \"dataRefreshTime\",\n              data: datatime\n            }).then(() => {\n              dispatch(action.setAllDataRefreshTime(datatime));\n              type === \"all\" && dispatch(action.fetchDocuments(request, userInfo, dispatch));\n            });\n          });\n        });\n      });\n    }).finally(() => {\n      dispatch(action.closeLoading(\"ordersData\"));\n    }).catch(error => {\n      dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\n      dispatch(action.setError(error.message));\n      return false;\n    });\n  }\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/refreshTime.js"],"names":["action","api","db","schema","currentRefreshTime","orderActivitiesSort","templatesConverter","getNonConformityConfig","normalize","repo","store","taskList","setAllDataRefreshTime","data","type","payload","setRequestStatus","name","loading","closeLoading","openLoading","closeLoadingShowFailInfo","fetchOrders","request","userInfo","dispatch","auth","JSON","parse","window","localStorage","getItem","roles","isSubconTLOrPE","indexOf","isEISV","fetchMasterData","pNumber","then","response","entities","masterData","cache","put","id","get","datatime","loaded","fetchTasksList","res","orders","Set","map","item","orderNo","console","log","fetchOrdersData","finally","catch","error","setError","message","fetchDocuments","getDocumentList","fetchTemplatesData","fetchTasks","resp","taskId","Task_ID","taskType","Task_type","Order_no","activityNo","ActivityNo","projectName","Project_name","planStartDate","PlanStartDate","planEndDate","PlanEndDate","actualStartDate","ActualStartDate","actualEndDate","ActualEndDate","actualCloseDate","ActualCloseDate","status","Status","projects","workCenters","Object","keys","fetchEISVOrdersData","orderActivities","ordersData","fetchOrdersDataByProjectsAndMerge","param","projectNos","fetchLocalInstallationStepsConfirmDate"],"mappings":"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","sourcesContent":["import * as action from \"actions\";\r\nimport * as api from \"api\";\r\nimport { db } from \"js/db\";\r\nimport * as schema from \"js/schema\";\r\nimport {\r\n  currentRefreshTime,\r\n  orderActivitiesSort,\r\n  templatesConverter,\r\n  getNonConformityConfig\r\n} from \"js/util\";\r\nimport { normalize } from \"normalizr\";\r\nimport * as repo from \"js/fetch\";\r\nimport store from \"js/store\";\r\nimport { taskList } from \"api/mockData\";\r\n\r\nexport const setAllDataRefreshTime = (data) => ({\r\n  type: \"SET_ALL_DATA_REFRESH_TIME\",\r\n  payload: data,\r\n});\r\n\r\nconst setRequestStatus = (name, loading) => {\r\n  return { type: \"SET_REQUEST_STATUS\", payload: { name, loading } };\r\n};\r\n\r\nexport const closeLoading = (name) => setRequestStatus(name, \"loaded\");\r\n\r\nexport const openLoading = (name) => setRequestStatus(name, \"loading\");\r\n\r\nexport const closeLoadingShowFailInfo = (name) =>\r\n  setRequestStatus(name, \"failToLoad\");\r\n\r\nexport const fetchOrders = (request, type, userInfo) => (dispatch) => {\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n  let roles = auth?.roles;\r\n  const isSubconTLOrPE = roles.indexOf('Subcon TL') > -1 || roles.indexOf('PE') > -1;\r\n  const isEISV = roles.indexOf('SL') > -1;\r\n\r\n  dispatch(action.openLoading(\"masterData\")); //设置loading\r\n  api\r\n    .fetchMasterData(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      const { entities } = normalize(response.data, schema.masterData);\r\n      entities[\"nonConformityConfig\"] = getNonConformityConfig()\r\n      db.cache.put({ id: \"masterData\", data: entities }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"masterDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n\r\n      let loaded = true;\r\n      isEISV && dispatch(action.fetchTasksList(request, userInfo, loaded, dispatch)).then((res) => {\r\n        //将返回 order 去重后  传入fetchOrdersData\r\n        let orders = new Set(res.map(item => item.orderNo))\r\n        console.log(orders)\r\n        fetchOrdersData(request, type, userInfo, entities, orders)\r\n      }) \r\n\r\n      isSubconTLOrPE && fetchOrdersData(request, type, userInfo, entities);\r\n\r\n      isSubconTLOrPE && dispatch(action.fetchTasksList(request,userInfo, dispatch));\r\n\r\n    })\r\n    .finally(() => {\r\n      db.cache.put({ id: \"dataVersion\", data: \"lastVersion\" })\r\n      dispatch(action.closeLoading(\"masterData\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"masterData\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\nexport const fetchDocuments = (request, userInfo) => (dispatch) => {\r\n  dispatch(action.openLoading(\"document\")); //设置loading\r\n  api\r\n    .getDocumentList(request)\r\n    .then((response) => {\r\n      return db.cache\r\n        .put({ id: \"documentList\", data: response.data })\r\n        .then(() => {\r\n          db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n            const datatime = cache.data;\r\n            datatime[\"documentListDataRefreshTime\"] = currentRefreshTime();\r\n            db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n              dispatch(action.setAllDataRefreshTime(datatime));\r\n            });\r\n          });\r\n        });\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"document\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"document\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n\r\n  dispatch(action.openLoading(\"templateList\")); //设置loading\r\n  api\r\n    .fetchTemplatesData(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      const data = templatesConverter(response.data);\r\n      db.cache.put({ id: \"templatesData\", data: data }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"templateListDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n    })\r\n\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"templateList\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"templateList\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\nexport const fetchTasksList = (request, userInfo, loaded) => (dispatch) => {\r\n  console.log(userInfo)\r\n  // return false\r\n  dispatch(action.openLoading(\"taskList\")); //设置loading\r\n return api\r\n    .fetchTasks(userInfo?.pNumber ? userInfo : {})\r\n   .then((response) => {\r\n     let resp = taskList.map((item) => {\r\n       return {\r\n         taskId:item.Task_ID,\r\n         taskType:item.Task_type,\r\n         orderNo:item.Order_no,\r\n         activityNo:item.ActivityNo,\r\n         projectName:item.Project_name,\r\n         planStartDate: item.PlanStartDate,\r\n         planEndDate: item.PlanEndDate,\r\n         actualStartDate: item.ActualStartDate,\r\n         actualEndDate: item.ActualEndDate,\r\n         actualCloseDate: item.ActualCloseDate,\r\n         status: item.Status === \"待关闭\" ? 'awaitClose' : item.Status === \"待完成\"?'awaitComplate':'closed'\r\n     }})\r\n     console.log(resp)\r\n \r\n     return db.cache.put({ id: \"tasks\", data: resp }).then(() => {\r\n       return  db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"taskListDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n         return resp\r\n        });\r\n      });\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"taskList\"));\r\n      const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n      if (auth?.roles.indexOf('SL') > -1 && !loaded) {\r\n        db.cache.get(\"masterData\").then((cache) => {\r\n          //将返回 order 去重后  传入fetchOrdersData\r\n          fetchOrdersData(request, '', userInfo, cache?.data)\r\n        })\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"taskList\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\n\r\nexport const fetchOrdersData = (request, type, userInfo, entities, orders) => {\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n  let roles = auth?.roles;\r\n  const isEISV = roles.indexOf('SL') > -1;\r\n  let projects = entities.workCenters\r\n    ? Object.keys(entities.workCenters)\r\n    : [];\r\n  console.log(entities)\r\n  const dispatch = store.dispatch;\r\n  dispatch(action.openLoading(\"ordersData\"));\r\n  if (isEISV) {\r\n    return api.fetchEISVOrdersData(['19071132', '24805182']).then((response) => {\r\n      const data = response.data;\r\n      data.orderActivities = orderActivitiesSort(data.orderActivities);\r\n      const { entities } = normalize(data, schema.ordersData);\r\n      return  db.cache.put({ id: \"ordersData\", data: entities }).then(() => { \r\n        return entities     \r\n      })\r\n    }).finally(() => {\r\n        dispatch(action.closeLoading(\"ordersData\"));\r\n    }).catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    })\r\n    \r\n  } else {\r\n    api\r\n      .fetchOrdersDataByProjectsAndMerge(projects, 1, userInfo)\r\n      .then((response) => {\r\n        const data = response;\r\n        data.orderActivities = orderActivitiesSort(data.orderActivities);\r\n        const { entities } = normalize(response, schema.ordersData);\r\n        db.cache.put({ id: \"ordersData\", data: entities }).then(() => {\r\n          const param = { projectNos: projects }\r\n          if (userInfo?.pNumber) {\r\n            param[\"pNumber\"] = userInfo.pNumber\r\n          }\r\n          repo\r\n            .fetchLocalInstallationStepsConfirmDate(param)\r\n            .then(() => {\r\n              db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n                const datatime = cache.data;\r\n                datatime[\"orderDataRefreshTime\"] = currentRefreshTime();\r\n                db.cache\r\n                  .put({ id: \"dataRefreshTime\", data: datatime })\r\n                  .then(() => {\r\n                    dispatch(action.setAllDataRefreshTime(datatime));\r\n                    type === \"all\" &&\r\n                      dispatch(action.fetchDocuments(request, userInfo, dispatch));\r\n                  });\r\n              });\r\n            });\r\n        });\r\n      })\r\n      .finally(() => {\r\n        dispatch(action.closeLoading(\"ordersData\"));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\r\n        dispatch(action.setError(error.message));\r\n        return false;\r\n      });\r\n  }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}