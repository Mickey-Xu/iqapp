{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\SCF-NI_PM_App\\\\SCF.InstallationQuality\\\\react-client\\\\src\\\\components\\\\TemplateForm\\\\Photo\\\\index.js\";\n// import { Box, FormLabel, makeStyles, Typography } from \"@material-ui/core\";\n// import Compressor from \"compressorjs\";\n// import { LocalizeContext } from \"i18n\";\n// import { fillTextToImg } from \"js/util\";\n// import React, { useRef, useState } from \"react\";\n// import { useParams } from 'react-router-dom';\n// const useStyles = makeStyles(({ spacing }) => ({\n//   btm: {\n//     display: \"flex\",\n//     justifyContent: \"space-between\",\n//     margin: spacing(1, 1, 0, 1),\n//   },\n//   root: {\n//     display: \"grid\",\n//     padding: spacing(1, 0),\n//     borderBottom: \" 1px solid #e0e0e0\",\n//     backgroundColor: \"#FFF\",\n//   },\n//   lable: {\n//     margin: spacing(0, 0, 1, 0),\n//     color: \"rgba(0, 0, 0, 0.87)\",\n//   },\n//   inputFile: {\n//     width: \"0.1px\",\n//     height: \"0.1px\",\n//     opacity: 0,\n//     overflow: \"hidden\",\n//     position: \"absolute\",\n//     top: \"0\",\n//     zIndex: -1,\n//   },\n//   file: {\n//     height: \"160px\",\n//     position: \"relative\",\n//     overflow: \"hidden\",\n//     textAlign: \"center\",\n//   },\n// }));\n// export const Photo = (props) => {\n//   const i18n = React.useContext(LocalizeContext);\n//   const classes = useStyles();\n//   const [photoStyle, setPhotoStyle] = useState({\n//     width: \"auto\",\n//     height: \"100%\",\n//   });\n//   const photoEl = useRef(null);\n//   const iptRef = useRef(null);\n//   const projectData = useParams();\n//   const onPhotoChange = (e) => {\n//     const fileReader = new FileReader();\n//     const file = e.target.files[0];\n//     fileReader.onloadend = (e) => {\n//       const photo = e.target.result;\n//       fillTextToImg(photo, projectData).then((res) => {\n//         props.onChange(res);\n//        })\n//       const i = new Image();\n//       i.onload = () => {\n//         setPhotoStyle({\n//           // width: photoEl.current.clientWidth,\n//           // height: (photoEl.current.clientWidth / i.width) * i.height,\n//           width: \"auto\",\n//           height: \"100%\",\n//         });\n//       };\n//       i.src = photo;\n//     };\n//     if (file) {\n//       new Compressor(file, {\n//         quality: 0.2,\n//         convertSize: 400000,\n//         success(result) {\n//           fileReader.readAsDataURL(result);\n//         },\n//         error(err) {\n//           console.log(err.message);\n//         },\n//       });\n//     } else {\n//       props.onChange(\"#\");\n//     }\n//   };\n//   return (\n//     <div className={classes.root}>\n//       <Typography variant=\"subtitle2\" className={classes.lable}>\n//         {props.label}\n//       </Typography>\n//       <div>\n//         <input\n//           className={classes.inputFile}\n//           type=\"file\"\n//           accept=\"image/x-png,image/jpeg,image/gif\"\n//           id={props.id}\n//           ref={iptRef}\n//           onChange={onPhotoChange}\n//         />\n//       </div>\n//       <div>\n//         {/* <Typography variant=\"body2\">{props.description}</Typography> */}\n//         <FormLabel required={props.required}>\n//           <Typography\n//             component=\"span\"\n//             variant=\"subtitle2\"\n//             className={classes.lable}\n//           >\n//             {props.description}\n//           </Typography>\n//         </FormLabel>\n//       </div>\n//       <Box border={1} className={classes.file}>\n//         <img src={props.value} style={photoStyle} ref={photoEl} alt=\"\" />\n//       </Box>\n//       <Box className={classes.btm}>\n//         <Typography\n//           color=\"secondary\"\n//           variant=\"body2\"\n//           onClick={() => {\n//             props.onChange(\"#\");\n//             iptRef.current.value = \"\";\n//           }}\n//         >\n//           {i18n.ISNTAPP_DELETE}\n//         </Typography>\n//         <label htmlFor={props.id}>\n//           <Typography color=\"secondary\" variant=\"body2\">\n//             {i18n.ISNTAPP_IMPORT_PICTURES}\n//           </Typography>\n//         </label>\n//       </Box>\n//     </div>\n//   );\n// };\nimport React, { useEffect, useState } from 'react';\nexport const Photo = ({\n  lat,\n  lng\n}) => {\n  const [address, setAddress] = useState('');\n  const location = {\n    longitude: \"121.197237\",\n    latitude: \"31.449172\"\n  };\n  useEffect(() => {\n    if (lat && lng) {\n      const map = new window.BMap.Map('container');\n      const geocoder = new window.BMap.Geocoder();\n      const point = new window.BMap.Point(\"121.197237\", \"31.449172\");\n      geocoder.getLocation(point, result => {\n        if (result) {\n          setAddress(result.address);\n        } else {\n          setAddress('无法获取地址');\n        }\n      });\n    }\n  }, [lat, lng]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"container\",\n    style: {\n      height: '0',\n      width: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, \"\\u5730\\u5740: \", address));\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/components/TemplateForm/Photo/index.js"],"names":["React","useEffect","useState","Photo","lat","lng","address","setAddress","location","longitude","latitude","map","window","BMap","Map","geocoder","Geocoder","point","Point","getLocation","result","height","width"],"mappingsgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAO,MAAMC,KAAK,GAAI,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAD,KAAkB;AACtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMM,QAAQ,GAAE;AAAEC,IAAAA,SAAS,EAAE,YAAb;AAA2BC,IAAAA,QAAQ,EAAE;AAArC,GAAhB;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,GAAG,IAAIC,GAAX,EAAgB;AACd,YAAMM,GAAG,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,GAAhB,CAAoB,WAApB,CAAZ;AACA,YAAMC,QAAQ,GAAG,IAAIH,MAAM,CAACC,IAAP,CAAYG,QAAhB,EAAjB;AAEA,YAAMC,KAAK,GAAG,IAAIL,MAAM,CAACC,IAAP,CAAYK,KAAhB,CAAsB,YAAtB,EAAoC,WAApC,CAAd;AACAH,MAAAA,QAAQ,CAACI,WAAT,CAAqBF,KAArB,EAA6BG,MAAD,IAAY;AACtC,YAAIA,MAAJ,EAAY;AACVb,UAAAA,UAAU,CAACa,MAAM,CAACd,OAAR,CAAV;AACD,SAFD,MAEO;AACLC,UAAAA,UAAU,CAAC,QAAD,CAAV;AACD;AACF,OAND;AAOD;AACF,GAdQ,EAcN,CAACH,GAAD,EAAMC,GAAN,CAdM,CAAT;AAgBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,EAAE,EAAC,WAAR;AAAoB,IAAA,KAAK,EAAE;AAAEgB,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAQhB,OAAR,CAFF,CADF;AAMD,CAzBM","sourcesContent":["// import { Box, FormLabel, makeStyles, Typography } from \"@material-ui/core\";\r\n// import Compressor from \"compressorjs\";\r\n// import { LocalizeContext } from \"i18n\";\r\n// import { fillTextToImg } from \"js/util\";\r\n// import React, { useRef, useState } from \"react\";\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const useStyles = makeStyles(({ spacing }) => ({\r\n//   btm: {\r\n//     display: \"flex\",\r\n//     justifyContent: \"space-between\",\r\n//     margin: spacing(1, 1, 0, 1),\r\n//   },\r\n//   root: {\r\n//     display: \"grid\",\r\n//     padding: spacing(1, 0),\r\n//     borderBottom: \" 1px solid #e0e0e0\",\r\n//     backgroundColor: \"#FFF\",\r\n//   },\r\n//   lable: {\r\n//     margin: spacing(0, 0, 1, 0),\r\n//     color: \"rgba(0, 0, 0, 0.87)\",\r\n//   },\r\n//   inputFile: {\r\n//     width: \"0.1px\",\r\n//     height: \"0.1px\",\r\n//     opacity: 0,\r\n//     overflow: \"hidden\",\r\n//     position: \"absolute\",\r\n//     top: \"0\",\r\n//     zIndex: -1,\r\n//   },\r\n//   file: {\r\n//     height: \"160px\",\r\n//     position: \"relative\",\r\n//     overflow: \"hidden\",\r\n//     textAlign: \"center\",\r\n//   },\r\n// }));\r\n\r\n// export const Photo = (props) => {\r\n//   const i18n = React.useContext(LocalizeContext);\r\n//   const classes = useStyles();\r\n//   const [photoStyle, setPhotoStyle] = useState({\r\n//     width: \"auto\",\r\n//     height: \"100%\",\r\n//   });\r\n//   const photoEl = useRef(null);\r\n//   const iptRef = useRef(null);\r\n//   const projectData = useParams();\r\n//   const onPhotoChange = (e) => {\r\n//     const fileReader = new FileReader();\r\n//     const file = e.target.files[0];\r\n\r\n//     fileReader.onloadend = (e) => {\r\n//       const photo = e.target.result;\r\n//       fillTextToImg(photo, projectData).then((res) => {\r\n//         props.onChange(res);\r\n//        })\r\n//       const i = new Image();\r\n//       i.onload = () => {\r\n//         setPhotoStyle({\r\n//           // width: photoEl.current.clientWidth,\r\n//           // height: (photoEl.current.clientWidth / i.width) * i.height,\r\n//           width: \"auto\",\r\n//           height: \"100%\",\r\n//         });\r\n//       };\r\n//       i.src = photo;\r\n//     };\r\n//     if (file) {\r\n//       new Compressor(file, {\r\n//         quality: 0.2,\r\n//         convertSize: 400000,\r\n//         success(result) {\r\n//           fileReader.readAsDataURL(result);\r\n//         },\r\n//         error(err) {\r\n//           console.log(err.message);\r\n//         },\r\n//       });\r\n//     } else {\r\n//       props.onChange(\"#\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className={classes.root}>\r\n//       <Typography variant=\"subtitle2\" className={classes.lable}>\r\n//         {props.label}\r\n//       </Typography>\r\n//       <div>\r\n//         <input\r\n//           className={classes.inputFile}\r\n//           type=\"file\"\r\n//           accept=\"image/x-png,image/jpeg,image/gif\"\r\n//           id={props.id}\r\n//           ref={iptRef}\r\n//           onChange={onPhotoChange}\r\n//         />\r\n//       </div>\r\n//       <div>\r\n//         {/* <Typography variant=\"body2\">{props.description}</Typography> */}\r\n//         <FormLabel required={props.required}>\r\n//           <Typography\r\n//             component=\"span\"\r\n//             variant=\"subtitle2\"\r\n//             className={classes.lable}\r\n//           >\r\n//             {props.description}\r\n//           </Typography>\r\n//         </FormLabel>\r\n//       </div>\r\n//       <Box border={1} className={classes.file}>\r\n//         <img src={props.value} style={photoStyle} ref={photoEl} alt=\"\" />\r\n//       </Box>\r\n//       <Box className={classes.btm}>\r\n//         <Typography\r\n//           color=\"secondary\"\r\n//           variant=\"body2\"\r\n//           onClick={() => {\r\n//             props.onChange(\"#\");\r\n//             iptRef.current.value = \"\";\r\n//           }}\r\n//         >\r\n//           {i18n.ISNTAPP_DELETE}\r\n//         </Typography>\r\n//         <label htmlFor={props.id}>\r\n//           <Typography color=\"secondary\" variant=\"body2\">\r\n//             {i18n.ISNTAPP_IMPORT_PICTURES}\r\n//           </Typography>\r\n//         </label>\r\n//       </Box>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport const Photo  = ({ lat, lng }) => {\r\n  const [address, setAddress] = useState('');\r\n  const location ={ longitude: \"121.197237\", latitude: \"31.449172\" }\r\n  useEffect(() => {\r\n    if (lat && lng) {\r\n      const map = new window.BMap.Map('container');\r\n      const geocoder = new window.BMap.Geocoder();\r\n\r\n      const point = new window.BMap.Point(\"121.197237\", \"31.449172\");\r\n      geocoder.getLocation(point, (result) => {\r\n        if (result) {\r\n          setAddress(result.address);\r\n        } else {\r\n          setAddress('无法获取地址');\r\n        }\r\n      });\r\n    }\r\n  }, [lat, lng]);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"container\" style={{ height: '0', width: '0' }}></div>\r\n      <p>地址: {address}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}