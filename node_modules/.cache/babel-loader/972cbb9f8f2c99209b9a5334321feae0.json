{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nimport { appendChild, appendQuestionBlock, hasChildNode, getRequiredAttr, readQuestionBlock, getChildNode, getAttrWithDefault } from \"./utils/xml\";\nexport default {\n  serialize(doc, findField, parentNode, field) {\n    const {\n      notApplicableOption,\n      changeDescription,\n      fixedOption\n    } = field.settings; // TODO string is probably not the ideal choice for return-type\n\n    const questionBlock = appendQuestionBlock(doc, findField, parentNode, \"string\", field);\n    appendChild(doc, questionBlock, \"na_yes_no\", null, {\n      \"not-applicable-option\": notApplicableOption,\n      \"fixed-option\": fixedOption,\n      \"change-button-description-option\": changeDescription ? changeDescription : \"false\",\n      value: field.settings.value,\n      itemTexts: field.settings.itemTexts,\n      itemValues: field.settings.itemValues\n    });\n  },\n\n  canDeserialize(node) {\n    return node.nodeName === \"question_block\" && hasChildNode(node, \"na_yes_no\");\n  },\n\n  deserialize(node) {\n    let field = readQuestionBlock(node, \"naYesNo\", \"string\"); // eslint-disable-line prefer-const\n\n    field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\n    const naYesNoNode = getChildNode(node, \"na_yes_no\");\n    field.settings.notApplicableOption = getRequiredAttr(naYesNoNode, \"not-applicable-option\") === \"true\";\n    field.settings.fixedOption = getAttrWithDefault(naYesNoNode, \"fixed-option\", \"false\") === \"true\";\n    field.settings.changeDescription = getAttrWithDefault(naYesNoNode, \"change-button-description-option\", \"false\") === \"true\";\n    field.settings.value = getAttrWithDefault(naYesNoNode, \"value\", \"\").trim() || undefined;\n    let itemTexts = getAttrWithDefault(naYesNoNode, \"itemTexts\", \"\");\n    field.settings.itemTexts = itemTexts === \"\" ? [] : itemTexts.split(\",\");\n    let itemValues = getAttrWithDefault(naYesNoNode, \"itemValues\", \"\");\n    field.settings.itemValues = itemValues === \"\" ? [] : itemValues.split(\",\");\n    return field;\n  }\n\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/NaYesNoIO.js"],"names":["appendChild","appendQuestionBlock","hasChildNode","getRequiredAttr","readQuestionBlock","getChildNode","getAttrWithDefault","serialize","doc","findField","parentNode","field","notApplicableOption","changeDescription","fixedOption","settings","questionBlock","value","itemTexts","itemValues","canDeserialize","node","nodeName","deserialize","required","naYesNoNode","trim","undefined","split"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACEA,WADF,EAEEC,mBAFF,EAGEC,YAHF,EAIEC,eAJF,EAKEC,iBALF,EAMEC,YANF,EAOEC,kBAPF,QAQO,aARP;AAUA,eAAe;AACbC,EAAAA,SAAS,CAACC,GAAD,EAAMC,SAAN,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoC;AAC3C,UAAM;AACJC,MAAAA,mBADI;AAEJC,MAAAA,iBAFI;AAGJC,MAAAA;AAHI,QAIFH,KAAK,CAACI,QAJV,CAD2C,CAO3C;;AACA,UAAMC,aAAa,GAAGf,mBAAmB,CACvCO,GADuC,EAEvCC,SAFuC,EAGvCC,UAHuC,EAIvC,QAJuC,EAKvCC,KALuC,CAAzC;AAQAX,IAAAA,WAAW,CAACQ,GAAD,EAAMQ,aAAN,EAAqB,WAArB,EAAkC,IAAlC,EAAwC;AACjD,+BAAyBJ,mBADwB;AAEjD,sBAAgBE,WAFiC;AAGjD,0CAAoCD,iBAAiB,GACjDA,iBADiD,GAEjD,OAL6C;AAMjDI,MAAAA,KAAK,EAAEN,KAAK,CAACI,QAAN,CAAeE,KAN2B;AAOjDC,MAAAA,SAAS,EAAEP,KAAK,CAACI,QAAN,CAAeG,SAPuB;AAQjDC,MAAAA,UAAU,EAAER,KAAK,CAACI,QAAN,CAAeI;AARsB,KAAxC,CAAX;AAUD,GA3BY;;AA6BbC,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,WACEA,IAAI,CAACC,QAAL,KAAkB,gBAAlB,IAAsCpB,YAAY,CAACmB,IAAD,EAAO,WAAP,CADpD;AAGD,GAjCY;;AAmCbE,EAAAA,WAAW,CAACF,IAAD,EAAO;AAChB,QAAIV,KAAK,GAAGP,iBAAiB,CAACiB,IAAD,EAAO,SAAP,EAAkB,QAAlB,CAA7B,CADgB,CAC0C;;AAC1DV,IAAAA,KAAK,CAACI,QAAN,CAAeS,QAAf,GAA0BrB,eAAe,CAACkB,IAAD,EAAO,UAAP,CAAf,KAAsC,MAAhE;AAEA,UAAMI,WAAW,GAAGpB,YAAY,CAACgB,IAAD,EAAO,WAAP,CAAhC;AACAV,IAAAA,KAAK,CAACI,QAAN,CAAeH,mBAAf,GACET,eAAe,CAACsB,WAAD,EAAc,uBAAd,CAAf,KAA0D,MAD5D;AAEAd,IAAAA,KAAK,CAACI,QAAN,CAAeD,WAAf,GACER,kBAAkB,CAACmB,WAAD,EAAc,cAAd,EAA8B,OAA9B,CAAlB,KAA6D,MAD/D;AAEAd,IAAAA,KAAK,CAACI,QAAN,CAAeF,iBAAf,GACEP,kBAAkB,CAChBmB,WADgB,EAEhB,kCAFgB,EAGhB,OAHgB,CAAlB,KAIM,MALR;AAOAd,IAAAA,KAAK,CAACI,QAAN,CAAeE,KAAf,GACEX,kBAAkB,CAACmB,WAAD,EAAc,OAAd,EAAuB,EAAvB,CAAlB,CAA6CC,IAA7C,MAAuDC,SADzD;AAGA,QAAIT,SAAS,GAAGZ,kBAAkB,CAACmB,WAAD,EAAc,WAAd,EAA2B,EAA3B,CAAlC;AACAd,IAAAA,KAAK,CAACI,QAAN,CAAeG,SAAf,GAA2BA,SAAS,KAAK,EAAd,GAAmB,EAAnB,GAAwBA,SAAS,CAACU,KAAV,CAAgB,GAAhB,CAAnD;AAEA,QAAIT,UAAU,GAAGb,kBAAkB,CAACmB,WAAD,EAAc,YAAd,EAA4B,EAA5B,CAAnC;AACAd,IAAAA,KAAK,CAACI,QAAN,CAAeI,UAAf,GAA4BA,UAAU,KAAK,EAAf,GAAoB,EAApB,GAAyBA,UAAU,CAACS,KAAX,CAAiB,GAAjB,CAArD;AAEA,WAAOjB,KAAP;AACD;;AA7DY,CAAf","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport {\r\n  appendChild,\r\n  appendQuestionBlock,\r\n  hasChildNode,\r\n  getRequiredAttr,\r\n  readQuestionBlock,\r\n  getChildNode,\r\n  getAttrWithDefault,\r\n} from \"./utils/xml\";\r\n\r\nexport default {\r\n  serialize(doc, findField, parentNode, field) {\r\n    const {\r\n      notApplicableOption,\r\n      changeDescription,\r\n      fixedOption,\r\n    } = field.settings;\r\n\r\n    // TODO string is probably not the ideal choice for return-type\r\n    const questionBlock = appendQuestionBlock(\r\n      doc,\r\n      findField,\r\n      parentNode,\r\n      \"string\",\r\n      field\r\n    );\r\n\r\n    appendChild(doc, questionBlock, \"na_yes_no\", null, {\r\n      \"not-applicable-option\": notApplicableOption,\r\n      \"fixed-option\": fixedOption,\r\n      \"change-button-description-option\": changeDescription\r\n        ? changeDescription\r\n        : \"false\",\r\n      value: field.settings.value,\r\n      itemTexts: field.settings.itemTexts,\r\n      itemValues: field.settings.itemValues,\r\n    });\r\n  },\r\n\r\n  canDeserialize(node) {\r\n    return (\r\n      node.nodeName === \"question_block\" && hasChildNode(node, \"na_yes_no\")\r\n    );\r\n  },\r\n\r\n  deserialize(node) {\r\n    let field = readQuestionBlock(node, \"naYesNo\", \"string\"); // eslint-disable-line prefer-const\r\n    field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\r\n\r\n    const naYesNoNode = getChildNode(node, \"na_yes_no\");\r\n    field.settings.notApplicableOption =\r\n      getRequiredAttr(naYesNoNode, \"not-applicable-option\") === \"true\";\r\n    field.settings.fixedOption =\r\n      getAttrWithDefault(naYesNoNode, \"fixed-option\", \"false\") === \"true\";\r\n    field.settings.changeDescription =\r\n      getAttrWithDefault(\r\n        naYesNoNode,\r\n        \"change-button-description-option\",\r\n        \"false\"\r\n      ) === \"true\";\r\n\r\n    field.settings.value =\r\n      getAttrWithDefault(naYesNoNode, \"value\", \"\").trim() || undefined;\r\n\r\n    let itemTexts = getAttrWithDefault(naYesNoNode, \"itemTexts\", \"\");\r\n    field.settings.itemTexts = itemTexts === \"\" ? [] : itemTexts.split(\",\");\r\n\r\n    let itemValues = getAttrWithDefault(naYesNoNode, \"itemValues\", \"\");\r\n    field.settings.itemValues = itemValues === \"\" ? [] : itemValues.split(\",\");\r\n\r\n    return field;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}