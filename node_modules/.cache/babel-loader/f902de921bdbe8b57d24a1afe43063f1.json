{"ast":null,"code":"import * as action from \"actions\";\nimport * as repo from \"js/fetch\";\nimport * as installationStep from \"js/installationStep\";\nimport { getDocumentListParmas } from \"js/util\";\nimport { db } from \"js/db\";\nlet projectNos = [];\nexport const fetchAll = type => dispatch => {// dispatch(action.showLoading());\n  // return repo\n  //   .fetchMasterData(type)\n  //   .then((data) => {\n  //     let projects = data.workCenters ? Object.keys(data.workCenters) : [];\n  //     data = installationStep.updateInstallationStepDesc(data);\n  //     dispatch(action.setEntities(data));\n  //     return repo.fetchOrdersDataByProjects(type, projects, 1);\n  //     // return repo.fetchOrdersData(type);\n  //   })\n  //   .then((data) => {\n  //     data = installationStep.addActivityStepEditable(data);\n  //     data = installationStep.nineStepsToFourteen(data);\n  //     dispatch(action.setEntities(data));\n  //     projectNos = Object.keys(data.projects);\n  //     return repo.fetchLocalInstallationStepsConfirmDate({ projectNos }, type);\n  //   })\n  //   .then((data) => {\n  //     dispatch(action.setAllLocalInstallationStepConfirmDate(data));\n  //     const result = getDocumentListParmas(projectNos);\n  //     return repo.fetchDocumentList(result, type);\n  //   })\n  //   .then((data) => {\n  //     dispatch(action.setDocuments(data));\n  //     return repo.fetchTemplatesData(type);\n  //   })\n  //   .then((data) => {\n  //     dispatch(action.setTemplates(data));\n  //     return repo.fetchTasks(type);\n  //   })\n  //   .then((data) => {\n  //     dispatch(action.setTasks(data));\n  //   })\n  //   .then(() => {\n  //     return repo.fetchInstMethods(type);\n  //   })\n  //   .then((data) => {\n  //     dispatch(action.setMethods(data));\n  //   })\n  //   .catch((error) => {\n  //     if (error.code === 401) {\n  //       window.localStorage.removeItem(\"auth\");\n  //       dispatch(action.setAuth(null));\n  //     }\n  //     dispatch(action.setError(error.message));\n  //   })\n  //   .finally(() => {\n  //     db.cache.get(\"dataVersion\").then(cache => {\n  //       if (cache?.data === \"lastVersion\") {\n  //         db.cache.put({ id: \"dataVersion\", data: \"initVersion\" })\n  //         window.location.reload()\n  //       }\n  //       dispatch(action.hideLoading());\n  //     })\n  //   });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/initialization.js"],"names":["action","repo","installationStep","getDocumentListParmas","db","projectNos","fetchAll","type","dispatch"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,SAAxB;AACA,OAAO,KAAKC,IAAZ,MAAsB,UAAtB;AACA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AACA,SAASC,qBAAT,QAAsC,SAAtC;AACA,SAASC,EAAT,QAAmB,OAAnB;AAEA,IAAIC,UAAU,GAAG,EAAjB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAWC,QAAD,IAAc,CAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA3DM","sourcesContent":["import * as action from \"actions\";\r\nimport * as repo from \"js/fetch\";\r\nimport * as installationStep from \"js/installationStep\";\r\nimport { getDocumentListParmas } from \"js/util\";\r\nimport { db } from \"js/db\";\r\n\r\nlet projectNos = [];\r\n\r\nexport const fetchAll = (type) => (dispatch) => {\r\n  // dispatch(action.showLoading());\r\n  // return repo\r\n  //   .fetchMasterData(type)\r\n  //   .then((data) => {\r\n  //     let projects = data.workCenters ? Object.keys(data.workCenters) : [];\r\n  //     data = installationStep.updateInstallationStepDesc(data);\r\n  //     dispatch(action.setEntities(data));\r\n\r\n  //     return repo.fetchOrdersDataByProjects(type, projects, 1);\r\n  //     // return repo.fetchOrdersData(type);\r\n  //   })\r\n  //   .then((data) => {\r\n  //     data = installationStep.addActivityStepEditable(data);\r\n  //     data = installationStep.nineStepsToFourteen(data);\r\n  //     dispatch(action.setEntities(data));\r\n\r\n  //     projectNos = Object.keys(data.projects);\r\n\r\n  //     return repo.fetchLocalInstallationStepsConfirmDate({ projectNos }, type);\r\n  //   })\r\n  //   .then((data) => {\r\n  //     dispatch(action.setAllLocalInstallationStepConfirmDate(data));\r\n  //     const result = getDocumentListParmas(projectNos);\r\n  //     return repo.fetchDocumentList(result, type);\r\n  //   })\r\n  //   .then((data) => {\r\n  //     dispatch(action.setDocuments(data));\r\n  //     return repo.fetchTemplatesData(type);\r\n  //   })\r\n  //   .then((data) => {\r\n  //     dispatch(action.setTemplates(data));\r\n  //     return repo.fetchTasks(type);\r\n  //   })\r\n  //   .then((data) => {\r\n  //     dispatch(action.setTasks(data));\r\n  //   })\r\n  //   .then(() => {\r\n  //     return repo.fetchInstMethods(type);\r\n  //   })\r\n  //   .then((data) => {\r\n  //     dispatch(action.setMethods(data));\r\n  //   })\r\n  //   .catch((error) => {\r\n  //     if (error.code === 401) {\r\n  //       window.localStorage.removeItem(\"auth\");\r\n  //       dispatch(action.setAuth(null));\r\n  //     }\r\n  //     dispatch(action.setError(error.message));\r\n  //   })\r\n  //   .finally(() => {\r\n  //     db.cache.get(\"dataVersion\").then(cache => {\r\n  //       if (cache?.data === \"lastVersion\") {\r\n  //         db.cache.put({ id: \"dataVersion\", data: \"initVersion\" })\r\n  //         window.location.reload()\r\n  //       }\r\n  //       dispatch(action.hideLoading());\r\n  //     })\r\n  //   });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}