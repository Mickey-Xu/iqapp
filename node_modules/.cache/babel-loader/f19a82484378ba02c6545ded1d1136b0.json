{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\SCF-NI_PM_App\\\\SCF.InstallationQuality\\\\react-client\\\\src\\\\pages\\\\TasksPage\\\\index.js\";\nimport { Box } from \"@material-ui/core\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport * as action from \"actions\";\nimport FFTab from \"components/FFTab\";\nimport TaskList from \"components/TaskList\";\nimport { LocalizeContext } from \"i18n\";\nimport * as repo from \"js/fetch\";\nimport { getTaskCount } from \"js/util\";\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { taskCleaner } from \"js/publicFn\";\n\nconst Tasks = ({\n  type,\n  tasksData,\n  submit\n}) => {\n  const history = useHistory();\n  const i18n = React.useContext(LocalizeContext);\n  const [status, setStatus] = React.useState(\"open\");\n  const tabs = [{\n    title: i18n.ISNTAPP_TO_COMPLETE,\n    value: \"open\"\n  }, {\n    title: i18n.ISNTAPP_TO_CLOSE,\n    value: \"pending\"\n  }, {\n    title: i18n.ISNTAPP_CLOSED,\n    value: \"close\"\n  }];\n  let currentStatusTasks = [];\n\n  if (status === \"open\") {\n    tasksData.forEach(item => {\n      if (item.Status === \"A\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  if (status === \"pending\") {\n    tasksData.forEach(item => {\n      if (item.Status === \"D\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  if (status === \"close\") {\n    tasksData.forEach(item => {\n      if (item.Status === \"CL\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  currentStatusTasks.sort((a, b) => a.DueDate ? a.DueDate > b.DueDate ? 1 : -1 : 1);\n  const pending = getTaskCount().awaitCloseNum;\n  const open = getTaskCount().awaitComplateNum;\n  return /*#__PURE__*/React.createElement(PrimaryLayout, {\n    name: \"tasks\",\n    title: `i18n.INSTAPP_JOBLIST_TASKS`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  });\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    match\n  } = ownProps;\n  const {\n    params\n  } = match;\n  const {\n    type\n  } = params;\n  const {\n    tasks,\n    orders,\n    projects\n  } = state;\n  return {\n    type,\n    tasksData: type === \"assigner\" ? taskCleaner(tasks.assigner, orders, projects) || [] : type === \"assignee\" ? taskCleaner(tasks.assignee, orders, projects) || [] : []\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: submitDatas => {\n      dispatch(action.fetchCreateTask([submitDatas])).then(response => {\n        repo.fetchTasks().then(data => {\n          dispatch(action.setTasks(data));\n        });\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/pages/TasksPage/index.js"],"names":["Box","Fab","AddIcon","action","FFTab","TaskList","LocalizeContext","repo","getTaskCount","PrimaryLayout","React","connect","useHistory","taskCleaner","Tasks","type","tasksData","submit","history","i18n","useContext","status","setStatus","useState","tabs","title","ISNTAPP_TO_COMPLETE","value","ISNTAPP_TO_CLOSE","ISNTAPP_CLOSED","currentStatusTasks","forEach","item","Status","push","sort","a","b","DueDate","pending","awaitCloseNum","open","awaitComplateNum","mapStateToProps","state","ownProps","match","params","tasks","orders","projects","assigner","assignee","mapDispatchToProps","dispatch","submitDatas","fetchCreateTask","then","response","fetchTasks","data","setTasks"],"mappings":"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","sourcesContent":["import { Box } from \"@material-ui/core\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport * as action from \"actions\";\r\nimport FFTab from \"components/FFTab\";\r\nimport TaskList from \"components/TaskList\";\r\nimport { LocalizeContext } from \"i18n\";\r\nimport * as repo from \"js/fetch\";\r\nimport { getTaskCount } from \"js/util\";\r\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { taskCleaner } from \"js/publicFn\";\r\n\r\nconst Tasks = ({ type, tasksData, submit }) => {\r\n  const history = useHistory();\r\n  const i18n = React.useContext(LocalizeContext);\r\n  const [status, setStatus] = React.useState(\"open\");\r\n\r\n  const tabs = [\r\n    { title: i18n.ISNTAPP_TO_COMPLETE, value: \"open\" },\r\n    { title: i18n.ISNTAPP_TO_CLOSE, value: \"pending\" },\r\n    { title: i18n.ISNTAPP_CLOSED, value: \"close\" },\r\n  ];\r\n\r\n  let currentStatusTasks = [];\r\n\r\n  if (status === \"open\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.Status === \"A\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (status === \"pending\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.Status === \"D\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (status === \"close\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.Status === \"CL\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  currentStatusTasks.sort((a, b) =>\r\n    a.DueDate ? (a.DueDate > b.DueDate ? 1 : -1) : 1\r\n  );\r\n\r\n  const pending = getTaskCount().awaitCloseNum;\r\n  const open = getTaskCount().awaitComplateNum;\r\n  return (\r\n    <PrimaryLayout name=\"tasks\" title={`i18n.INSTAPP_JOBLIST_TASKS`}>\r\n      {/* <Box\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"52px\",\r\n          width: \"100%\",\r\n          zIndex: \"10000\",\r\n        }}\r\n      >\r\n        <FFTab\r\n          tabs={tabs}\r\n          selectedTabValue={\"open\"}\r\n          onTabChange={(value) => setStatus(value)}\r\n        />\r\n        {type === \"assigner\"\r\n          ? pending > 0 && (\r\n              <span\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"0\",\r\n                  left: \"55%\",\r\n                  padding: \"2px 8px\",\r\n                  backgroundColor: \"red\",\r\n                  borderRadius: \"40px\",\r\n                  color: \"white\",\r\n                }}\r\n              >\r\n                {pending}\r\n              </span>\r\n            )\r\n          : open > 0 && (\r\n              <span\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"0\",\r\n                  left: \"21%\",\r\n                  padding: \"2px 8px\",\r\n                  backgroundColor: \"red\",\r\n                  borderRadius: \"40px\",\r\n                  color: \"white\",\r\n                }}\r\n              >\r\n                {open}\r\n              </span>\r\n            )}\r\n      </Box>\r\n\r\n      <Box\r\n        style={{\r\n          width: \"100%\",\r\n          padding: \"16px\",\r\n          position: \"absolute\",\r\n          top: \"32px\",\r\n          height: window.screen.height - 157 + \"px\",\r\n          overflow: \"hidden auto\",\r\n        }}\r\n      >\r\n        <TaskList\r\n          data={currentStatusTasks}\r\n          status={status}\r\n          type={type}\r\n          submit={(submitDatas) => {\r\n            submit(submitDatas);\r\n          }}\r\n        ></TaskList>\r\n      </Box>\r\n\r\n      {type === \"assigner\" && (\r\n        <Box\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          style={{\r\n            position: \"fixed\",\r\n            bottom: \"90px\",\r\n            right: \"16px\",\r\n          }}\r\n          onClick={() => {\r\n            history.push(\"/taskcreate\");\r\n          }}\r\n        >\r\n          <Fab style={{ backgroundColor: \"#cb0c33a8\", color: \"white\" }}>\r\n            <AddIcon />\r\n          </Fab>\r\n        </Box>\r\n      )} */}\r\n    </PrimaryLayout>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const { match } = ownProps;\r\n  const { params } = match;\r\n  const { type } = params;\r\n\r\n  const { tasks, orders, projects } = state;\r\n\r\n  return {\r\n    type,\r\n    tasksData:\r\n      type === \"assigner\"\r\n        ? taskCleaner(tasks.assigner, orders, projects) || []\r\n        : type === \"assignee\"\r\n        ? taskCleaner(tasks.assignee, orders, projects) || []\r\n        : [],\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    submit: (submitDatas) => {\r\n      dispatch(action.fetchCreateTask([submitDatas])).then((response) => {\r\n        repo.fetchTasks().then((data) => {\r\n          dispatch(action.setTasks(data));\r\n        });\r\n      });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);\r\n"]},"metadata":{},"sourceType":"module"}