{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nlet ops = {}; // eslint-disable-line prefer-const\n\nconst ARG_TYPES = [\"string\", \"number\", \"bool\", \"date\", \"optionId\", \"extBool\"]; // for the type optionId the value FREE_TEXT_VALUE (from ../utils/options.js)\n// can be used for the \"Other\" option\n\nfunction addOp(id, name, formulaOp, argType) {\n  if (ops[id]) {\n    throw new Error(\"Operator already exists: \" + id);\n  }\n\n  if (!ARG_TYPES.includes(argType)) {\n    throw new Error(\"Unknown operator argument type: \" + argType);\n  }\n\n  ops[id] = {\n    id,\n    name,\n    formulaOp,\n    argType\n  };\n}\n\naddOp(\"isString\", \"is\", \"==\", \"string\");\naddOp(\"isNotString\", \"is not\", \"!=\", \"string\");\naddOp(\"isNumber\", \"is equal to\", \"==\", \"number\");\naddOp(\"isNotNumber\", \"is not equal to\", \"!=\", \"number\");\naddOp(\"isOption\", \"is\", \"==\", \"optionId\");\naddOp(\"isNotOption\", \"is not\", \"!=\", \"optionId\");\naddOp(\"isBool\", \"is\", \"==\", \"bool\");\naddOp(\"isExtBool\", \"is\", \"==\", \"extBool\");\naddOp(\"isNotExtBool\", \"is not\", \"!=\", \"extBool\");\naddOp(\"isDate\", \"is\", \"==\", \"date\");\naddOp(\"isNotDate\", \"is not\", \"!=\", \"date\");\naddOp(\"before\", \"is before\", \"before\", \"date\");\naddOp(\"after\", \"is after\", \"after\", \"date\");\naddOp(\"startsWith\", \"starts with\", \"startsWith\", \"string\");\naddOp(\"endsWith\", \"ends with\", \"endsWith\", \"string\");\naddOp(\"greaterThan\", \"is greater than\", \">=\", \"number\");\naddOp(\"lessThan\", \"is less than\", \"<=\", \"number\");\naddOp(\"containsString\", \"contains\", \"contains\", \"string\");\naddOp(\"containsOption\", \"contains\", \"contains\", \"optionId\");\naddOp(\"doesNotContainString\", \"does not contain\", \"doesntContain\", \"string\");\naddOp(\"doesNotContainOption\", \"does not contain\", \"doesntContain\", \"optionId\");\nexport default ops;","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/constants/VisibilityOperators.js"],"names":["ops","ARG_TYPES","addOp","id","name","formulaOp","argType","Error","includes"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,GAAG,GAAG,EAAV,C,CAAc;;AAEd,MAAMC,SAAS,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,UAArC,EAAiD,SAAjD,CAAlB,C,CAEA;AACA;;AAEA,SAASC,KAAT,CAAeC,EAAf,EAAmBC,IAAnB,EAAyBC,SAAzB,EAAoCC,OAApC,EAA6C;AAC3C,MAAIN,GAAG,CAACG,EAAD,CAAP,EAAa;AACX,UAAM,IAAII,KAAJ,CAAU,8BAA8BJ,EAAxC,CAAN;AACD;;AACD,MAAI,CAACF,SAAS,CAACO,QAAV,CAAmBF,OAAnB,CAAL,EAAkC;AAChC,UAAM,IAAIC,KAAJ,CAAU,qCAAqCD,OAA/C,CAAN;AACD;;AAEDN,EAAAA,GAAG,CAACG,EAAD,CAAH,GAAU;AAAEA,IAAAA,EAAF;AAAMC,IAAAA,IAAN;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,GAAV;AACD;;AAEDJ,KAAK,CAAC,UAAD,EAAa,IAAb,EAAmB,IAAnB,EAAyB,QAAzB,CAAL;AACAA,KAAK,CAAC,aAAD,EAAgB,QAAhB,EAA0B,IAA1B,EAAgC,QAAhC,CAAL;AACAA,KAAK,CAAC,UAAD,EAAa,aAAb,EAA4B,IAA5B,EAAkC,QAAlC,CAAL;AACAA,KAAK,CAAC,aAAD,EAAgB,iBAAhB,EAAmC,IAAnC,EAAyC,QAAzC,CAAL;AACAA,KAAK,CAAC,UAAD,EAAa,IAAb,EAAmB,IAAnB,EAAyB,UAAzB,CAAL;AACAA,KAAK,CAAC,aAAD,EAAgB,QAAhB,EAA0B,IAA1B,EAAgC,UAAhC,CAAL;AACAA,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiB,IAAjB,EAAuB,MAAvB,CAAL;AACAA,KAAK,CAAC,WAAD,EAAc,IAAd,EAAoB,IAApB,EAA0B,SAA1B,CAAL;AACAA,KAAK,CAAC,cAAD,EAAiB,QAAjB,EAA2B,IAA3B,EAAiC,SAAjC,CAAL;AACAA,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiB,IAAjB,EAAuB,MAAvB,CAAL;AACAA,KAAK,CAAC,WAAD,EAAc,QAAd,EAAwB,IAAxB,EAA8B,MAA9B,CAAL;AACAA,KAAK,CAAC,QAAD,EAAW,WAAX,EAAwB,QAAxB,EAAkC,MAAlC,CAAL;AACAA,KAAK,CAAC,OAAD,EAAU,UAAV,EAAsB,OAAtB,EAA+B,MAA/B,CAAL;AACAA,KAAK,CAAC,YAAD,EAAe,aAAf,EAA8B,YAA9B,EAA4C,QAA5C,CAAL;AACAA,KAAK,CAAC,UAAD,EAAa,WAAb,EAA0B,UAA1B,EAAsC,QAAtC,CAAL;AACAA,KAAK,CAAC,aAAD,EAAgB,iBAAhB,EAAmC,IAAnC,EAAyC,QAAzC,CAAL;AACAA,KAAK,CAAC,UAAD,EAAa,cAAb,EAA6B,IAA7B,EAAmC,QAAnC,CAAL;AACAA,KAAK,CAAC,gBAAD,EAAmB,UAAnB,EAA+B,UAA/B,EAA2C,QAA3C,CAAL;AACAA,KAAK,CAAC,gBAAD,EAAmB,UAAnB,EAA+B,UAA/B,EAA2C,UAA3C,CAAL;AACAA,KAAK,CAAC,sBAAD,EAAyB,kBAAzB,EAA6C,eAA7C,EAA8D,QAA9D,CAAL;AACAA,KAAK,CAAC,sBAAD,EAAyB,kBAAzB,EAA6C,eAA7C,EAA8D,UAA9D,CAAL;AAEA,eAAeF,GAAf","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nlet ops = {}; // eslint-disable-line prefer-const\r\n\r\nconst ARG_TYPES = [\"string\", \"number\", \"bool\", \"date\", \"optionId\", \"extBool\"];\r\n\r\n// for the type optionId the value FREE_TEXT_VALUE (from ../utils/options.js)\r\n// can be used for the \"Other\" option\r\n\r\nfunction addOp(id, name, formulaOp, argType) {\r\n  if (ops[id]) {\r\n    throw new Error(\"Operator already exists: \" + id);\r\n  }\r\n  if (!ARG_TYPES.includes(argType)) {\r\n    throw new Error(\"Unknown operator argument type: \" + argType);\r\n  }\r\n\r\n  ops[id] = { id, name, formulaOp, argType };\r\n}\r\n\r\naddOp(\"isString\", \"is\", \"==\", \"string\");\r\naddOp(\"isNotString\", \"is not\", \"!=\", \"string\");\r\naddOp(\"isNumber\", \"is equal to\", \"==\", \"number\");\r\naddOp(\"isNotNumber\", \"is not equal to\", \"!=\", \"number\");\r\naddOp(\"isOption\", \"is\", \"==\", \"optionId\");\r\naddOp(\"isNotOption\", \"is not\", \"!=\", \"optionId\");\r\naddOp(\"isBool\", \"is\", \"==\", \"bool\");\r\naddOp(\"isExtBool\", \"is\", \"==\", \"extBool\");\r\naddOp(\"isNotExtBool\", \"is not\", \"!=\", \"extBool\");\r\naddOp(\"isDate\", \"is\", \"==\", \"date\");\r\naddOp(\"isNotDate\", \"is not\", \"!=\", \"date\");\r\naddOp(\"before\", \"is before\", \"before\", \"date\");\r\naddOp(\"after\", \"is after\", \"after\", \"date\");\r\naddOp(\"startsWith\", \"starts with\", \"startsWith\", \"string\");\r\naddOp(\"endsWith\", \"ends with\", \"endsWith\", \"string\");\r\naddOp(\"greaterThan\", \"is greater than\", \">=\", \"number\");\r\naddOp(\"lessThan\", \"is less than\", \"<=\", \"number\");\r\naddOp(\"containsString\", \"contains\", \"contains\", \"string\");\r\naddOp(\"containsOption\", \"contains\", \"contains\", \"optionId\");\r\naddOp(\"doesNotContainString\", \"does not contain\", \"doesntContain\", \"string\");\r\naddOp(\"doesNotContainOption\", \"does not contain\", \"doesntContain\", \"optionId\");\r\n\r\nexport default ops;\r\n"]},"metadata":{},"sourceType":"module"}