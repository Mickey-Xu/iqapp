{"ast":null,"code":"import * as action from \"actions\";\nimport * as api from \"api\";\nimport { db } from \"js/db\";\nimport * as schema from \"js/schema\";\nimport { currentRefreshTime, orderActivitiesSort, templatesConverter, getNonConformityConfig } from \"js/util\";\nimport { normalize } from \"normalizr\";\nimport * as repo from \"js/fetch\";\nimport store from \"js/store\";\nimport { getIDPToken } from \"./auth\";\nimport { formatDateToYMD } from \"js/util\";\nexport const setAllDataRefreshTime = data => ({\n  type: \"SET_ALL_DATA_REFRESH_TIME\",\n  payload: data\n});\n\nconst setRequestStatus = (name, loading) => {\n  return {\n    type: \"SET_REQUEST_STATUS\",\n    payload: {\n      name,\n      loading\n    }\n  };\n};\n\nexport const closeLoading = name => setRequestStatus(name, \"loaded\");\nexport const openLoading = name => setRequestStatus(name, \"loading\");\nexport const closeLoadingShowFailInfo = name => setRequestStatus(name, \"failToLoad\");\nexport const fetchOrders = (request, type, userInfo) => dispatch => {\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  let roles = auth === null || auth === void 0 ? void 0 : auth.roles;\n  const isSubconTLOrPE = roles.indexOf('Subcon TL') > -1 || roles.indexOf('PE') > -1;\n  const isEISV = roles.indexOf('SL') > -1;\n  dispatch(action.openLoading(\"masterData\")); //设置loading\n\n  api.fetchMasterData((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    const {\n      entities\n    } = normalize(response.data, schema.masterData);\n    entities[\"nonConformityConfig\"] = getNonConformityConfig();\n    db.cache.put({\n      id: \"masterData\",\n      data: entities\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"masterDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n    let loaded = true;\n    isEISV && dispatch(action.fetchTasksList(request, userInfo, loaded, dispatch)).then(res => {\n      let orders = [...new Set(res.map(item => item.orderNo))];\n      fetchOrdersData(request, type, userInfo, entities, orders);\n    });\n    isSubconTLOrPE && fetchOrdersData(request, type, userInfo, entities);\n    isSubconTLOrPE && dispatch(action.fetchTasksList(request, userInfo, dispatch));\n  }).finally(() => {\n    db.cache.put({\n      id: \"dataVersion\",\n      data: \"lastVersion\"\n    });\n    dispatch(action.closeLoading(\"masterData\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"masterData\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchDocuments = (request, userInfo) => dispatch => {\n  dispatch(action.openLoading(\"document\")); //设置loading\n\n  api.getDocumentList(request).then(response => {\n    return db.cache.put({\n      id: \"documentList\",\n      data: response.data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"documentListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"document\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"document\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n  dispatch(action.openLoading(\"templateList\")); //设置loading\n\n  api.fetchTemplatesData((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    const data = templatesConverter(response.data);\n    db.cache.put({\n      id: \"templatesData\",\n      data: data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"templateListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"templateList\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"templateList\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchTasksList = (request, userInfo, loaded) => dispatch => {\n  dispatch(action.openLoading(\"taskList\")); //设置loading\n\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  return api.fetchIDPTTasks(auth === null || auth === void 0 ? void 0 : auth.userName).then(response => {\n    var _response$data;\n\n    let resp = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data.map(item => {\n      return {\n        taskId: item.id,\n        taskType: item.type,\n        projectNo: item.projectNo,\n        orderNo: item.salesOrderNo,\n        activityNo: item.activityNo,\n        projectName: item.projectName,\n        planStartDate: formatDateToYMD(item.planStartDate),\n        planEndDate: formatDateToYMD(item.planEndDate),\n        actualStartDate: formatDateToYMD(item.actualStartDate),\n        actualEndDate: formatDateToYMD(item.actualEndDate),\n        actualCloseDate: item.actualClosedDate,\n        statusDesc: item.statusDesc,\n        status: item.status === 'NEW' ? 'awaitStart' : item.status === 'PROCESSING' ? 'awaitComplate' : item.status === \"FINISHED\" ? 'awaitClose' : 'closed'\n      };\n    });\n\n    if ((auth === null || auth === void 0 ? void 0 : auth.roles.indexOf('SL')) > -1 && !loaded) {\n      db.cache.get(\"masterData\").then(cache => {\n        let orders = [...new Set(resp.map(item => item.orderNo))];\n        fetchOrdersData(request, '', userInfo, cache === null || cache === void 0 ? void 0 : cache.data, orders);\n      });\n    }\n\n    return db.cache.put({\n      id: \"tasks\",\n      data: resp\n    }).then(() => {\n      return db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"taskListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n        return resp;\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"taskList\"));\n  }).catch(error => {\n    if (error.code === 401 || error.code === 404) {\n      getIDPToken();\n    }\n\n    dispatch(action.closeLoadingShowFailInfo(\"taskList\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchOrdersData = (request, type, userInfo, entities, orders) => {\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  let roles = auth === null || auth === void 0 ? void 0 : auth.roles;\n  const isEISV = roles.indexOf('SL') > -1;\n  let projects = entities.workCenters ? Object.keys(entities.workCenters) : [];\n  const dispatch = store.dispatch;\n  dispatch(action.openLoading(\"ordersData\"));\n\n  if (isEISV) {\n    return api.fetchEISVOrdersData(orders).then(response => {\n      const data = response.data;\n      data.orderActivities = orderActivitiesSort(data.orderActivities);\n      const {\n        entities\n      } = normalize(data, schema.ordersData);\n      return db.cache.put({\n        id: \"ordersData\",\n        data: entities\n      }).then(() => {\n        type === \"all\" && dispatch(action.fetchDocuments(request, userInfo, dispatch));\n        return entities;\n      });\n    }).finally(() => {\n      dispatch(action.closeLoading(\"ordersData\"));\n    }).catch(error => {\n      dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\n      dispatch(action.setError(error.message));\n      return false;\n    });\n  } else {\n    api.fetchOrdersDataByProjectsAndMerge(projects, 1, userInfo).then(response => {\n      const data = response;\n      data.orderActivities = orderActivitiesSort(data.orderActivities);\n      const {\n        entities\n      } = normalize(response, schema.ordersData);\n      db.cache.put({\n        id: \"ordersData\",\n        data: entities\n      }).then(() => {\n        const param = {\n          projectNos: projects\n        };\n\n        if (userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) {\n          param[\"pNumber\"] = userInfo.pNumber;\n        }\n\n        repo.fetchLocalInstallationStepsConfirmDate(param).then(() => {\n          db.cache.get(\"dataRefreshTime\").then(cache => {\n            const datatime = cache.data;\n            datatime[\"orderDataRefreshTime\"] = currentRefreshTime();\n            db.cache.put({\n              id: \"dataRefreshTime\",\n              data: datatime\n            }).then(() => {\n              dispatch(action.setAllDataRefreshTime(datatime));\n              type === \"all\" && dispatch(action.fetchDocuments(request, userInfo, dispatch));\n            });\n          });\n        });\n      });\n    }).finally(() => {\n      dispatch(action.closeLoading(\"ordersData\"));\n    }).catch(error => {\n      dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\n      dispatch(action.setError(error.message));\n      return false;\n    });\n  }\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/refreshTime.js"],"names":["action","api","db","schema","currentRefreshTime","orderActivitiesSort","templatesConverter","getNonConformityConfig","normalize","repo","store","getIDPToken","formatDateToYMD","setAllDataRefreshTime","data","type","payload","setRequestStatus","name","loading","closeLoading","openLoading","closeLoadingShowFailInfo","fetchOrders","request","userInfo","dispatch","auth","JSON","parse","window","localStorage","getItem","roles","isSubconTLOrPE","indexOf","isEISV","fetchMasterData","pNumber","then","response","entities","masterData","cache","put","id","get","datatime","loaded","fetchTasksList","res","orders","Set","map","item","orderNo","fetchOrdersData","finally","catch","error","setError","message","fetchDocuments","getDocumentList","fetchTemplatesData","fetchIDPTTasks","userName","resp","taskId","taskType","projectNo","salesOrderNo","activityNo","projectName","planStartDate","planEndDate","actualStartDate","actualEndDate","actualCloseDate","actualClosedDate","statusDesc","status","code","projects","workCenters","Object","keys","fetchEISVOrdersData","orderActivities","ordersData","fetchOrdersDataByProjectsAndMerge","param","projectNos","fetchLocalInstallationStepsConfirmDate"],"mappings":"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","sourcesContent":["import * as action from \"actions\";\r\nimport * as api from \"api\";\r\nimport { db } from \"js/db\";\r\nimport * as schema from \"js/schema\";\r\nimport {\r\n  currentRefreshTime,\r\n  orderActivitiesSort,\r\n  templatesConverter,\r\n  getNonConformityConfig\r\n} from \"js/util\";\r\nimport { normalize } from \"normalizr\";\r\nimport * as repo from \"js/fetch\";\r\nimport store from \"js/store\";\r\nimport { getIDPToken } from \"./auth\";\r\nimport { formatDateToYMD } from \"js/util\";\r\n\r\nexport const setAllDataRefreshTime = (data) => ({\r\n  type: \"SET_ALL_DATA_REFRESH_TIME\",\r\n  payload: data,\r\n});\r\n\r\nconst setRequestStatus = (name, loading) => {\r\n  return { type: \"SET_REQUEST_STATUS\", payload: { name, loading } };\r\n};\r\n\r\nexport const closeLoading = (name) => setRequestStatus(name, \"loaded\");\r\n\r\nexport const openLoading = (name) => setRequestStatus(name, \"loading\");\r\n\r\nexport const closeLoadingShowFailInfo = (name) =>\r\n  setRequestStatus(name, \"failToLoad\");\r\n\r\nexport const fetchOrders = (request, type, userInfo) => (dispatch) => {\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n  let roles = auth?.roles;\r\n  const isSubconTLOrPE = roles.indexOf('Subcon TL') > -1 || roles.indexOf('PE') > -1;\r\n  const isEISV = roles.indexOf('SL') > -1;\r\n\r\n  dispatch(action.openLoading(\"masterData\")); //设置loading\r\n  api\r\n    .fetchMasterData(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      const { entities } = normalize(response.data, schema.masterData);\r\n      entities[\"nonConformityConfig\"] = getNonConformityConfig()\r\n      db.cache.put({ id: \"masterData\", data: entities }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"masterDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n\r\n      let loaded = true;\r\n      isEISV && dispatch(action.fetchTasksList(request, userInfo, loaded, dispatch)).then((res) => {\r\n        let orders = [...new Set(res.map(item => item.orderNo))]\r\n        fetchOrdersData(request, type, userInfo, entities, orders)\r\n      }) \r\n\r\n      isSubconTLOrPE && fetchOrdersData(request, type, userInfo, entities);\r\n\r\n      isSubconTLOrPE && dispatch(action.fetchTasksList(request,userInfo, dispatch));\r\n\r\n    })\r\n    .finally(() => {\r\n      db.cache.put({ id: \"dataVersion\", data: \"lastVersion\" })\r\n      dispatch(action.closeLoading(\"masterData\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"masterData\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\nexport const fetchDocuments = (request, userInfo) => (dispatch) => {\r\n  dispatch(action.openLoading(\"document\")); //设置loading\r\n  api\r\n    .getDocumentList(request)\r\n    .then((response) => {\r\n      return db.cache\r\n        .put({ id: \"documentList\", data: response.data })\r\n        .then(() => {\r\n          db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n            const datatime = cache.data;\r\n            datatime[\"documentListDataRefreshTime\"] = currentRefreshTime();\r\n            db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n              dispatch(action.setAllDataRefreshTime(datatime));\r\n            });\r\n          });\r\n        });\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"document\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"document\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n\r\n  dispatch(action.openLoading(\"templateList\")); //设置loading\r\n  api\r\n    .fetchTemplatesData(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      const data = templatesConverter(response.data);\r\n      db.cache.put({ id: \"templatesData\", data: data }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"templateListDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n    })\r\n\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"templateList\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"templateList\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\nexport const fetchTasksList = (request, userInfo, loaded) => (dispatch) => {\r\n  dispatch(action.openLoading(\"taskList\")); //设置loading\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n  return api\r\n   .fetchIDPTTasks(auth?.userName)\r\n    .then((response) => {\r\n      let resp = response.data?.data.map((item) => {\r\n       return {\r\n         taskId: item.id,\r\n         taskType: item.type,\r\n         projectNo: item.projectNo,\r\n         orderNo: item.salesOrderNo,\r\n         activityNo: item.activityNo,\r\n         projectName: item.projectName,\r\n         planStartDate: formatDateToYMD(item.planStartDate) ,\r\n         planEndDate: formatDateToYMD(item.planEndDate) ,\r\n         actualStartDate: formatDateToYMD(item.actualStartDate),\r\n         actualEndDate: formatDateToYMD(item.actualEndDate),\r\n         actualCloseDate: item.actualClosedDate,\r\n         statusDesc: item.statusDesc,\r\n         status: item.status === 'NEW'?\r\n         'awaitStart' :\r\n           item.status === 'PROCESSING' ?\r\n         'awaitComplate' :\r\n             item.status === \"FINISHED\" ?\r\n        'awaitClose' : 'closed'\r\n       }\r\n     })\r\n      if (auth?.roles.indexOf('SL') > -1 && !loaded) {\r\n        db.cache.get(\"masterData\").then((cache) => {\r\n          let orders = [...new Set(resp.map(item => item.orderNo))]\r\n          fetchOrdersData(request, '', userInfo, cache?.data, orders)\r\n        })\r\n      }\r\n\r\n     return db.cache.put({ id: \"tasks\", data: resp }).then(() => {\r\n       return  db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"taskListDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n         return resp\r\n        });\r\n      });\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"taskList\"));\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401 || error.code === 404) {\r\n        getIDPToken()\r\n      }\r\n      dispatch(action.closeLoadingShowFailInfo(\"taskList\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\n\r\nexport const fetchOrdersData = (request, type, userInfo, entities, orders) => {\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n  let roles = auth?.roles;\r\n  const isEISV = roles.indexOf('SL') > -1;\r\n  let projects = entities.workCenters\r\n    ? Object.keys(entities.workCenters)\r\n    : [];\r\n  const dispatch = store.dispatch;\r\n  dispatch(action.openLoading(\"ordersData\"));\r\n  if (isEISV) {\r\n    return api.fetchEISVOrdersData(orders).then((response) => {\r\n      const data = response.data;\r\n      data.orderActivities = orderActivitiesSort(data.orderActivities);\r\n      const { entities } = normalize(data, schema.ordersData);\r\n      return db.cache.put({ id: \"ordersData\", data: entities }).then(() => { \r\n        type === \"all\" &&\r\n          dispatch(action.fetchDocuments(request, userInfo, dispatch));\r\n        return entities     \r\n      })\r\n    }).finally(() => {\r\n        dispatch(action.closeLoading(\"ordersData\"));\r\n    }).catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    })\r\n    \r\n  } else {\r\n    api\r\n      .fetchOrdersDataByProjectsAndMerge(projects, 1, userInfo)\r\n      .then((response) => {\r\n        const data = response;\r\n        data.orderActivities = orderActivitiesSort(data.orderActivities);\r\n        const { entities } = normalize(response, schema.ordersData);\r\n        db.cache.put({ id: \"ordersData\", data: entities }).then(() => {\r\n          const param = { projectNos: projects }\r\n          if (userInfo?.pNumber) {\r\n            param[\"pNumber\"] = userInfo.pNumber\r\n          }\r\n          repo\r\n            .fetchLocalInstallationStepsConfirmDate(param)\r\n            .then(() => {\r\n              db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n                const datatime = cache.data;\r\n                datatime[\"orderDataRefreshTime\"] = currentRefreshTime();\r\n                db.cache\r\n                  .put({ id: \"dataRefreshTime\", data: datatime })\r\n                  .then(() => {\r\n                    dispatch(action.setAllDataRefreshTime(datatime));\r\n                    type === \"all\" &&\r\n                      dispatch(action.fetchDocuments(request, userInfo, dispatch));\r\n                  });\r\n              });\r\n            });\r\n        });\r\n      })\r\n      .finally(() => {\r\n        dispatch(action.closeLoading(\"ordersData\"));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\r\n        dispatch(action.setError(error.message));\r\n        return false;\r\n      });\r\n  }\r\n\r\n}\r\n\r\n\r\n  \r\n\r\n"]},"metadata":{},"sourceType":"module"}