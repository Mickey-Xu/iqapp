{"ast":null,"code":"import * as action from \"actions\";\nimport * as api from \"api\";\nimport { db } from \"js/db\";\nimport * as schema from \"js/schema\";\nimport { currentRefreshTime, orderActivitiesSort, templatesConverter, getNonConformityConfig } from \"js/util\";\nimport { normalize } from \"normalizr\";\nimport * as repo from \"js/fetch\";\nimport store from \"js/store\";\nexport const setAllDataRefreshTime = data => ({\n  type: \"SET_ALL_DATA_REFRESH_TIME\",\n  payload: data\n});\n\nconst setRequestStatus = (name, loading) => {\n  return {\n    type: \"SET_REQUEST_STATUS\",\n    payload: {\n      name,\n      loading\n    }\n  };\n};\n\nexport const closeLoading = name => setRequestStatus(name, \"loaded\");\nexport const openLoading = name => setRequestStatus(name, \"loading\");\nexport const closeLoadingShowFailInfo = name => setRequestStatus(name, \"failToLoad\");\nexport const fetchOrders = (request, type, userInfo) => dispatch => {\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  let roles = auth === null || auth === void 0 ? void 0 : auth.roles;\n  const isSubconTLOrPE = roles.indexOf('Subcon TL') > -1 || roles.indexOf('PE') > -1;\n  const isEISV = roles.indexOf('EISV') > -1;\n  dispatch(action.openLoading(\"masterData\")); //设置loading\n\n  api.fetchMasterData((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    const {\n      entities\n    } = normalize(response.data, schema.masterData);\n    entities[\"nonConformityConfig\"] = getNonConformityConfig();\n    db.cache.put({\n      id: \"masterData\",\n      data: entities\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"masterDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n    isEISV && dispatch(action.fetchTasksList(userInfo, dispatch)).then(() => {\n      fetchOrdersData(request, type, userInfo, entities);\n    });\n    isSubconTLOrPE && fetchOrdersData(request, type, userInfo, entities);\n    isSubconTLOrPE && dispatch(action.fetchTasksList(userInfo, dispatch));\n  }).finally(() => {\n    db.cache.put({\n      id: \"dataVersion\",\n      data: \"lastVersion\"\n    });\n    dispatch(action.closeLoading(\"masterData\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"masterData\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchDocuments = (request, userInfo) => dispatch => {\n  dispatch(action.openLoading(\"document\")); //设置loading\n\n  api.getDocumentList(request).then(response => {\n    return db.cache.put({\n      id: \"documentList\",\n      data: response.data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"documentListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"document\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"document\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n  dispatch(action.openLoading(\"templateList\")); //设置loading\n\n  api.fetchTemplatesData((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    const data = templatesConverter(response.data);\n    db.cache.put({\n      id: \"templatesData\",\n      data: data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"templateListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"templateList\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"templateList\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchTasksList = (request, userInfo) => dispatch => {\n  console.log(userInfo); // return false\n\n  dispatch(action.openLoading(\"taskList\")); //设置loading\n\n  return api.fetchTasks((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    return db.cache.put({\n      id: \"tasks\",\n      data: response.data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"taskListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n    fetchOrdersData(request, '', userInfo, entities);\n  }).finally(() => {\n    dispatch(action.closeLoading(\"taskList\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"taskList\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchOrdersData = (request, type, userInfo, entities) => {\n  let projects = entities.workCenters ? Object.keys(entities.workCenters) : [];\n  console.log(entities);\n  const dispatch = store.dispatch;\n  dispatch(action.openLoading(\"ordersData\"));\n  api.fetchOrdersDataByProjectsAndMerge(projects, 1, userInfo).then(response => {\n    const data = response;\n    data.orderActivities = orderActivitiesSort(data.orderActivities);\n    const {\n      entities\n    } = normalize(response, schema.ordersData);\n    db.cache.put({\n      id: \"ordersData\",\n      data: entities\n    }).then(() => {\n      const param = {\n        projectNos: projects\n      };\n\n      if (userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) {\n        param[\"pNumber\"] = userInfo.pNumber;\n      }\n\n      repo.fetchLocalInstallationStepsConfirmDate(param).then(() => {\n        db.cache.get(\"dataRefreshTime\").then(cache => {\n          const datatime = cache.data;\n          datatime[\"orderDataRefreshTime\"] = currentRefreshTime();\n          db.cache.put({\n            id: \"dataRefreshTime\",\n            data: datatime\n          }).then(() => {\n            dispatch(action.setAllDataRefreshTime(datatime));\n            type === \"all\" && dispatch(action.fetchDocuments(request, userInfo, dispatch));\n          });\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"ordersData\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/refreshTime.js"],"names":["action","api","db","schema","currentRefreshTime","orderActivitiesSort","templatesConverter","getNonConformityConfig","normalize","repo","store","setAllDataRefreshTime","data","type","payload","setRequestStatus","name","loading","closeLoading","openLoading","closeLoadingShowFailInfo","fetchOrders","request","userInfo","dispatch","auth","JSON","parse","window","localStorage","getItem","roles","isSubconTLOrPE","indexOf","isEISV","fetchMasterData","pNumber","then","response","entities","masterData","cache","put","id","get","datatime","fetchTasksList","fetchOrdersData","finally","catch","error","setError","message","fetchDocuments","getDocumentList","fetchTemplatesData","console","log","fetchTasks","projects","workCenters","Object","keys","fetchOrdersDataByProjectsAndMerge","orderActivities","ordersData","param","projectNos","fetchLocalInstallationStepsConfirmDate"],"mappings":"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","sourcesContent":["import * as action from \"actions\";\r\nimport * as api from \"api\";\r\nimport { db } from \"js/db\";\r\nimport * as schema from \"js/schema\";\r\nimport {\r\n  currentRefreshTime,\r\n  orderActivitiesSort,\r\n  templatesConverter,\r\n  getNonConformityConfig\r\n} from \"js/util\";\r\nimport { normalize } from \"normalizr\";\r\nimport * as repo from \"js/fetch\";\r\nimport store from \"js/store\";\r\n\r\nexport const setAllDataRefreshTime = (data) => ({\r\n  type: \"SET_ALL_DATA_REFRESH_TIME\",\r\n  payload: data,\r\n});\r\n\r\nconst setRequestStatus = (name, loading) => {\r\n  return { type: \"SET_REQUEST_STATUS\", payload: { name, loading } };\r\n};\r\n\r\nexport const closeLoading = (name) => setRequestStatus(name, \"loaded\");\r\n\r\nexport const openLoading = (name) => setRequestStatus(name, \"loading\");\r\n\r\nexport const closeLoadingShowFailInfo = (name) =>\r\n  setRequestStatus(name, \"failToLoad\");\r\n\r\nexport const fetchOrders = (request, type, userInfo) => (dispatch) => {\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n  let roles = auth?.roles;\r\n  const isSubconTLOrPE = roles.indexOf('Subcon TL') > -1 || roles.indexOf('PE') > -1;\r\n  const isEISV = roles.indexOf('EISV') > -1;\r\n\r\n  dispatch(action.openLoading(\"masterData\")); //设置loading\r\n  api\r\n    .fetchMasterData(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      const { entities } = normalize(response.data, schema.masterData);\r\n      entities[\"nonConformityConfig\"] = getNonConformityConfig()\r\n      db.cache.put({ id: \"masterData\", data: entities }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"masterDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n\r\n  \r\n    \r\n      isEISV && dispatch(action.fetchTasksList(userInfo, dispatch)).then(() => {\r\n        fetchOrdersData(request, type, userInfo, entities)\r\n      }) \r\n\r\n      isSubconTLOrPE && fetchOrdersData(request, type, userInfo, entities);\r\n\r\n      isSubconTLOrPE && dispatch(action.fetchTasksList(userInfo, dispatch));\r\n\r\n    })\r\n    .finally(() => {\r\n      db.cache.put({ id: \"dataVersion\", data: \"lastVersion\" })\r\n      dispatch(action.closeLoading(\"masterData\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"masterData\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\nexport const fetchDocuments = (request, userInfo) => (dispatch) => {\r\n  dispatch(action.openLoading(\"document\")); //设置loading\r\n  api\r\n    .getDocumentList(request)\r\n    .then((response) => {\r\n      return db.cache\r\n        .put({ id: \"documentList\", data: response.data })\r\n        .then(() => {\r\n          db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n            const datatime = cache.data;\r\n            datatime[\"documentListDataRefreshTime\"] = currentRefreshTime();\r\n            db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n              dispatch(action.setAllDataRefreshTime(datatime));\r\n            });\r\n          });\r\n        });\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"document\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"document\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n\r\n  dispatch(action.openLoading(\"templateList\")); //设置loading\r\n  api\r\n    .fetchTemplatesData(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      const data = templatesConverter(response.data);\r\n      db.cache.put({ id: \"templatesData\", data: data }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"templateListDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n    })\r\n\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"templateList\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"templateList\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\nexport const fetchTasksList = (request,userInfo) => (dispatch) => {\r\n  console.log(userInfo)\r\n  // return false\r\n  dispatch(action.openLoading(\"taskList\")); //设置loading\r\n return api\r\n    .fetchTasks(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      return db.cache.put({ id: \"tasks\", data: response.data }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"taskListDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n\r\n      fetchOrdersData(request, '', userInfo, entities)\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"taskList\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"taskList\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\n\r\nexport const fetchOrdersData = (request, type, userInfo, entities)  => {\r\n  let projects = entities.workCenters\r\n    ? Object.keys(entities.workCenters)\r\n    : [];\r\n  console.log(entities)\r\n  const dispatch = store.dispatch;\r\n  dispatch(action.openLoading(\"ordersData\"));\r\n  api\r\n    .fetchOrdersDataByProjectsAndMerge(projects, 1, userInfo)\r\n    .then((response) => {\r\n      const data = response;\r\n      data.orderActivities = orderActivitiesSort(data.orderActivities);\r\n      const { entities } = normalize(response, schema.ordersData);\r\n      db.cache.put({ id: \"ordersData\", data: entities }).then(() => {\r\n        const param = { projectNos: projects }\r\n        if (userInfo?.pNumber) {\r\n          param[\"pNumber\"] = userInfo.pNumber\r\n        }\r\n        repo\r\n          .fetchLocalInstallationStepsConfirmDate(param)\r\n          .then(() => {\r\n            db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n              const datatime = cache.data;\r\n              datatime[\"orderDataRefreshTime\"] = currentRefreshTime();\r\n              db.cache\r\n                .put({ id: \"dataRefreshTime\", data: datatime })\r\n                .then(() => {\r\n                  dispatch(action.setAllDataRefreshTime(datatime));\r\n                  type === \"all\" &&\r\n                    dispatch(action.fetchDocuments(request, userInfo, dispatch));\r\n                });\r\n            });\r\n          });\r\n      });\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"ordersData\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}