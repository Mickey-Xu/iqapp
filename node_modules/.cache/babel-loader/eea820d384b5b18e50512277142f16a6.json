{"ast":null,"code":"import * as api from \"api\";\nimport * as action from \"actions\";\nimport { db } from \"js/db\";\nexport const setTasks = data => ({\n  type: \"SET_TASKS\",\n  payload: data\n});\nexport const fetchCreateTask = data => dispatch => {\n  dispatch(action.showLoading());\n  return api.createTask(data).then(response => {\n    //get task\n    dispatch(action.hideLoading());\n  }).catch(error => {\n    if (error.code === 401) {\n      dispatch(action.setAuth(null));\n    }\n\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};\nexport const processingTasks = (type, data) => dispatch => {\n  dispatch(action.showLoading());\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  const userInfo = {\n    userId: auth.userName\n  };\n  return api.processingTasks(type.toLocaleUpperCase(), data.taskId, userInfo).then(response => {\n    dispatch(action.hideLoading());\n    db.cache.get(\"tasks\").then(cache => {\n      const result = {\n        taskId: item.id,\n        taskType: item.type,\n        projectNo: item.projectNo,\n        orderNo: item.salesOrderNo,\n        activityNo: item.activityNo,\n        projectName: item.projectName,\n        planStartDate: item.planStartDate,\n        planEndDate: item.planEndDate,\n        actualStartDate: item.actualStartDate,\n        actualEndDate: item.actualEndDate,\n        actualCloseDate: item.actualClosedDate,\n        statusDesc: item.statusDesc,\n        status: item.status === 'NEW' ? 'awaitStart' : item.status === 'PROCESSING' ? 'awaitComplate' : item.status === \"FINISHED\" ? 'awaitClose' : 'closed'\n      };\n      const lastData = cache.data.map(task => task.taskId === data.taskId ? { ...task,\n        ...response.data.data\n      } : task);\n      db.cache.put({\n        id: \"tasks\",\n        data: lastData\n      }).then(() => {\n        dispatch(action.setTasks(lastData));\n      });\n    });\n  }).catch(error => {\n    console.log(error);\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/task.js"],"names":["api","action","db","setTasks","data","type","payload","fetchCreateTask","dispatch","showLoading","createTask","then","response","hideLoading","catch","error","code","setAuth","setError","message","finally","processingTasks","auth","JSON","parse","window","localStorage","getItem","userInfo","userId","userName","toLocaleUpperCase","taskId","cache","get","result","item","id","taskType","projectNo","orderNo","salesOrderNo","activityNo","projectName","planStartDate","planEndDate","actualStartDate","actualEndDate","actualCloseDate","actualClosedDate","statusDesc","status","lastData","map","task","put","console","log"],"mappings":"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","sourcesContent":["import * as api from \"api\";\r\nimport * as action from \"actions\";\r\nimport { db } from \"js/db\";\r\n\r\nexport const setTasks = (data) => ({\r\n  type: \"SET_TASKS\",\r\n  payload: data,\r\n});\r\n\r\nexport const fetchCreateTask = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .createTask(data)\r\n    .then((response) => {\r\n      //get task\r\n      dispatch(action.hideLoading());\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\n\r\nexport const processingTasks = (type, data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n\r\n  const userInfo = {\r\n    userId: auth.userName\r\n  };\r\n\r\n  return api\r\n    .processingTasks(type.toLocaleUpperCase(), data.taskId, userInfo)\r\n    .then((response) => {\r\n      dispatch(action.hideLoading());\r\n      db.cache.get(\"tasks\").then((cache) => {\r\n        const result = {\r\n          taskId: item.id,\r\n          taskType: item.type,\r\n          projectNo: item.projectNo,\r\n          orderNo: item.salesOrderNo,\r\n          activityNo: item.activityNo,\r\n          projectName: item.projectName,\r\n          planStartDate: item.planStartDate,\r\n          planEndDate: item.planEndDate,\r\n          actualStartDate: item.actualStartDate,\r\n          actualEndDate: item.actualEndDate,\r\n          actualCloseDate: item.actualClosedDate,\r\n          statusDesc: item.statusDesc,\r\n          status: item.status === 'NEW' ?\r\n            'awaitStart' :\r\n            item.status === 'PROCESSING' ?\r\n              'awaitComplate' :\r\n              item.status === \"FINISHED\" ?\r\n                'awaitClose' : 'closed'\r\n        }\r\n        \r\n\r\n        const lastData = cache.data.map(task =>\r\n          task.taskId === data.taskId\r\n            ? { ...task, ...response.data.data } \r\n            : task\r\n        );\r\n        db.cache.put({ id: \"tasks\", data: lastData }).then(() => {\r\n          dispatch(action.setTasks(lastData));\r\n        });\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.log(error)\r\n      dispatch(action.setError(error.message));\r\n    })  \r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}