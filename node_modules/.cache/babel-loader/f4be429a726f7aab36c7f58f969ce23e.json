{"ast":null,"code":"import * as action from \"actions\";\nimport * as api from \"api\";\nimport { db } from \"js/db\";\nimport * as schema from \"js/schema\";\nimport { currentRefreshTime, orderActivitiesSort, templatesConverter, getNonConformityConfig } from \"js/util\";\nimport { normalize } from \"normalizr\";\nimport * as repo from \"js/fetch\";\nexport const setAllDataRefreshTime = data => ({\n  type: \"SET_ALL_DATA_REFRESH_TIME\",\n  payload: data\n});\n\nconst setRequestStatus = (name, loading) => {\n  return {\n    type: \"SET_REQUEST_STATUS\",\n    payload: {\n      name,\n      loading\n    }\n  };\n};\n\nexport const closeLoading = name => setRequestStatus(name, \"loaded\");\nexport const openLoading = name => setRequestStatus(name, \"loading\");\nexport const closeLoadingShowFailInfo = name => setRequestStatus(name, \"failToLoad\");\nexport const fetchOrders = (request, type, userInfo) => dispatch => {\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  let roles = ['EISV'];\n  const isSubconTLOrPE = roles.indexOf('Subcon TL') > -1 || roles.indexOf('PE') > -1;\n  const isEISV = roles.indexOf('EISV') > -1;\n  dispatch(action.openLoading(\"masterData\")); //设置loading\n\n  api.fetchMasterData((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    const {\n      entities\n    } = normalize(response.data, schema.masterData);\n    entities[\"nonConformityConfig\"] = getNonConformityConfig();\n    db.cache.put({\n      id: \"masterData\",\n      data: entities\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"masterDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n    let projects = entities.workCenters ? Object.keys(entities.workCenters) : [];\n    isEISV && dispatch(action.fetchTasksList(userInfo, dispatch)).then(res => {\n      dispatch(action.openLoading(\"ordersData\"));\n      api.fetchOrdersDataByProjectsAndMerge(projects, 1, userInfo).then(response => {\n        const data = response;\n        data.orderActivities = orderActivitiesSort(data.orderActivities);\n        const {\n          entities\n        } = normalize(response, schema.ordersData);\n        db.cache.put({\n          id: \"ordersData\",\n          data: entities\n        }).then(() => {\n          const param = {\n            projectNos: projects\n          };\n\n          if (userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) {\n            param[\"pNumber\"] = userInfo.pNumber;\n          }\n\n          repo.fetchLocalInstallationStepsConfirmDate(param).then(() => {\n            db.cache.get(\"dataRefreshTime\").then(cache => {\n              const datatime = cache.data;\n              datatime[\"orderDataRefreshTime\"] = currentRefreshTime();\n              db.cache.put({\n                id: \"dataRefreshTime\",\n                data: datatime\n              }).then(() => {\n                dispatch(action.setAllDataRefreshTime(datatime));\n                type === \"all\" && dispatch(action.fetchDocuments(request, userInfo, dispatch));\n              });\n            });\n          });\n        });\n      }).finally(() => {\n        dispatch(action.closeLoading(\"ordersData\"));\n      }).catch(error => {\n        dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\n        dispatch(action.setError(error.message));\n        return false;\n      });\n    });\n    isSubconTLOrPE && dispatch(action.fetchTasksList(userInfo, dispatch));\n  }).finally(() => {\n    db.cache.put({\n      id: \"dataVersion\",\n      data: \"lastVersion\"\n    });\n    dispatch(action.closeLoading(\"masterData\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"masterData\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchDocuments = (request, userInfo) => dispatch => {\n  dispatch(action.openLoading(\"document\")); //设置loading\n\n  api.getDocumentList(request).then(response => {\n    return db.cache.put({\n      id: \"documentList\",\n      data: response.data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"documentListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"document\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"document\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n  dispatch(action.openLoading(\"templateList\")); //设置loading\n\n  api.fetchTemplatesData((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    const data = templatesConverter(response.data);\n    db.cache.put({\n      id: \"templatesData\",\n      data: data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"templateListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"templateList\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"templateList\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};\nexport const fetchTasksList = userInfo => dispatch => {\n  console.log(userInfo); // return false\n\n  dispatch(action.openLoading(\"taskList\")); //设置loading\n\n  return api.fetchTasks((userInfo === null || userInfo === void 0 ? void 0 : userInfo.pNumber) ? userInfo : {}).then(response => {\n    return db.cache.put({\n      id: \"tasks\",\n      data: response.data\n    }).then(() => {\n      db.cache.get(\"dataRefreshTime\").then(cache => {\n        const datatime = cache.data;\n        datatime[\"taskListDataRefreshTime\"] = currentRefreshTime();\n        db.cache.put({\n          id: \"dataRefreshTime\",\n          data: datatime\n        }).then(() => {\n          dispatch(action.setAllDataRefreshTime(datatime));\n        });\n      });\n    });\n  }).finally(() => {\n    dispatch(action.closeLoading(\"taskList\"));\n  }).catch(error => {\n    dispatch(action.closeLoadingShowFailInfo(\"taskList\"));\n    dispatch(action.setError(error.message));\n    return false;\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/refreshTime.js"],"names":["action","api","db","schema","currentRefreshTime","orderActivitiesSort","templatesConverter","getNonConformityConfig","normalize","repo","setAllDataRefreshTime","data","type","payload","setRequestStatus","name","loading","closeLoading","openLoading","closeLoadingShowFailInfo","fetchOrders","request","userInfo","dispatch","auth","JSON","parse","window","localStorage","getItem","roles","isSubconTLOrPE","indexOf","isEISV","fetchMasterData","pNumber","then","response","entities","masterData","cache","put","id","get","datatime","projects","workCenters","Object","keys","fetchTasksList","res","fetchOrdersDataByProjectsAndMerge","orderActivities","ordersData","param","projectNos","fetchLocalInstallationStepsConfirmDate","fetchDocuments","finally","catch","error","setError","message","getDocumentList","fetchTemplatesData","console","log","fetchTasks"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,SAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,EAAT,QAAmB,OAAnB;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA,SACEC,kBADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,sBAJF,QAKO,SALP;AAMA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAO,KAAKC,IAAZ,MAAsB,UAAtB;AAEA,OAAO,MAAMC,qBAAqB,GAAIC,IAAD,KAAW;AAC9CC,EAAAA,IAAI,EAAE,2BADwC;AAE9CC,EAAAA,OAAO,EAAEF;AAFqC,CAAX,CAA9B;;AAKP,MAAMG,gBAAgB,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC1C,SAAO;AAAEJ,IAAAA,IAAI,EAAE,oBAAR;AAA8BC,IAAAA,OAAO,EAAE;AAAEE,MAAAA,IAAF;AAAQC,MAAAA;AAAR;AAAvC,GAAP;AACD,CAFD;;AAIA,OAAO,MAAMC,YAAY,GAAIF,IAAD,IAAUD,gBAAgB,CAACC,IAAD,EAAO,QAAP,CAA/C;AAEP,OAAO,MAAMG,WAAW,GAAIH,IAAD,IAAUD,gBAAgB,CAACC,IAAD,EAAO,SAAP,CAA9C;AAEP,OAAO,MAAMI,wBAAwB,GAAIJ,IAAD,IACtCD,gBAAgB,CAACC,IAAD,EAAO,YAAP,CADX;AAGP,OAAO,MAAMK,WAAW,GAAG,CAACC,OAAD,EAAUT,IAAV,EAAgBU,QAAhB,KAA8BC,QAAD,IAAc;AACpE,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAX,CAAb;AACA,MAAIC,KAAK,GAAG,CAAC,MAAD,CAAZ;AACA,QAAMC,cAAc,GAAGD,KAAK,CAACE,OAAN,CAAc,WAAd,IAA6B,CAAC,CAA9B,IAAmCF,KAAK,CAACE,OAAN,CAAc,IAAd,IAAsB,CAAC,CAAjF;AACA,QAAMC,MAAM,GAAGH,KAAK,CAACE,OAAN,CAAc,MAAd,IAAwB,CAAC,CAAxC;AAEAT,EAAAA,QAAQ,CAACvB,MAAM,CAACkB,WAAP,CAAmB,YAAnB,CAAD,CAAR,CANoE,CAMxB;;AAC5CjB,EAAAA,GAAG,CACAiC,eADH,CACmB,CAAAZ,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEa,OAAV,IAAoBb,QAApB,GAA+B,EADlD,EAEGc,IAFH,CAESC,QAAD,IAAc;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAe9B,SAAS,CAAC6B,QAAQ,CAAC1B,IAAV,EAAgBR,MAAM,CAACoC,UAAvB,CAA9B;AACAD,IAAAA,QAAQ,CAAC,qBAAD,CAAR,GAAkC/B,sBAAsB,EAAxD;AACAL,IAAAA,EAAE,CAACsC,KAAH,CAASC,GAAT,CAAa;AAAEC,MAAAA,EAAE,EAAE,YAAN;AAAoB/B,MAAAA,IAAI,EAAE2B;AAA1B,KAAb,EAAmDF,IAAnD,CAAwD,MAAM;AAC5DlC,MAAAA,EAAE,CAACsC,KAAH,CAASG,GAAT,CAAa,iBAAb,EAAgCP,IAAhC,CAAsCI,KAAD,IAAW;AAC9C,cAAMI,QAAQ,GAAGJ,KAAK,CAAC7B,IAAvB;AACAiC,QAAAA,QAAQ,CAAC,uBAAD,CAAR,GAAoCxC,kBAAkB,EAAtD;AACAF,QAAAA,EAAE,CAACsC,KAAH,CAASC,GAAT,CAAa;AAAEC,UAAAA,EAAE,EAAE,iBAAN;AAAyB/B,UAAAA,IAAI,EAAEiC;AAA/B,SAAb,EAAwDR,IAAxD,CAA6D,MAAM;AACjEb,UAAAA,QAAQ,CAACvB,MAAM,CAACU,qBAAP,CAA6BkC,QAA7B,CAAD,CAAR;AACD,SAFD;AAGD,OAND;AAOD,KARD;AAUA,QAAIC,QAAQ,GAAGP,QAAQ,CAACQ,WAAT,GACXC,MAAM,CAACC,IAAP,CAAYV,QAAQ,CAACQ,WAArB,CADW,GAEX,EAFJ;AAIAb,IAAAA,MAAM,IAAIV,QAAQ,CAACvB,MAAM,CAACiD,cAAP,CAAsB3B,QAAtB,EAAgCC,QAAhC,CAAD,CAAR,CAAoDa,IAApD,CAA0Dc,GAAD,IAAS;AAC1E3B,MAAAA,QAAQ,CAACvB,MAAM,CAACkB,WAAP,CAAmB,YAAnB,CAAD,CAAR;AACAjB,MAAAA,GAAG,CACAkD,iCADH,CACqCN,QADrC,EAC+C,CAD/C,EACkDvB,QADlD,EAEGc,IAFH,CAESC,QAAD,IAAc;AAClB,cAAM1B,IAAI,GAAG0B,QAAb;AACA1B,QAAAA,IAAI,CAACyC,eAAL,GAAuB/C,mBAAmB,CAACM,IAAI,CAACyC,eAAN,CAA1C;AACA,cAAM;AAAEd,UAAAA;AAAF,YAAe9B,SAAS,CAAC6B,QAAD,EAAWlC,MAAM,CAACkD,UAAlB,CAA9B;AACAnD,QAAAA,EAAE,CAACsC,KAAH,CAASC,GAAT,CAAa;AAAEC,UAAAA,EAAE,EAAE,YAAN;AAAoB/B,UAAAA,IAAI,EAAE2B;AAA1B,SAAb,EAAmDF,IAAnD,CAAwD,MAAM;AAC5D,gBAAMkB,KAAK,GAAG;AAAEC,YAAAA,UAAU,EAAEV;AAAd,WAAd;;AACA,cAAIvB,QAAJ,aAAIA,QAAJ,uBAAIA,QAAQ,CAAEa,OAAd,EAAuB;AACrBmB,YAAAA,KAAK,CAAC,SAAD,CAAL,GAAmBhC,QAAQ,CAACa,OAA5B;AACD;;AACD1B,UAAAA,IAAI,CACD+C,sCADH,CAC0CF,KAD1C,EAEGlB,IAFH,CAEQ,MAAM;AACVlC,YAAAA,EAAE,CAACsC,KAAH,CAASG,GAAT,CAAa,iBAAb,EAAgCP,IAAhC,CAAsCI,KAAD,IAAW;AAC9C,oBAAMI,QAAQ,GAAGJ,KAAK,CAAC7B,IAAvB;AACAiC,cAAAA,QAAQ,CAAC,sBAAD,CAAR,GAAmCxC,kBAAkB,EAArD;AACAF,cAAAA,EAAE,CAACsC,KAAH,CACGC,GADH,CACO;AAAEC,gBAAAA,EAAE,EAAE,iBAAN;AAAyB/B,gBAAAA,IAAI,EAAEiC;AAA/B,eADP,EAEGR,IAFH,CAEQ,MAAM;AACVb,gBAAAA,QAAQ,CAACvB,MAAM,CAACU,qBAAP,CAA6BkC,QAA7B,CAAD,CAAR;AACAhC,gBAAAA,IAAI,KAAK,KAAT,IACEW,QAAQ,CAACvB,MAAM,CAACyD,cAAP,CAAsBpC,OAAtB,EAA+BC,QAA/B,EAAyCC,QAAzC,CAAD,CADV;AAED,eANH;AAOD,aAVD;AAWD,WAdH;AAeD,SApBD;AAqBD,OA3BH,EA4BGmC,OA5BH,CA4BW,MAAM;AACbnC,QAAAA,QAAQ,CAACvB,MAAM,CAACiB,YAAP,CAAoB,YAApB,CAAD,CAAR;AACD,OA9BH,EA+BG0C,KA/BH,CA+BUC,KAAD,IAAW;AAChBrC,QAAAA,QAAQ,CAACvB,MAAM,CAACmB,wBAAP,CAAgC,YAAhC,CAAD,CAAR;AACAI,QAAAA,QAAQ,CAACvB,MAAM,CAAC6D,QAAP,CAAgBD,KAAK,CAACE,OAAtB,CAAD,CAAR;AACA,eAAO,KAAP;AACD,OAnCH;AAoCD,KAtCS,CAAV;AA0CA/B,IAAAA,cAAc,IAAIR,QAAQ,CAACvB,MAAM,CAACiD,cAAP,CAAsB3B,QAAtB,EAAgCC,QAAhC,CAAD,CAA1B;AAED,GA/DH,EAgEGmC,OAhEH,CAgEW,MAAM;AACbxD,IAAAA,EAAE,CAACsC,KAAH,CAASC,GAAT,CAAa;AAAEC,MAAAA,EAAE,EAAE,aAAN;AAAqB/B,MAAAA,IAAI,EAAE;AAA3B,KAAb;AACAY,IAAAA,QAAQ,CAACvB,MAAM,CAACiB,YAAP,CAAoB,YAApB,CAAD,CAAR;AACD,GAnEH,EAoEG0C,KApEH,CAoEUC,KAAD,IAAW;AAChBrC,IAAAA,QAAQ,CAACvB,MAAM,CAACmB,wBAAP,CAAgC,YAAhC,CAAD,CAAR;AACAI,IAAAA,QAAQ,CAACvB,MAAM,CAAC6D,QAAP,CAAgBD,KAAK,CAACE,OAAtB,CAAD,CAAR;AACA,WAAO,KAAP;AACD,GAxEH;AAyED,CAhFM;AAkFP,OAAO,MAAML,cAAc,GAAG,CAACpC,OAAD,EAAUC,QAAV,KAAwBC,QAAD,IAAc;AACjEA,EAAAA,QAAQ,CAACvB,MAAM,CAACkB,WAAP,CAAmB,UAAnB,CAAD,CAAR,CADiE,CACvB;;AAC1CjB,EAAAA,GAAG,CACA8D,eADH,CACmB1C,OADnB,EAEGe,IAFH,CAESC,QAAD,IAAc;AAClB,WAAOnC,EAAE,CAACsC,KAAH,CACJC,GADI,CACA;AAAEC,MAAAA,EAAE,EAAE,cAAN;AAAsB/B,MAAAA,IAAI,EAAE0B,QAAQ,CAAC1B;AAArC,KADA,EAEJyB,IAFI,CAEC,MAAM;AACVlC,MAAAA,EAAE,CAACsC,KAAH,CAASG,GAAT,CAAa,iBAAb,EAAgCP,IAAhC,CAAsCI,KAAD,IAAW;AAC9C,cAAMI,QAAQ,GAAGJ,KAAK,CAAC7B,IAAvB;AACAiC,QAAAA,QAAQ,CAAC,6BAAD,CAAR,GAA0CxC,kBAAkB,EAA5D;AACAF,QAAAA,EAAE,CAACsC,KAAH,CAASC,GAAT,CAAa;AAAEC,UAAAA,EAAE,EAAE,iBAAN;AAAyB/B,UAAAA,IAAI,EAAEiC;AAA/B,SAAb,EAAwDR,IAAxD,CAA6D,MAAM;AACjEb,UAAAA,QAAQ,CAACvB,MAAM,CAACU,qBAAP,CAA6BkC,QAA7B,CAAD,CAAR;AACD,SAFD;AAGD,OAND;AAOD,KAVI,CAAP;AAWD,GAdH,EAeGc,OAfH,CAeW,MAAM;AACbnC,IAAAA,QAAQ,CAACvB,MAAM,CAACiB,YAAP,CAAoB,UAApB,CAAD,CAAR;AACD,GAjBH,EAkBG0C,KAlBH,CAkBUC,KAAD,IAAW;AAChBrC,IAAAA,QAAQ,CAACvB,MAAM,CAACmB,wBAAP,CAAgC,UAAhC,CAAD,CAAR;AACAI,IAAAA,QAAQ,CAACvB,MAAM,CAAC6D,QAAP,CAAgBD,KAAK,CAACE,OAAtB,CAAD,CAAR;AACA,WAAO,KAAP;AACD,GAtBH;AAwBAvC,EAAAA,QAAQ,CAACvB,MAAM,CAACkB,WAAP,CAAmB,cAAnB,CAAD,CAAR,CA1BiE,CA0BnB;;AAC9CjB,EAAAA,GAAG,CACA+D,kBADH,CACsB,CAAA1C,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEa,OAAV,IAAoBb,QAApB,GAA+B,EADrD,EAEGc,IAFH,CAESC,QAAD,IAAc;AAClB,UAAM1B,IAAI,GAAGL,kBAAkB,CAAC+B,QAAQ,CAAC1B,IAAV,CAA/B;AACAT,IAAAA,EAAE,CAACsC,KAAH,CAASC,GAAT,CAAa;AAAEC,MAAAA,EAAE,EAAE,eAAN;AAAuB/B,MAAAA,IAAI,EAAEA;AAA7B,KAAb,EAAkDyB,IAAlD,CAAuD,MAAM;AAC3DlC,MAAAA,EAAE,CAACsC,KAAH,CAASG,GAAT,CAAa,iBAAb,EAAgCP,IAAhC,CAAsCI,KAAD,IAAW;AAC9C,cAAMI,QAAQ,GAAGJ,KAAK,CAAC7B,IAAvB;AACAiC,QAAAA,QAAQ,CAAC,6BAAD,CAAR,GAA0CxC,kBAAkB,EAA5D;AACAF,QAAAA,EAAE,CAACsC,KAAH,CAASC,GAAT,CAAa;AAAEC,UAAAA,EAAE,EAAE,iBAAN;AAAyB/B,UAAAA,IAAI,EAAEiC;AAA/B,SAAb,EAAwDR,IAAxD,CAA6D,MAAM;AACjEb,UAAAA,QAAQ,CAACvB,MAAM,CAACU,qBAAP,CAA6BkC,QAA7B,CAAD,CAAR;AACD,SAFD;AAGD,OAND;AAOD,KARD;AASD,GAbH,EAeGc,OAfH,CAeW,MAAM;AACbnC,IAAAA,QAAQ,CAACvB,MAAM,CAACiB,YAAP,CAAoB,cAApB,CAAD,CAAR;AACD,GAjBH,EAkBG0C,KAlBH,CAkBUC,KAAD,IAAW;AAChBrC,IAAAA,QAAQ,CAACvB,MAAM,CAACmB,wBAAP,CAAgC,cAAhC,CAAD,CAAR;AACAI,IAAAA,QAAQ,CAACvB,MAAM,CAAC6D,QAAP,CAAgBD,KAAK,CAACE,OAAtB,CAAD,CAAR;AACA,WAAO,KAAP;AACD,GAtBH;AAuBD,CAlDM;AAoDP,OAAO,MAAMb,cAAc,GAAI3B,QAAD,IAAeC,QAAD,IAAc;AACxD0C,EAAAA,OAAO,CAACC,GAAR,CAAY5C,QAAZ,EADwD,CAExD;;AACAC,EAAAA,QAAQ,CAACvB,MAAM,CAACkB,WAAP,CAAmB,UAAnB,CAAD,CAAR,CAHwD,CAGd;;AAC3C,SAAOjB,GAAG,CACNkE,UADG,CACQ,CAAA7C,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEa,OAAV,IAAoBb,QAApB,GAA+B,EADvC,EAEHc,IAFG,CAEGC,QAAD,IAAc;AAClB,WAAOnC,EAAE,CAACsC,KAAH,CAASC,GAAT,CAAa;AAAEC,MAAAA,EAAE,EAAE,OAAN;AAAe/B,MAAAA,IAAI,EAAE0B,QAAQ,CAAC1B;AAA9B,KAAb,EAAmDyB,IAAnD,CAAwD,MAAM;AACnElC,MAAAA,EAAE,CAACsC,KAAH,CAASG,GAAT,CAAa,iBAAb,EAAgCP,IAAhC,CAAsCI,KAAD,IAAW;AAC9C,cAAMI,QAAQ,GAAGJ,KAAK,CAAC7B,IAAvB;AACAiC,QAAAA,QAAQ,CAAC,yBAAD,CAAR,GAAsCxC,kBAAkB,EAAxD;AACAF,QAAAA,EAAE,CAACsC,KAAH,CAASC,GAAT,CAAa;AAAEC,UAAAA,EAAE,EAAE,iBAAN;AAAyB/B,UAAAA,IAAI,EAAEiC;AAA/B,SAAb,EAAwDR,IAAxD,CAA6D,MAAM;AACjEb,UAAAA,QAAQ,CAACvB,MAAM,CAACU,qBAAP,CAA6BkC,QAA7B,CAAD,CAAR;AACD,SAFD;AAGD,OAND;AAOD,KARM,CAAP;AASD,GAZG,EAaHc,OAbG,CAaK,MAAM;AACbnC,IAAAA,QAAQ,CAACvB,MAAM,CAACiB,YAAP,CAAoB,UAApB,CAAD,CAAR;AACD,GAfG,EAgBH0C,KAhBG,CAgBIC,KAAD,IAAW;AAChBrC,IAAAA,QAAQ,CAACvB,MAAM,CAACmB,wBAAP,CAAgC,UAAhC,CAAD,CAAR;AACAI,IAAAA,QAAQ,CAACvB,MAAM,CAAC6D,QAAP,CAAgBD,KAAK,CAACE,OAAtB,CAAD,CAAR;AACA,WAAO,KAAP;AACD,GApBG,CAAP;AAqBA,CAzBM","sourcesContent":["import * as action from \"actions\";\r\nimport * as api from \"api\";\r\nimport { db } from \"js/db\";\r\nimport * as schema from \"js/schema\";\r\nimport {\r\n  currentRefreshTime,\r\n  orderActivitiesSort,\r\n  templatesConverter,\r\n  getNonConformityConfig\r\n} from \"js/util\";\r\nimport { normalize } from \"normalizr\";\r\nimport * as repo from \"js/fetch\";\r\n\r\nexport const setAllDataRefreshTime = (data) => ({\r\n  type: \"SET_ALL_DATA_REFRESH_TIME\",\r\n  payload: data,\r\n});\r\n\r\nconst setRequestStatus = (name, loading) => {\r\n  return { type: \"SET_REQUEST_STATUS\", payload: { name, loading } };\r\n};\r\n\r\nexport const closeLoading = (name) => setRequestStatus(name, \"loaded\");\r\n\r\nexport const openLoading = (name) => setRequestStatus(name, \"loading\");\r\n\r\nexport const closeLoadingShowFailInfo = (name) =>\r\n  setRequestStatus(name, \"failToLoad\");\r\n\r\nexport const fetchOrders = (request, type, userInfo) => (dispatch) => {\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n  let roles = ['EISV'];\r\n  const isSubconTLOrPE = roles.indexOf('Subcon TL') > -1 || roles.indexOf('PE') > -1;\r\n  const isEISV = roles.indexOf('EISV') > -1;\r\n\r\n  dispatch(action.openLoading(\"masterData\")); //设置loading\r\n  api\r\n    .fetchMasterData(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      const { entities } = normalize(response.data, schema.masterData);\r\n      entities[\"nonConformityConfig\"] = getNonConformityConfig()\r\n      db.cache.put({ id: \"masterData\", data: entities }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"masterDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n\r\n      let projects = entities.workCenters\r\n        ? Object.keys(entities.workCenters)\r\n        : [];\r\n      \r\n      isEISV && dispatch(action.fetchTasksList(userInfo, dispatch)).then((res) => {\r\n        dispatch(action.openLoading(\"ordersData\"));\r\n        api\r\n          .fetchOrdersDataByProjectsAndMerge(projects, 1, userInfo)\r\n          .then((response) => {\r\n            const data = response;\r\n            data.orderActivities = orderActivitiesSort(data.orderActivities);\r\n            const { entities } = normalize(response, schema.ordersData);\r\n            db.cache.put({ id: \"ordersData\", data: entities }).then(() => {\r\n              const param = { projectNos: projects }\r\n              if (userInfo?.pNumber) {\r\n                param[\"pNumber\"] = userInfo.pNumber\r\n              }\r\n              repo\r\n                .fetchLocalInstallationStepsConfirmDate(param)\r\n                .then(() => {\r\n                  db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n                    const datatime = cache.data;\r\n                    datatime[\"orderDataRefreshTime\"] = currentRefreshTime();\r\n                    db.cache\r\n                      .put({ id: \"dataRefreshTime\", data: datatime })\r\n                      .then(() => {\r\n                        dispatch(action.setAllDataRefreshTime(datatime));\r\n                        type === \"all\" &&\r\n                          dispatch(action.fetchDocuments(request, userInfo, dispatch));\r\n                      });\r\n                  });\r\n                });\r\n            });\r\n          })\r\n          .finally(() => {\r\n            dispatch(action.closeLoading(\"ordersData\"));\r\n          })\r\n          .catch((error) => {\r\n            dispatch(action.closeLoadingShowFailInfo(\"ordersData\"));\r\n            dispatch(action.setError(error.message));\r\n            return false;\r\n          });\r\n      });\r\n      \r\n    \r\n      \r\n      isSubconTLOrPE && dispatch(action.fetchTasksList(userInfo, dispatch));\r\n\r\n    })\r\n    .finally(() => {\r\n      db.cache.put({ id: \"dataVersion\", data: \"lastVersion\" })\r\n      dispatch(action.closeLoading(\"masterData\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"masterData\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\nexport const fetchDocuments = (request, userInfo) => (dispatch) => {\r\n  dispatch(action.openLoading(\"document\")); //设置loading\r\n  api\r\n    .getDocumentList(request)\r\n    .then((response) => {\r\n      return db.cache\r\n        .put({ id: \"documentList\", data: response.data })\r\n        .then(() => {\r\n          db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n            const datatime = cache.data;\r\n            datatime[\"documentListDataRefreshTime\"] = currentRefreshTime();\r\n            db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n              dispatch(action.setAllDataRefreshTime(datatime));\r\n            });\r\n          });\r\n        });\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"document\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"document\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n\r\n  dispatch(action.openLoading(\"templateList\")); //设置loading\r\n  api\r\n    .fetchTemplatesData(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      const data = templatesConverter(response.data);\r\n      db.cache.put({ id: \"templatesData\", data: data }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"templateListDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n    })\r\n\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"templateList\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"templateList\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n\r\nexport const fetchTasksList = (userInfo) => (dispatch) => {\r\n  console.log(userInfo)\r\n  // return false\r\n  dispatch(action.openLoading(\"taskList\")); //设置loading\r\n return api\r\n    .fetchTasks(userInfo?.pNumber ? userInfo : {})\r\n    .then((response) => {\r\n      return db.cache.put({ id: \"tasks\", data: response.data }).then(() => {\r\n        db.cache.get(\"dataRefreshTime\").then((cache) => {\r\n          const datatime = cache.data;\r\n          datatime[\"taskListDataRefreshTime\"] = currentRefreshTime();\r\n          db.cache.put({ id: \"dataRefreshTime\", data: datatime }).then(() => {\r\n            dispatch(action.setAllDataRefreshTime(datatime));\r\n          });\r\n        });\r\n      });\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.closeLoading(\"taskList\"));\r\n    })\r\n    .catch((error) => {\r\n      dispatch(action.closeLoadingShowFailInfo(\"taskList\"));\r\n      dispatch(action.setError(error.message));\r\n      return false;\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}