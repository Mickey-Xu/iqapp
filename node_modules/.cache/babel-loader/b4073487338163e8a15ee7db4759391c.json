{"ast":null,"code":"import * as api from \"api\";\nimport * as action from \"actions\";\nimport { db } from \"js/db\";\nexport const setTasks = data => ({\n  type: \"SET_TASKS\",\n  payload: data\n});\nexport const fetchCreateTask = data => dispatch => {\n  dispatch(action.showLoading());\n  return api.createTask(data).then(response => {\n    //get task\n    dispatch(action.hideLoading());\n  }).catch(error => {\n    if (error.code === 401) {\n      dispatch(action.setAuth(null));\n    }\n\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};\nexport const processingTasks = (type, data) => dispatch => {\n  dispatch(action.showLoading());\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\n  const userInfo = {\n    userId: auth.userName\n  };\n  return api.processingTasks(type.toLocaleUpperCase(), data.taskId, userInfo).then(response => {\n    dispatch(action.hideLoading());\n    db.cache.get(\"tasks\").then(cache => {\n      console.log(response.data.data);\n      response.data.data[\"status\"] = \"mickey\"; // data['status'] =\n      //   type === 'start' ? 'awaitComplate' :\n      //   type === 'finish' ? 'awaitClose':\n      //     type === 'close' ? 'closed' :\n      // '' \n\n      console.log(response.data.data);\n      const lastData = cache.data.map(task => task.taskId === data.taskId ? { ...task,\n        ...data\n      } : task);\n      db.cache.put({\n        id: \"tasks\",\n        data: lastData\n      }).then(() => {\n        dispatch(action.setTasks(lastData));\n      });\n    });\n  }).catch(error => {\n    console.log(error);\n    dispatch(action.setError(error.message));\n  }).finally(() => {\n    dispatch(action.hideLoading());\n  });\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/actions/task.js"],"names":["api","action","db","setTasks","data","type","payload","fetchCreateTask","dispatch","showLoading","createTask","then","response","hideLoading","catch","error","code","setAuth","setError","message","finally","processingTasks","auth","JSON","parse","window","localStorage","getItem","userInfo","userId","userName","toLocaleUpperCase","taskId","cache","get","console","log","lastData","map","task","put","id"],"mappings":"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","sourcesContent":["import * as api from \"api\";\r\nimport * as action from \"actions\";\r\nimport { db } from \"js/db\";\r\n\r\nexport const setTasks = (data) => ({\r\n  type: \"SET_TASKS\",\r\n  payload: data,\r\n});\r\n\r\nexport const fetchCreateTask = (data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  return api\r\n    .createTask(data)\r\n    .then((response) => {\r\n      //get task\r\n      dispatch(action.hideLoading());\r\n    })\r\n    .catch((error) => {\r\n      if (error.code === 401) {\r\n        dispatch(action.setAuth(null));\r\n      }\r\n      dispatch(action.setError(error.message));\r\n    })\r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n};\r\n\r\n\r\nexport const processingTasks = (type, data) => (dispatch) => {\r\n  dispatch(action.showLoading());\r\n  const auth = JSON.parse(window.localStorage.getItem(\"auth\"));\r\n\r\n  const userInfo = {\r\n    userId: auth.userName\r\n  };\r\n\r\n  return api\r\n    .processingTasks(type.toLocaleUpperCase(), data.taskId, userInfo)\r\n    .then((response) => {\r\n      dispatch(action.hideLoading());\r\n      db.cache.get(\"tasks\").then((cache) => {\r\n        console.log(response.data.data)\r\n        response.data.data[\"status\"]=\"mickey\"\r\n        // data['status'] =\r\n        //   type === 'start' ? 'awaitComplate' :\r\n        //   type === 'finish' ? 'awaitClose':\r\n        //     type === 'close' ? 'closed' :\r\n              // '' \r\n        console.log(response.data.data)\r\n\r\n        const lastData = cache.data.map(task =>\r\n          task.taskId === data.taskId\r\n            ? { ...task, ...data } \r\n            : task\r\n        );\r\n        db.cache.put({ id: \"tasks\", data: lastData }).then(() => {\r\n          dispatch(action.setTasks(lastData));\r\n        });\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.log(error)\r\n      dispatch(action.setError(error.message));\r\n    })  \r\n    .finally(() => {\r\n      dispatch(action.hideLoading());\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}