{"ast":null,"code":"/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\nimport { appendChild, appendQuestionBlock, hasChildNode, getChildNode, getRequiredAttr, getAttrWithDefault, readQuestionBlock } from \"./utils/xml\";\nimport moment from \"moment\";\nexport default {\n  serialize(doc, findField, parentNode, field) {\n    const questionBlock = appendQuestionBlock(doc, findField, parentNode, \"date\", field);\n    const {\n      includeTime,\n      pastDateNotAllowed,\n      futureDateNotAllowed,\n      changeNotAllowed,\n      hasDefaultValue,\n      //   defaultValue,\n      value\n    } = field.settings;\n    var attr = {\n      \"past-date-not-allowed\": pastDateNotAllowed,\n      \"future-date-not-allowed\": futureDateNotAllowed,\n      \"change-not-allowed\": changeNotAllowed,\n      \"has-default-value\": hasDefaultValue,\n      value: value\n    };\n\n    if (hasDefaultValue) {\n      attr[\"default-value\"] = \"filleddate\";\n    }\n\n    appendChild(doc, questionBlock, includeTime ? \"datetime\" : \"date\", \"\", attr);\n  },\n\n  canDeserialize(node) {\n    return node.nodeName === \"question_block\" && (hasChildNode(node, \"date\") || hasChildNode(node, \"datetime\"));\n  },\n\n  deserialize(node) {\n    let field = readQuestionBlock(node, \"date\", \"date\"); // eslint-disable-line prefer-const\n\n    field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\n    const includeTime = hasChildNode(node, \"datetime\");\n    field.settings.includeTime = includeTime;\n    const dateNode = getChildNode(node, includeTime ? \"datetime\" : \"date\");\n    const dateString = dateNode.textContent;\n\n    if (dateString && dateString.trim() !== \"\") {\n      if (includeTime) {\n        field.settings.value = moment(new Date(dateString));\n      } else {\n        field.settings.value = moment(dateString, \"YYYY-MM-DD\");\n      }\n    }\n\n    field.settings.pastDateNotAllowed = getAttrWithDefault(dateNode, \"past-date-not-allowed\", \"false\") === \"true\";\n    field.settings.futureDateNotAllowed = getAttrWithDefault(dateNode, \"future-date-not-allowed\", \"false\") === \"true\";\n    field.settings.changeNotAllowed = getAttrWithDefault(dateNode, \"change-not-allowed\", \"false\") === \"true\";\n    field.settings.hasDefaultValue = getAttrWithDefault(dateNode, \"has-default-value\", \"false\") === \"true\";\n    field.settings.value = getAttrWithDefault(dateNode, \"value\", \"\");\n    return field;\n  }\n\n};","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/js/sfdl/DateIO.js"],"names":["appendChild","appendQuestionBlock","hasChildNode","getChildNode","getRequiredAttr","getAttrWithDefault","readQuestionBlock","moment","serialize","doc","findField","parentNode","field","questionBlock","includeTime","pastDateNotAllowed","futureDateNotAllowed","changeNotAllowed","hasDefaultValue","value","settings","attr","canDeserialize","node","nodeName","deserialize","required","dateNode","dateString","textContent","trim","Date"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (C) 2016 All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are not permitted unless explicitly granted in writing.\r\n *\r\n * Usage and modification rights granted to Schindler AG, Ebikon.\r\n */\r\n\r\nimport {\r\n  appendChild,\r\n  appendQuestionBlock,\r\n  hasChildNode,\r\n  getChildNode,\r\n  getRequiredAttr,\r\n  getAttrWithDefault,\r\n  readQuestionBlock,\r\n} from \"./utils/xml\";\r\nimport moment from \"moment\";\r\n\r\nexport default {\r\n  serialize(doc, findField, parentNode, field) {\r\n    const questionBlock = appendQuestionBlock(\r\n      doc,\r\n      findField,\r\n      parentNode,\r\n      \"date\",\r\n      field\r\n    );\r\n    const {\r\n      includeTime,\r\n      pastDateNotAllowed,\r\n      futureDateNotAllowed,\r\n      changeNotAllowed,\r\n      hasDefaultValue,\r\n      //   defaultValue,\r\n      value,\r\n    } = field.settings;\r\n\r\n    var attr = {\r\n      \"past-date-not-allowed\": pastDateNotAllowed,\r\n      \"future-date-not-allowed\": futureDateNotAllowed,\r\n      \"change-not-allowed\": changeNotAllowed,\r\n      \"has-default-value\": hasDefaultValue,\r\n      value: value,\r\n    };\r\n\r\n    if (hasDefaultValue) {\r\n      attr[\"default-value\"] = \"filleddate\";\r\n    }\r\n\r\n    appendChild(\r\n      doc,\r\n      questionBlock,\r\n      includeTime ? \"datetime\" : \"date\",\r\n      \"\",\r\n      attr\r\n    );\r\n  },\r\n\r\n  canDeserialize(node) {\r\n    return (\r\n      node.nodeName === \"question_block\" &&\r\n      (hasChildNode(node, \"date\") || hasChildNode(node, \"datetime\"))\r\n    );\r\n  },\r\n\r\n  deserialize(node) {\r\n    let field = readQuestionBlock(node, \"date\", \"date\"); // eslint-disable-line prefer-const\r\n    field.settings.required = getRequiredAttr(node, \"required\") === \"true\";\r\n\r\n    const includeTime = hasChildNode(node, \"datetime\");\r\n    field.settings.includeTime = includeTime;\r\n\r\n    const dateNode = getChildNode(node, includeTime ? \"datetime\" : \"date\");\r\n\r\n    const dateString = dateNode.textContent;\r\n    if (dateString && dateString.trim() !== \"\") {\r\n      if (includeTime) {\r\n        field.settings.value = moment(new Date(dateString));\r\n      } else {\r\n        field.settings.value = moment(dateString, \"YYYY-MM-DD\");\r\n      }\r\n    }\r\n\r\n    field.settings.pastDateNotAllowed =\r\n      getAttrWithDefault(dateNode, \"past-date-not-allowed\", \"false\") === \"true\";\r\n    field.settings.futureDateNotAllowed =\r\n      getAttrWithDefault(dateNode, \"future-date-not-allowed\", \"false\") ===\r\n      \"true\";\r\n    field.settings.changeNotAllowed =\r\n      getAttrWithDefault(dateNode, \"change-not-allowed\", \"false\") === \"true\";\r\n    field.settings.hasDefaultValue =\r\n      getAttrWithDefault(dateNode, \"has-default-value\", \"false\") === \"true\";\r\n\r\n    field.settings.value = getAttrWithDefault(dateNode, \"value\", \"\");\r\n\r\n    return field;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}