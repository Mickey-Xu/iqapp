{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\SCF-NI_PM_App\\\\SCF.InstallationQuality\\\\react-client\\\\src\\\\pages\\\\TaskListPage\\\\index.js\";\nimport { Box } from \"@material-ui/core\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport * as action from \"actions\";\nimport FFTab from \"components/FFTab\";\nimport TaskListItem from \"components/TaskListItem\";\nimport { LocalizeContext } from \"i18n\";\nimport * as repo from \"js/fetch\";\nimport { getTaskCount } from \"js/util\";\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { taskCleaner } from \"js/publicFn\";\nimport { useParams } from 'react-router-dom';\n\nconst Tasks = ({\n  type,\n  tasksData,\n  awaitComplate,\n  awaitClose,\n  submit\n}) => {\n  const history = useHistory();\n  const i18n = React.useContext(LocalizeContext);\n  const [status, setStatus] = React.useState(\"open\");\n  const params = useParams();\n  const tabs = [{\n    title: i18n.ISNTAPP_TO_COMPLETE,\n    value: \"open\"\n  }, {\n    title: i18n.ISNTAPP_TO_CLOSE,\n    value: \"pending\"\n  }, {\n    title: i18n.ISNTAPP_CLOSED,\n    value: \"close\"\n  }];\n  let currentStatusTasks = [];\n\n  if (status === \"open\") {\n    tasksData.forEach(item => {\n      if (item.Status === \"待完成\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  if (status === \"pending\") {\n    tasksData.forEach(item => {\n      if (item.Status === \"待关闭\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  if (status === \"close\") {\n    tasksData.forEach(item => {\n      if (item.Status === \"已关闭\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  currentStatusTasks.sort((a, b) => a.DueDate ? a.DueDate > b.DueDate ? 1 : -1 : 1);\n  return /*#__PURE__*/React.createElement(PrimaryLayout, {\n    name: \"tasks\",\n    title: params.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    style: {\n      position: \"fixed\",\n      top: \"52px\",\n      width: \"100%\",\n      zIndex: \"10000\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FFTab, {\n    tabs: tabs,\n    selectedTabValue: \"open\",\n    onTabChange: value => setStatus(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"22%\",\n      padding: \"2px 8px\",\n      backgroundColor: \"red\",\n      borderRadius: \"40px\",\n      color: \"white\",\n      display: open > 0 ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, awaitComplate), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"55%\",\n      padding: \"2px 8px\",\n      backgroundColor: \"red\",\n      borderRadius: \"40px\",\n      color: \"white\",\n      display: pending > 0 ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, pending)), /*#__PURE__*/React.createElement(Box, {\n    style: {\n      width: \"100%\",\n      padding: \"16px\",\n      position: \"absolute\",\n      top: \"32px\",\n      height: window.screen.height - 157 + \"px\",\n      overflow: \"hidden auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TaskListItem, {\n    data: currentStatusTasks,\n    status: status,\n    type: type,\n    submit: submitDatas => {\n      submit(submitDatas);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    match\n  } = ownProps;\n  const {\n    params\n  } = match;\n  const {\n    type\n  } = params;\n  const {\n    tasks\n  } = state;\n  let taskList = Object.keys(tasks).length > 0 ? tasks : [];\n  return {\n    type,\n    tasksData: taskList.filter(item => item.Task_type === type),\n    awaitComplate: 0,\n    awaitClose: 0\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: submitDatas => {\n      dispatch(action.fetchCreateTask([submitDatas])).then(response => {\n        repo.fetchTasks().then(data => {\n          dispatch(action.setTasks(data));\n        });\n      });\n    },\n    getTaskCount: (task, status) => {\n      let count = task.filter(item => item.status === status).length;\n      return count;\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/pages/TaskListPage/index.js"],"names":["Box","Fab","AddIcon","action","FFTab","TaskListItem","LocalizeContext","repo","getTaskCount","PrimaryLayout","React","connect","useHistory","taskCleaner","useParams","Tasks","type","tasksData","awaitComplate","awaitClose","submit","history","i18n","useContext","status","setStatus","useState","params","tabs","title","ISNTAPP_TO_COMPLETE","value","ISNTAPP_TO_CLOSE","ISNTAPP_CLOSED","currentStatusTasks","forEach","item","Status","push","sort","a","b","DueDate","position","top","width","zIndex","left","padding","backgroundColor","borderRadius","color","display","open","pending","height","window","screen","overflow","submitDatas","mapStateToProps","state","ownProps","match","tasks","taskList","Object","keys","length","filter","Task_type","mapDispatchToProps","dispatch","fetchCreateTask","then","response","fetchTasks","data","setTasks","task","count"],"mappings":"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","sourcesContent":["import { Box } from \"@material-ui/core\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport * as action from \"actions\";\r\nimport FFTab from \"components/FFTab\";\r\nimport TaskListItem from \"components/TaskListItem\";\r\nimport { LocalizeContext } from \"i18n\";\r\nimport * as repo from \"js/fetch\";\r\nimport { getTaskCount } from \"js/util\";\r\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { taskCleaner } from \"js/publicFn\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst Tasks = ({ type, tasksData, awaitComplate,awaitClose, submit }) => {\r\n  const history = useHistory();\r\n  const i18n = React.useContext(LocalizeContext);\r\n  const [status, setStatus] = React.useState(\"open\");\r\n  const params = useParams()\r\n\r\n  const tabs = [\r\n    { title: i18n.ISNTAPP_TO_COMPLETE, value: \"open\" },\r\n    { title: i18n.ISNTAPP_TO_CLOSE, value: \"pending\" },\r\n    { title: i18n.ISNTAPP_CLOSED, value: \"close\" },\r\n  ];\r\n\r\n  let currentStatusTasks = [];\r\n\r\n  if (status === \"open\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.Status === \"待完成\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (status === \"pending\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.Status === \"待关闭\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (status === \"close\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.Status === \"已关闭\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  currentStatusTasks.sort((a, b) =>\r\n    a.DueDate ? (a.DueDate > b.DueDate ? 1 : -1) : 1\r\n  );\r\n\r\n\r\n  return (\r\n    <PrimaryLayout name=\"tasks\" title={params.type}>\r\n      <Box\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"52px\",\r\n          width: \"100%\",\r\n          zIndex: \"10000\",\r\n        }}\r\n      >\r\n        <FFTab\r\n          tabs={tabs}\r\n          selectedTabValue={\"open\"}\r\n          onTabChange={(value) => setStatus(value)}\r\n        />\r\n        <span\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"0\",\r\n            left: \"22%\",\r\n            padding: \"2px 8px\",\r\n            backgroundColor: \"red\",\r\n            borderRadius: \"40px\",\r\n            color: \"white\",\r\n            display: open>0?'block':'none'\r\n          }}\r\n        >\r\n          {awaitComplate}\r\n        </span>\r\n            <span\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"0\",\r\n                left: \"55%\",\r\n                padding: \"2px 8px\",\r\n                backgroundColor: \"red\",\r\n                borderRadius: \"40px\",\r\n                color: \"white\",\r\n                display: pending > 0 ? 'block' : 'none'\r\n              }}\r\n            >\r\n          {pending}\r\n            </span>\r\n      </Box>\r\n\r\n      <Box\r\n        style={{\r\n          width: \"100%\",\r\n          padding: \"16px\",\r\n          position: \"absolute\",\r\n          top: \"32px\",\r\n          height: window.screen.height - 157 + \"px\",\r\n          overflow: \"hidden auto\",\r\n        }}\r\n      >\r\n        <TaskListItem\r\n          data={currentStatusTasks}\r\n          status={status}\r\n          type={type}\r\n          submit={(submitDatas) => { \r\n            submit(submitDatas);\r\n          }}\r\n        ></TaskListItem>\r\n      </Box>\r\n    </PrimaryLayout>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const { match } = ownProps;\r\n  const { params } = match;\r\n  const { type } = params;\r\n  const { tasks } = state;\r\n  \r\n  let taskList = Object.keys(tasks).length > 0 ? tasks : [];\r\n  return {\r\n    type,\r\n    tasksData:\r\n    taskList.filter((item) => item.Task_type === type),\r\n    awaitComplate: 0,\r\n    awaitClose:0\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    submit: (submitDatas) => {\r\n      dispatch(action.fetchCreateTask([submitDatas])).then((response) => {\r\n        repo.fetchTasks().then((data) => {\r\n          dispatch(action.setTasks(data));\r\n        });\r\n      });\r\n    },\r\n    getTaskCount: (task, status) => {\r\n     let count = task.filter((item)=>item.status===status).length\r\n      return count\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);\r\n"]},"metadata":{},"sourceType":"module"}