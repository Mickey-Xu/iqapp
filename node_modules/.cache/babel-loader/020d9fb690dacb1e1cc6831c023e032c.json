{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\SCF-NI_PM_App\\\\SCF.InstallationQuality\\\\react-client\\\\src\\\\pages\\\\TaskListPage\\\\index.js\";\nimport { Box } from \"@material-ui/core\";\nimport FFTab from \"components/FFTab\";\nimport TaskListItem from \"components/TaskListItem\";\nimport { LocalizeContext } from \"i18n\";\nimport { toDoOrDone } from \"js/util\";\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\n\nconst Tasks = ({\n  type,\n  tasksData,\n  getTaskCount,\n  submit\n}) => {\n  const i18n = React.useContext(LocalizeContext);\n  const [status, setStatus] = React.useState(\"open\");\n  const params = useParams();\n  const awaitComplate = getTaskCount(tasksData, 'awaitComplate');\n  const awaitClose = getTaskCount(tasksData, 'awaitClose');\n  const tabs = [{\n    title: i18n.ISNTAPP_TO_COMPLETE,\n    value: \"open\"\n  }, {\n    title: i18n.ISNTAPP_TO_CLOSE,\n    value: \"pending\"\n  }, {\n    title: i18n.ISNTAPP_CLOSED,\n    value: \"close\"\n  }];\n  let currentStatusTasks = [];\n\n  if (status === \"open\") {\n    tasksData.forEach(item => {\n      if (item.status === \"awaitComplate\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  if (status === \"pending\") {\n    tasksData.forEach(item => {\n      if (item.status === \"awaitClose\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  if (status === \"close\") {\n    tasksData.forEach(item => {\n      if (item.status === \"closed\") {\n        currentStatusTasks.push(item);\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(PrimaryLayout, {\n    name: \"tasks\",\n    title: params.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    style: {\n      position: \"fixed\",\n      top: \"52px\",\n      width: \"100%\",\n      zIndex: \"10000\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FFTab, {\n    tabs: tabs,\n    selectedTabValue: \"open\",\n    onTabChange: value => setStatus(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"22%\",\n      padding: \"2px 8px\",\n      backgroundColor: \"red\",\n      borderRadius: \"40px\",\n      color: \"white\",\n      display: awaitComplate > 0 ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, awaitComplate), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"55%\",\n      padding: \"2px 8px\",\n      backgroundColor: \"red\",\n      borderRadius: \"40px\",\n      color: \"white\",\n      display: awaitClose > 0 ? 'block' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, awaitClose)), /*#__PURE__*/React.createElement(Box, {\n    style: {\n      width: \"100%\",\n      padding: \"16px\",\n      position: \"absolute\",\n      top: \"32px\",\n      height: window.screen.height - 157 + \"px\",\n      overflow: \"hidden auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TaskListItem, {\n    data: currentStatusTasks,\n    status: status,\n    type: type,\n    submit: (action, data) => {\n      submit(action, data);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    match\n  } = ownProps;\n  const {\n    params\n  } = match;\n  const {\n    type\n  } = params;\n  const {\n    tasks,\n    orders,\n    templates,\n    documentList\n  } = state;\n  let taskList = Object.tokeys(tasks).length > 0 ? tasks : [];\n  taskList.forEach(item => item['documentStatus'] = toDoOrDone(orders[item.orderNo].projectNumber, item.orderNo, item.activityNo, templates, documentList));\n  console.log(taskList);\n  return {\n    type,\n    tasksData: taskList.filter(item => item.taskType === type)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    submit: (action, data) => {\n      console.log(action, data);\n    },\n    getTaskCount: (task, status) => {\n      let count = task.filter(item => item.status === status).length;\n      return count;\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);","map":{"version":3,"sources":["C:/project/SCF-NI_PM_App/SCF.InstallationQuality/react-client/src/pages/TaskListPage/index.js"],"names":["Box","FFTab","TaskListItem","LocalizeContext","toDoOrDone","PrimaryLayout","React","connect","useParams","Tasks","type","tasksData","getTaskCount","submit","i18n","useContext","status","setStatus","useState","params","awaitComplate","awaitClose","tabs","title","ISNTAPP_TO_COMPLETE","value","ISNTAPP_TO_CLOSE","ISNTAPP_CLOSED","currentStatusTasks","forEach","item","push","position","top","width","zIndex","left","padding","backgroundColor","borderRadius","color","display","height","window","screen","overflow","action","data","mapStateToProps","state","ownProps","match","tasks","orders","templates","documentList","taskList","Object","tokeys","length","orderNo","projectNumber","activityNo","console","log","filter","taskType","mapDispatchToProps","dispatch","task","count"],"mappings":"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","sourcesContent":["import { Box } from \"@material-ui/core\";\r\nimport FFTab from \"components/FFTab\";\r\nimport TaskListItem from \"components/TaskListItem\";\r\nimport { LocalizeContext } from \"i18n\";\r\nimport { toDoOrDone } from \"js/util\";\r\nimport PrimaryLayout from \"layouts/PrimaryLayout\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst Tasks = ({ type, tasksData, getTaskCount, submit }) => {\r\n  const i18n = React.useContext(LocalizeContext);\r\n  const [status, setStatus] = React.useState(\"open\");\r\n  const params = useParams()\r\n  const awaitComplate = getTaskCount(tasksData,'awaitComplate');\r\n  const awaitClose = getTaskCount(tasksData, 'awaitClose');\r\n  const tabs = [\r\n    { title: i18n.ISNTAPP_TO_COMPLETE, value: \"open\" },\r\n    { title: i18n.ISNTAPP_TO_CLOSE, value: \"pending\" },\r\n    { title: i18n.ISNTAPP_CLOSED, value: \"close\" },\r\n  ];\r\n\r\n  let currentStatusTasks = [];\r\n\r\n  if (status === \"open\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.status === \"awaitComplate\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (status === \"pending\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.status === \"awaitClose\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (status === \"close\") {\r\n    tasksData.forEach((item) => {\r\n      if (item.status === \"closed\") {\r\n        currentStatusTasks.push(item);\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <PrimaryLayout name=\"tasks\" title={params.type}>\r\n      <Box\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"52px\",\r\n          width: \"100%\",\r\n          zIndex: \"10000\",\r\n        }}\r\n      >\r\n        <FFTab\r\n          tabs={tabs}\r\n          selectedTabValue={\"open\"}\r\n          onTabChange={(value) => setStatus(value)}\r\n        />\r\n        <span\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"0\",\r\n            left: \"22%\",\r\n            padding: \"2px 8px\",\r\n            backgroundColor: \"red\",\r\n            borderRadius: \"40px\",\r\n            color: \"white\",\r\n            display: awaitComplate >0?'block':'none'\r\n          }}\r\n        >\r\n          {awaitComplate}\r\n        </span>\r\n            <span\r\n              style={{\r\n                position: \"absolute\",\r\n                top: \"0\",\r\n                left: \"55%\",\r\n                padding: \"2px 8px\",\r\n                backgroundColor: \"red\",\r\n                borderRadius: \"40px\",\r\n                color: \"white\",\r\n                display: awaitClose > 0 ? 'block' : 'none'\r\n              }}\r\n            >\r\n          {awaitClose}\r\n        </span>\r\n      </Box>\r\n\r\n      <Box\r\n        style={{\r\n          width: \"100%\",\r\n          padding: \"16px\",\r\n          position: \"absolute\",\r\n          top: \"32px\",\r\n          height: window.screen.height - 157 + \"px\",\r\n          overflow: \"hidden auto\",\r\n        }}\r\n      >\r\n        <TaskListItem\r\n          data={currentStatusTasks}\r\n          status={status}\r\n          type={type}\r\n          submit={(action,data) => { \r\n            submit(action,data);\r\n          }}\r\n        ></TaskListItem>\r\n      </Box>\r\n    </PrimaryLayout>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const { match } = ownProps;\r\n  const { params } = match;\r\n  const { type } = params;\r\n  const { tasks, orders, templates, documentList } = state;\r\n\r\n  let taskList = Object.tokeys(tasks).length > 0 ? tasks : [];\r\n  taskList.forEach((item) =>\r\n    item['documentStatus'] = toDoOrDone(\r\n     orders[item.orderNo].projectNumber,\r\n      item.orderNo,\r\n      item.activityNo,\r\n      templates,\r\n      documentList\r\n    )\r\n  )\r\n  console.log(taskList)\r\n  return {\r\n    type,\r\n    tasksData:\r\n    taskList.filter((item) => item.taskType === type),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    submit: (action, data) => {\r\n      console.log(action,data)\r\n    },\r\n    getTaskCount: (task, status) => {\r\n      let count = task.filter((item) => item.status === status).length\r\n      return count\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks);\r\n"]},"metadata":{},"sourceType":"module"}